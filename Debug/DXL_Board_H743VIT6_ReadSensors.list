
DXL_Board_H743VIT6_ReadSensors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a9c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f0  08009d40  08009d40  0000ad40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a230  0800a230  0000b230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a238  0800a238  0000b238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a23c  0800a23c  0000b23c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001d8  20000000  0800a240  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .text         00000000  00000000  00000000  0000c1d8  2**0
                  CONTENTS, ALLOC, LOAD, CODE
  8 .bss          00000b38  24000000  24000000  0000d000  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200001d8  200001d8  0000c1d8  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  0000c1d8  2**0
                  CONTENTS, READONLY
 11 .debug_info   00025f03  00000000  00000000  0000c206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00003cc9  00000000  00000000  00032109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001568  00000000  00000000  00035dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001181  00000000  00000000  00037340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00007f51  00000000  00000000  000384c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00026771  00000000  00000000  00040412  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001729e2  00000000  00000000  00066b83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  001d9565  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000045e8  00000000  00000000  001d95a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loclists 0000f44a  00000000  00000000  001ddb90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001ecfda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000000 	.word	0x24000000
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009d24 	.word	0x08009d24

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000004 	.word	0x24000004
 80002dc:	08009d24 	.word	0x08009d24

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000680:	b500      	push	{lr}
 8000682:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000684:	4b27      	ldr	r3, [pc, #156]	@ (8000724 <MX_DMA_Init+0xa4>)
 8000686:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 800068a:	f042 0201 	orr.w	r2, r2, #1
 800068e:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 8000692:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	9301      	str	r3, [sp, #4]
 800069c:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 1, 0);
 800069e:	2200      	movs	r2, #0
 80006a0:	2101      	movs	r1, #1
 80006a2:	200b      	movs	r0, #11
 80006a4:	f001 fb96 	bl	8001dd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80006a8:	200b      	movs	r0, #11
 80006aa:	f001 fbc7 	bl	8001e3c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 1, 0);
 80006ae:	2200      	movs	r2, #0
 80006b0:	2101      	movs	r1, #1
 80006b2:	200c      	movs	r0, #12
 80006b4:	f001 fb8e 	bl	8001dd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80006b8:	200c      	movs	r0, #12
 80006ba:	f001 fbbf 	bl	8001e3c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 1, 0);
 80006be:	2200      	movs	r2, #0
 80006c0:	2101      	movs	r1, #1
 80006c2:	200d      	movs	r0, #13
 80006c4:	f001 fb86 	bl	8001dd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80006c8:	200d      	movs	r0, #13
 80006ca:	f001 fbb7 	bl	8001e3c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 1, 0);
 80006ce:	2200      	movs	r2, #0
 80006d0:	2101      	movs	r1, #1
 80006d2:	200e      	movs	r0, #14
 80006d4:	f001 fb7e 	bl	8001dd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80006d8:	200e      	movs	r0, #14
 80006da:	f001 fbaf 	bl	8001e3c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 1, 0);
 80006de:	2200      	movs	r2, #0
 80006e0:	2101      	movs	r1, #1
 80006e2:	200f      	movs	r0, #15
 80006e4:	f001 fb76 	bl	8001dd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80006e8:	200f      	movs	r0, #15
 80006ea:	f001 fba7 	bl	8001e3c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 1, 0);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2101      	movs	r1, #1
 80006f2:	2010      	movs	r0, #16
 80006f4:	f001 fb6e 	bl	8001dd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80006f8:	2010      	movs	r0, #16
 80006fa:	f001 fb9f 	bl	8001e3c <HAL_NVIC_EnableIRQ>

}
 80006fe:	2200      	movs	r2, #0
 8000700:	2101      	movs	r1, #1
 8000702:	2011      	movs	r0, #17
 8000704:	f001 fb66 	bl	8001dd4 <HAL_NVIC_SetPriority>

 8000708:	2011      	movs	r0, #17
 800070a:	f001 fb97 	bl	8001e3c <HAL_NVIC_EnableIRQ>
/* USER CODE BEGIN 2 */

 800070e:	2200      	movs	r2, #0
 8000710:	2101      	movs	r1, #1
 8000712:	202f      	movs	r0, #47	@ 0x2f
 8000714:	f001 fb5e 	bl	8001dd4 <HAL_NVIC_SetPriority>
/* USER CODE END 2 */
 8000718:	202f      	movs	r0, #47	@ 0x2f
 800071a:	f001 fb8f 	bl	8001e3c <HAL_NVIC_EnableIRQ>

 800071e:	b003      	add	sp, #12
 8000720:	f85d fb04 	ldr.w	pc, [sp], #4
 8000724:	58024400 	.word	0x58024400

08000728 <MX_FDCAN1_Init>:
FDCAN_HandleTypeDef hfdcan1;
FDCAN_HandleTypeDef hfdcan2;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000728:	b510      	push	{r4, lr}
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800072a:	4819      	ldr	r0, [pc, #100]	@ (8000790 <MX_FDCAN1_Init+0x68>)
 800072c:	4b19      	ldr	r3, [pc, #100]	@ (8000794 <MX_FDCAN1_Init+0x6c>)
 800072e:	6003      	str	r3, [r0, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 8000730:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000734:	6083      	str	r3, [r0, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000736:	2300      	movs	r3, #0
 8000738:	60c3      	str	r3, [r0, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 800073a:	2201      	movs	r2, #1
 800073c:	7402      	strb	r2, [r0, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800073e:	7443      	strb	r3, [r0, #17]
  hfdcan1.Init.ProtocolException = ENABLE;
 8000740:	7482      	strb	r2, [r0, #18]
  hfdcan1.Init.NominalPrescaler = 10;
 8000742:	210a      	movs	r1, #10
 8000744:	6141      	str	r1, [r0, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 8000746:	2102      	movs	r1, #2
 8000748:	6181      	str	r1, [r0, #24]
  hfdcan1.Init.NominalTimeSeg1 = 5;
 800074a:	2405      	movs	r4, #5
 800074c:	61c4      	str	r4, [r0, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800074e:	6201      	str	r1, [r0, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000750:	6242      	str	r2, [r0, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 8000752:	2104      	movs	r1, #4
 8000754:	6281      	str	r1, [r0, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 11;
 8000756:	240b      	movs	r4, #11
 8000758:	62c4      	str	r4, [r0, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 800075a:	6301      	str	r1, [r0, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 800075c:	6343      	str	r3, [r0, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 2;
 800075e:	6382      	str	r2, [r0, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 1;
 8000760:	63c2      	str	r2, [r0, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 24;
 8000762:	2218      	movs	r2, #24
 8000764:	6402      	str	r2, [r0, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_48;
 8000766:	220e      	movs	r2, #14
 8000768:	6442      	str	r2, [r0, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 800076a:	6483      	str	r3, [r0, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_64;
 800076c:	2112      	movs	r1, #18
 800076e:	64c1      	str	r1, [r0, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000770:	6503      	str	r3, [r0, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_64;
 8000772:	6541      	str	r1, [r0, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 3;
 8000774:	2103      	movs	r1, #3
 8000776:	6581      	str	r1, [r0, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000778:	65c3      	str	r3, [r0, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 8;
 800077a:	2108      	movs	r1, #8
 800077c:	6601      	str	r1, [r0, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800077e:	6643      	str	r3, [r0, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_48;
 8000780:	6682      	str	r2, [r0, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000782:	f002 ff5f 	bl	8003644 <HAL_FDCAN_Init>
 8000786:	b900      	cbnz	r0, 800078a <MX_FDCAN1_Init+0x62>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000788:	bd10      	pop	{r4, pc}
    Error_Handler();
 800078a:	f000 fa5f 	bl	8000c4c <Error_Handler>
}
 800078e:	e7fb      	b.n	8000788 <MX_FDCAN1_Init+0x60>
 8000790:	240000c0 	.word	0x240000c0
 8000794:	4000a000 	.word	0x4000a000

08000798 <MX_FDCAN2_Init>:
/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 8000798:	b538      	push	{r3, r4, r5, lr}
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 800079a:	4818      	ldr	r0, [pc, #96]	@ (80007fc <MX_FDCAN2_Init+0x64>)
 800079c:	4b18      	ldr	r3, [pc, #96]	@ (8000800 <MX_FDCAN2_Init+0x68>)
 800079e:	6003      	str	r3, [r0, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80007a0:	2300      	movs	r3, #0
 80007a2:	6083      	str	r3, [r0, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80007a4:	60c3      	str	r3, [r0, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80007a6:	7403      	strb	r3, [r0, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80007a8:	7443      	strb	r3, [r0, #17]
  hfdcan2.Init.ProtocolException = ENABLE;
 80007aa:	2201      	movs	r2, #1
 80007ac:	7482      	strb	r2, [r0, #18]
  hfdcan2.Init.NominalPrescaler = 10;
 80007ae:	210a      	movs	r1, #10
 80007b0:	6141      	str	r1, [r0, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 2;
 80007b2:	2402      	movs	r4, #2
 80007b4:	6184      	str	r4, [r0, #24]
  hfdcan2.Init.NominalTimeSeg1 = 5;
 80007b6:	2505      	movs	r5, #5
 80007b8:	61c5      	str	r5, [r0, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 80007ba:	6204      	str	r4, [r0, #32]
  hfdcan2.Init.DataPrescaler = 2;
 80007bc:	6244      	str	r4, [r0, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 10;
 80007be:	6281      	str	r1, [r0, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 29;
 80007c0:	241d      	movs	r4, #29
 80007c2:	62c4      	str	r4, [r0, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 10;
 80007c4:	6301      	str	r1, [r0, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 1280;
 80007c6:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 80007ca:	6341      	str	r1, [r0, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 1;
 80007cc:	6382      	str	r2, [r0, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 1;
 80007ce:	63c2      	str	r2, [r0, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 80007d0:	6403      	str	r3, [r0, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80007d2:	2204      	movs	r2, #4
 80007d4:	6442      	str	r2, [r0, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 64;
 80007d6:	2140      	movs	r1, #64	@ 0x40
 80007d8:	6481      	str	r1, [r0, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80007da:	64c2      	str	r2, [r0, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 80007dc:	6503      	str	r3, [r0, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80007de:	6542      	str	r2, [r0, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 80007e0:	6583      	str	r3, [r0, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 80007e2:	65c3      	str	r3, [r0, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 8;
 80007e4:	2108      	movs	r1, #8
 80007e6:	6601      	str	r1, [r0, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80007e8:	6643      	str	r3, [r0, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80007ea:	6682      	str	r2, [r0, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80007ec:	f002 ff2a 	bl	8003644 <HAL_FDCAN_Init>
 80007f0:	b900      	cbnz	r0, 80007f4 <MX_FDCAN2_Init+0x5c>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80007f2:	bd38      	pop	{r3, r4, r5, pc}
    Error_Handler();
 80007f4:	f000 fa2a 	bl	8000c4c <Error_Handler>
}
 80007f8:	e7fb      	b.n	80007f2 <MX_FDCAN2_Init+0x5a>
 80007fa:	bf00      	nop
 80007fc:	24000020 	.word	0x24000020
 8000800:	4000a400 	.word	0x4000a400

08000804 <HAL_FDCAN_MspInit>:

static uint32_t HAL_RCC_FDCAN_CLK_ENABLED=0;

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000804:	b510      	push	{r4, lr}
 8000806:	b08a      	sub	sp, #40	@ 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000808:	2300      	movs	r3, #0
 800080a:	9305      	str	r3, [sp, #20]
 800080c:	9306      	str	r3, [sp, #24]
 800080e:	9307      	str	r3, [sp, #28]
 8000810:	9308      	str	r3, [sp, #32]
 8000812:	9309      	str	r3, [sp, #36]	@ 0x24
  if(fdcanHandle->Instance==FDCAN1)
 8000814:	6803      	ldr	r3, [r0, #0]
 8000816:	4a3d      	ldr	r2, [pc, #244]	@ (800090c <HAL_FDCAN_MspInit+0x108>)
 8000818:	4293      	cmp	r3, r2
 800081a:	d004      	beq.n	8000826 <HAL_FDCAN_MspInit+0x22>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
  else if(fdcanHandle->Instance==FDCAN2)
 800081c:	4a3c      	ldr	r2, [pc, #240]	@ (8000910 <HAL_FDCAN_MspInit+0x10c>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d03a      	beq.n	8000898 <HAL_FDCAN_MspInit+0x94>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 8000822:	b00a      	add	sp, #40	@ 0x28
 8000824:	bd10      	pop	{r4, pc}
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000826:	4a3b      	ldr	r2, [pc, #236]	@ (8000914 <HAL_FDCAN_MspInit+0x110>)
 8000828:	6813      	ldr	r3, [r2, #0]
 800082a:	3301      	adds	r3, #1
 800082c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800082e:	2b01      	cmp	r3, #1
 8000830:	d024      	beq.n	800087c <HAL_FDCAN_MspInit+0x78>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000832:	4b39      	ldr	r3, [pc, #228]	@ (8000918 <HAL_FDCAN_MspInit+0x114>)
 8000834:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000838:	f042 0201 	orr.w	r2, r2, #1
 800083c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000844:	f003 0301 	and.w	r3, r3, #1
 8000848:	9302      	str	r3, [sp, #8]
 800084a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800084c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000850:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000852:	2302      	movs	r3, #2
 8000854:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000856:	2401      	movs	r4, #1
 8000858:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800085a:	2303      	movs	r3, #3
 800085c:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800085e:	2309      	movs	r3, #9
 8000860:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000862:	a905      	add	r1, sp, #20
 8000864:	482d      	ldr	r0, [pc, #180]	@ (800091c <HAL_FDCAN_MspInit+0x118>)
 8000866:	f003 fc3d 	bl	80040e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 1, 1);
 800086a:	4622      	mov	r2, r4
 800086c:	4621      	mov	r1, r4
 800086e:	2013      	movs	r0, #19
 8000870:	f001 fab0 	bl	8001dd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000874:	2013      	movs	r0, #19
 8000876:	f001 fae1 	bl	8001e3c <HAL_NVIC_EnableIRQ>
 800087a:	e7d2      	b.n	8000822 <HAL_FDCAN_MspInit+0x1e>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800087c:	4b26      	ldr	r3, [pc, #152]	@ (8000918 <HAL_FDCAN_MspInit+0x114>)
 800087e:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
 8000882:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000886:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
 800088a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800088e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000892:	9301      	str	r3, [sp, #4]
 8000894:	9b01      	ldr	r3, [sp, #4]
 8000896:	e7cc      	b.n	8000832 <HAL_FDCAN_MspInit+0x2e>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000898:	4a1e      	ldr	r2, [pc, #120]	@ (8000914 <HAL_FDCAN_MspInit+0x110>)
 800089a:	6813      	ldr	r3, [r2, #0]
 800089c:	3301      	adds	r3, #1
 800089e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	d024      	beq.n	80008ee <HAL_FDCAN_MspInit+0xea>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a4:	4b1c      	ldr	r3, [pc, #112]	@ (8000918 <HAL_FDCAN_MspInit+0x114>)
 80008a6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80008aa:	f042 0202 	orr.w	r2, r2, #2
 80008ae:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80008b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008b6:	f003 0302 	and.w	r3, r3, #2
 80008ba:	9304      	str	r3, [sp, #16]
 80008bc:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80008be:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80008c2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c4:	2302      	movs	r3, #2
 80008c6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008c8:	2401      	movs	r4, #1
 80008ca:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008cc:	2303      	movs	r3, #3
 80008ce:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80008d0:	2309      	movs	r3, #9
 80008d2:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d4:	a905      	add	r1, sp, #20
 80008d6:	4812      	ldr	r0, [pc, #72]	@ (8000920 <HAL_FDCAN_MspInit+0x11c>)
 80008d8:	f003 fc04 	bl	80040e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 1, 1);
 80008dc:	4622      	mov	r2, r4
 80008de:	4621      	mov	r1, r4
 80008e0:	2014      	movs	r0, #20
 80008e2:	f001 fa77 	bl	8001dd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 80008e6:	2014      	movs	r0, #20
 80008e8:	f001 faa8 	bl	8001e3c <HAL_NVIC_EnableIRQ>
}
 80008ec:	e799      	b.n	8000822 <HAL_FDCAN_MspInit+0x1e>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80008ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000918 <HAL_FDCAN_MspInit+0x114>)
 80008f0:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
 80008f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80008f8:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
 80008fc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000900:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000904:	9303      	str	r3, [sp, #12]
 8000906:	9b03      	ldr	r3, [sp, #12]
 8000908:	e7cc      	b.n	80008a4 <HAL_FDCAN_MspInit+0xa0>
 800090a:	bf00      	nop
 800090c:	4000a000 	.word	0x4000a000
 8000910:	4000a400 	.word	0x4000a400
 8000914:	2400001c 	.word	0x2400001c
 8000918:	58024400 	.word	0x58024400
 800091c:	58020000 	.word	0x58020000
 8000920:	58020400 	.word	0x58020400

08000924 <MX_GPIO_Init>:
/** Configure pins
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000928:	b08a      	sub	sp, #40	@ 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092a:	2400      	movs	r4, #0
 800092c:	9405      	str	r4, [sp, #20]
 800092e:	9406      	str	r4, [sp, #24]
 8000930:	9407      	str	r4, [sp, #28]
 8000932:	9408      	str	r4, [sp, #32]
 8000934:	9409      	str	r4, [sp, #36]	@ 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000936:	4b41      	ldr	r3, [pc, #260]	@ (8000a3c <MX_GPIO_Init+0x118>)
 8000938:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800093c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000940:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000944:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000948:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 800094c:	9200      	str	r2, [sp, #0]
 800094e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000950:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000954:	f042 0201 	orr.w	r2, r2, #1
 8000958:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800095c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000960:	f002 0201 	and.w	r2, r2, #1
 8000964:	9201      	str	r2, [sp, #4]
 8000966:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000968:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800096c:	f042 0204 	orr.w	r2, r2, #4
 8000970:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000974:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000978:	f002 0204 	and.w	r2, r2, #4
 800097c:	9202      	str	r2, [sp, #8]
 800097e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000980:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000984:	f042 0202 	orr.w	r2, r2, #2
 8000988:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800098c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000990:	f002 0202 	and.w	r2, r2, #2
 8000994:	9203      	str	r2, [sp, #12]
 8000996:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000998:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800099c:	f042 0208 	orr.w	r2, r2, #8
 80009a0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80009a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009a8:	f003 0308 	and.w	r3, r3, #8
 80009ac:	9304      	str	r3, [sp, #16]
 80009ae:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RTS2_Pin|RTS1_Pin, GPIO_PIN_RESET);
 80009b0:	f8df a090 	ldr.w	sl, [pc, #144]	@ 8000a44 <MX_GPIO_Init+0x120>
 80009b4:	4622      	mov	r2, r4
 80009b6:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80009ba:	4650      	mov	r0, sl
 80009bc:	f003 fc94 	bl	80042e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 80009c0:	f8df 9084 	ldr.w	r9, [pc, #132]	@ 8000a48 <MX_GPIO_Init+0x124>
 80009c4:	4622      	mov	r2, r4
 80009c6:	2120      	movs	r1, #32
 80009c8:	4648      	mov	r0, r9
 80009ca:	f003 fc8d 	bl	80042e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RTS7_GPIO_Port, RTS7_Pin, GPIO_PIN_RESET);
 80009ce:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8000a4c <MX_GPIO_Init+0x128>
 80009d2:	4622      	mov	r2, r4
 80009d4:	2103      	movs	r1, #3
 80009d6:	4640      	mov	r0, r8
 80009d8:	f003 fc86 	bl	80042e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RTS2_Pin|RTS1_Pin;
 80009dc:	4f18      	ldr	r7, [pc, #96]	@ (8000a40 <MX_GPIO_Init+0x11c>)
 80009de:	4622      	mov	r2, r4
 80009e0:	2188      	movs	r1, #136	@ 0x88
 80009e2:	4638      	mov	r0, r7
 80009e4:	f003 fc80 	bl	80042e8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e8:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80009ec:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ee:	2501      	movs	r5, #1
 80009f0:	9506      	str	r5, [sp, #24]

 80009f2:	2602      	movs	r6, #2
 80009f4:	9607      	str	r6, [sp, #28]
  /*Configure GPIO pins : PBPin PBPin */
 80009f6:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 80009f8:	a905      	add	r1, sp, #20
 80009fa:	4650      	mov	r0, sl
 80009fc:	f003 fb72 	bl	80040e4 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a00:	2320      	movs	r3, #32
 8000a02:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a04:	9506      	str	r5, [sp, #24]

 8000a06:	9607      	str	r6, [sp, #28]
  /*Configure GPIO pin : PtPin */
 8000a08:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = RTS7_Pin;
 8000a0a:	a905      	add	r1, sp, #20
 8000a0c:	4648      	mov	r0, r9
 8000a0e:	f003 fb69 	bl	80040e4 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a12:	2303      	movs	r3, #3
 8000a14:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(RTS7_GPIO_Port, &GPIO_InitStruct);
 8000a16:	9506      	str	r5, [sp, #24]

 8000a18:	9407      	str	r4, [sp, #28]
}
 8000a1a:	9408      	str	r4, [sp, #32]

 8000a1c:	a905      	add	r1, sp, #20
 8000a1e:	4640      	mov	r0, r8
 8000a20:	f003 fb60 	bl	80040e4 <HAL_GPIO_Init>
/* USER CODE BEGIN 2 */

/* USER CODE END 2 */
 8000a24:	2388      	movs	r3, #136	@ 0x88
 8000a26:	9305      	str	r3, [sp, #20]
 8000a28:	9506      	str	r5, [sp, #24]
 8000a2a:	9607      	str	r6, [sp, #28]
 8000a2c:	9408      	str	r4, [sp, #32]
 8000a2e:	a905      	add	r1, sp, #20
 8000a30:	4638      	mov	r0, r7
 8000a32:	f003 fb57 	bl	80040e4 <HAL_GPIO_Init>
 8000a36:	b00a      	add	sp, #40	@ 0x28
 8000a38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a3c:	58024400 	.word	0x58024400
 8000a40:	58020c00 	.word	0x58020c00
 8000a44:	58020000 	.word	0x58020000
 8000a48:	58020800 	.word	0x58020800
 8000a4c:	58020400 	.word	0x58020400

08000a50 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a50:	b500      	push	{lr}
 8000a52:	b09f      	sub	sp, #124	@ 0x7c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a54:	224c      	movs	r2, #76	@ 0x4c
 8000a56:	2100      	movs	r1, #0
 8000a58:	a80b      	add	r0, sp, #44	@ 0x2c
 8000a5a:	f007 fb43 	bl	80080e4 <memset>

 8000a5e:	2220      	movs	r2, #32
 8000a60:	2100      	movs	r1, #0
 8000a62:	a803      	add	r0, sp, #12
 8000a64:	f007 fb3e 	bl	80080e4 <memset>
  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);

 8000a68:	2002      	movs	r0, #2
 8000a6a:	f003 fc4d 	bl	8004308 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

 8000a6e:	2300      	movs	r3, #0
 8000a70:	9300      	str	r3, [sp, #0]
 8000a72:	4b39      	ldr	r3, [pc, #228]	@ (8000b58 <SystemClock_Config+0x108>)
 8000a74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000a76:	f022 0201 	bic.w	r2, r2, #1
 8000a7a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a7e:	f003 0301 	and.w	r3, r3, #1
 8000a82:	9300      	str	r3, [sp, #0]
 8000a84:	4b35      	ldr	r3, [pc, #212]	@ (8000b5c <SystemClock_Config+0x10c>)
 8000a86:	699a      	ldr	r2, [r3, #24]
 8000a88:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8000a8c:	619a      	str	r2, [r3, #24]
 8000a8e:	699b      	ldr	r3, [r3, #24]
 8000a90:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a94:	9300      	str	r3, [sp, #0]
 8000a96:	9b00      	ldr	r3, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}

 8000a98:	4a30      	ldr	r2, [pc, #192]	@ (8000b5c <SystemClock_Config+0x10c>)
 8000a9a:	6993      	ldr	r3, [r2, #24]
 8000a9c:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8000aa0:	d0fb      	beq.n	8000a9a <SystemClock_Config+0x4a>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000aa2:	4b2f      	ldr	r3, [pc, #188]	@ (8000b60 <SystemClock_Config+0x110>)
 8000aa4:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8000aa8:	f042 0202 	orr.w	r2, r2, #2
 8000aac:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 8000ab0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ab4:	f003 0302 	and.w	r3, r3, #2
 8000ab8:	9301      	str	r3, [sp, #4]
 8000aba:	9b01      	ldr	r3, [sp, #4]

 8000abc:	2300      	movs	r3, #0
 8000abe:	9302      	str	r3, [sp, #8]
 8000ac0:	4b26      	ldr	r3, [pc, #152]	@ (8000b5c <SystemClock_Config+0x10c>)
 8000ac2:	699a      	ldr	r2, [r3, #24]
 8000ac4:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8000ac8:	619a      	str	r2, [r3, #24]
 8000aca:	699b      	ldr	r3, [r3, #24]
 8000acc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ad0:	9302      	str	r3, [sp, #8]
 8000ad2:	4b21      	ldr	r3, [pc, #132]	@ (8000b58 <SystemClock_Config+0x108>)
 8000ad4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000ad6:	f042 0201 	orr.w	r2, r2, #1
 8000ada:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	9302      	str	r3, [sp, #8]
 8000ae4:	9b02      	ldr	r3, [sp, #8]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}

 8000ae6:	4a1d      	ldr	r2, [pc, #116]	@ (8000b5c <SystemClock_Config+0x10c>)
 8000ae8:	6993      	ldr	r3, [r2, #24]
 8000aea:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8000aee:	d0fb      	beq.n	8000ae8 <SystemClock_Config+0x98>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000af0:	2302      	movs	r3, #2
 8000af2:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000af4:	2201      	movs	r2, #1
 8000af6:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000af8:	2240      	movs	r2, #64	@ 0x40
 8000afa:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000afc:	9314      	str	r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000afe:	2200      	movs	r2, #0
 8000b00:	9215      	str	r2, [sp, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000b02:	2104      	movs	r1, #4
 8000b04:	9116      	str	r1, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b06:	213c      	movs	r1, #60	@ 0x3c
 8000b08:	9117      	str	r1, [sp, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b0a:	9318      	str	r3, [sp, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b0c:	9319      	str	r3, [sp, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b0e:	931a      	str	r3, [sp, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b10:	230c      	movs	r3, #12
 8000b12:	931b      	str	r3, [sp, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b14:	921c      	str	r2, [sp, #112]	@ 0x70
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b16:	921d      	str	r2, [sp, #116]	@ 0x74
  {
 8000b18:	a80b      	add	r0, sp, #44	@ 0x2c
 8000b1a:	f003 fc1d 	bl	8004358 <HAL_RCC_OscConfig>
 8000b1e:	b9b0      	cbnz	r0, 8000b4e <SystemClock_Config+0xfe>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
 8000b20:	233f      	movs	r3, #63	@ 0x3f
 8000b22:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b24:	2303      	movs	r3, #3
 8000b26:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b2c:	2308      	movs	r3, #8
 8000b2e:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b30:	2340      	movs	r3, #64	@ 0x40
 8000b32:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b34:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b36:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b3a:	9209      	str	r2, [sp, #36]	@ 0x24

 8000b3c:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
  {
 8000b3e:	2104      	movs	r1, #4
 8000b40:	a803      	add	r0, sp, #12
 8000b42:	f004 f85d 	bl	8004c00 <HAL_RCC_ClockConfig>
 8000b46:	b920      	cbnz	r0, 8000b52 <SystemClock_Config+0x102>
    Error_Handler();
  }
}

 8000b48:	b01f      	add	sp, #124	@ 0x7c
 8000b4a:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b4e:	b672      	cpsid	i
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
 8000b50:	e7fe      	b.n	8000b50 <SystemClock_Config+0x100>
 8000b52:	b672      	cpsid	i
 8000b54:	e7fe      	b.n	8000b54 <SystemClock_Config+0x104>
 8000b56:	bf00      	nop
 8000b58:	58000400 	.word	0x58000400
 8000b5c:	58024800 	.word	0x58024800
 8000b60:	58024400 	.word	0x58024400

08000b64 <PeriphCommonClock_Config>:
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b64:	b500      	push	{lr}
 8000b66:	b0b1      	sub	sp, #196	@ 0xc4

 8000b68:	229c      	movs	r2, #156	@ 0x9c
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	a809      	add	r0, sp, #36	@ 0x24
 8000b6e:	f007 fab9 	bl	80080e4 <memset>
  PeriphClkInitStruct.PLL2.PLL2M = 32;
 8000b72:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000b76:	2300      	movs	r3, #0
 8000b78:	e9cd 2300 	strd	r2, r3, [sp]
  PeriphClkInitStruct.PLL2.PLL2N = 80;
 8000b7c:	2220      	movs	r2, #32
 8000b7e:	9202      	str	r2, [sp, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000b80:	2350      	movs	r3, #80	@ 0x50
 8000b82:	9303      	str	r3, [sp, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000b84:	2302      	movs	r3, #2
 8000b86:	9304      	str	r3, [sp, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000b88:	9305      	str	r3, [sp, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8000b8a:	9306      	str	r3, [sp, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000b8c:	2340      	movs	r3, #64	@ 0x40
 8000b8e:	9307      	str	r3, [sp, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000b90:	9208      	str	r2, [sp, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b92:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000b96:	931c      	str	r3, [sp, #112]	@ 0x70
  {
 8000b98:	4668      	mov	r0, sp
 8000b9a:	f004 fad3 	bl	8005144 <HAL_RCCEx_PeriphCLKConfig>
 8000b9e:	b910      	cbnz	r0, 8000ba6 <PeriphCommonClock_Config+0x42>

 8000ba0:	b031      	add	sp, #196	@ 0xc4
 8000ba2:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ba6:	b672      	cpsid	i
  {
 8000ba8:	e7fe      	b.n	8000ba8 <PeriphCommonClock_Config+0x44>
	...

08000bac <main>:
  /* USER CODE BEGIN 1 */
 8000bac:	b508      	push	{r3, lr}
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000bae:	4b25      	ldr	r3, [pc, #148]	@ (8000c44 <main+0x98>)
 8000bb0:	695b      	ldr	r3, [r3, #20]
 8000bb2:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000bb6:	d113      	bne.n	8000be0 <main+0x34>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000bb8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000bbc:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000bc0:	4b20      	ldr	r3, [pc, #128]	@ (8000c44 <main+0x98>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000bc8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000bcc:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000bd0:	695a      	ldr	r2, [r3, #20]
 8000bd2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8000bd6:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000bd8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000bdc:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8000be0:	f001 f88c 	bl	8001cfc <HAL_Init>
  SystemClock_Config();
 8000be4:	f7ff ff34 	bl	8000a50 <SystemClock_Config>
  PeriphCommonClock_Config();
 8000be8:	f7ff ffbc 	bl	8000b64 <PeriphCommonClock_Config>
  MX_GPIO_Init();
 8000bec:	f7ff fe9a 	bl	8000924 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bf0:	f7ff fd46 	bl	8000680 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000bf4:	f000 fcae 	bl	8001554 <MX_UART5_Init>
  MX_USART2_UART_Init();
 8000bf8:	f000 fd18 	bl	800162c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000bfc:	f000 fd4c 	bl	8001698 <MX_USART2_UART_Init>
  MX_FDCAN1_Init();
 8000c00:	f000 fd80 	bl	8001704 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 8000c04:	f7ff fd90 	bl	8000728 <MX_FDCAN1_Init>
  MX_TIM2_Init();
 8000c08:	f000 fb60 	bl	80012cc <MX_TIM1_Init>
  MX_TIM3_Init();
 8000c0c:	f000 fb98 	bl	8001340 <MX_TIM2_Init>
  MX_TIM5_Init();
 8000c10:	f000 fbce 	bl	80013b0 <MX_TIM3_Init>
  MX_FDCAN2_Init();
 8000c14:	f000 fc04 	bl	8001420 <MX_TIM5_Init>
  MX_UART7_Init();
 8000c18:	f7ff fdbe 	bl	8000798 <MX_FDCAN2_Init>
  /* USER CODE BEGIN 2 */
 8000c1c:	f000 fcd0 	bl	80015c0 <MX_UART7_Init>
  HAL_NVIC_DisableIRQ(TIM3_IRQn);
 8000c20:	201c      	movs	r0, #28
 8000c22:	f001 f919 	bl	8001e58 <HAL_NVIC_DisableIRQ>

 8000c26:	201d      	movs	r0, #29
 8000c28:	f001 f916 	bl	8001e58 <HAL_NVIC_DisableIRQ>
  while (1)
 8000c2c:	f000 f834 	bl	8000c98 <dxl_read_main>
	  HAL_Delay(1000);
 8000c30:	4d05      	ldr	r5, [pc, #20]	@ (8000c48 <main+0x9c>)
  }
 8000c32:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
	  HAL_Delay(1000);
 8000c36:	4628      	mov	r0, r5
 8000c38:	f007 f974 	bl	8007f24 <puts>
  }
 8000c3c:	4620      	mov	r0, r4
 8000c3e:	f001 f89d 	bl	8001d7c <HAL_Delay>
  {
 8000c42:	e7f8      	b.n	8000c36 <main+0x8a>
 8000c44:	e000ed00 	.word	0xe000ed00
 8000c48:	08009d8c 	.word	0x08009d8c

08000c4c <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 8000c4c:	b672      	cpsid	i
  {
 8000c4e:	e7fe      	b.n	8000c4e <Error_Handler+0x2>

08000c50 <uint_to_float>:
    float offset = x_min;
    return (int) ((x-offset)*((float)((1<<bits)-1))/span);
    }
    
    
float uint_to_float(int x_int, float x_min, float x_max, int bits){
 8000c50:	ee07 0a90 	vmov	s15, r0
    /// converts unsigned int to float, given range and number of bits ///
    float span = x_max - x_min;
    float offset = x_min;
    return ((float)x_int)*span/((float)((1<<bits)-1)) + offset;
 8000c54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    float span = x_max - x_min;
 8000c58:	ee70 0ac0 	vsub.f32	s1, s1, s0
    return ((float)x_int)*span/((float)((1<<bits)-1)) + offset;
 8000c5c:	ee27 7aa0 	vmul.f32	s14, s15, s1
 8000c60:	2301      	movs	r3, #1
 8000c62:	408b      	lsls	r3, r1
 8000c64:	3b01      	subs	r3, #1
 8000c66:	ee07 3a90 	vmov	s15, r3
 8000c6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c6e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000c72:	ee36 0a80 	vadd.f32	s0, s13, s0
 8000c76:	4770      	bx	lr

08000c78 <__io_putchar>:
#include "printing.h"
#include <stdio.h>

PUTCHAR_PROTOTYPE
{
 8000c78:	b500      	push	{lr}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	9001      	str	r0, [sp, #4]
  HAL_UART_Transmit(&huart6, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c82:	2201      	movs	r2, #1
 8000c84:	a901      	add	r1, sp, #4
 8000c86:	4803      	ldr	r0, [pc, #12]	@ (8000c94 <__io_putchar+0x1c>)
 8000c88:	f006 fa55 	bl	8007136 <HAL_UART_Transmit>
  return ch;
}
 8000c8c:	9801      	ldr	r0, [sp, #4]
 8000c8e:	b003      	add	sp, #12
 8000c90:	f85d fb04 	ldr.w	pc, [sp], #4
 8000c94:	24000704 	.word	0x24000704

08000c98 <dxl_read_main>:
//ForceSensor forcesensor2(1, &sensorB4);


// main CPP loop
int dxl_read_main(void)
{
 8000c98:	b570      	push	{r4, r5, r6, lr}
 8000c9a:	b086      	sub	sp, #24
	printf("\r\n--------MIT Read Sensor Vals--------\r\n");
 8000c9c:	4823      	ldr	r0, [pc, #140]	@ (8000d2c <dxl_read_main+0x94>)
 8000c9e:	f007 f941 	bl	8007f24 <puts>
	printf("Version No: %.2f\r\n\n\n", VERSION_NUMBER);
 8000ca2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ca6:	4b22      	ldr	r3, [pc, #136]	@ (8000d30 <dxl_read_main+0x98>)
 8000ca8:	4822      	ldr	r0, [pc, #136]	@ (8000d34 <dxl_read_main+0x9c>)
 8000caa:	f007 f8d3 	bl	8007e54 <iprintf>

	//Rx Filters
	sense_can_filt.IdType = FDCAN_STANDARD_ID;
 8000cae:	4922      	ldr	r1, [pc, #136]	@ (8000d38 <dxl_read_main+0xa0>)
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	600b      	str	r3, [r1, #0]
	sense_can_filt.FilterIndex = 0;
 8000cb4:	604b      	str	r3, [r1, #4]
	sense_can_filt.FilterType = FDCAN_FILTER_RANGE;
 8000cb6:	608b      	str	r3, [r1, #8]
	sense_can_filt.FilterConfig = FDCAN_FILTER_TO_RXFIFO1;
 8000cb8:	2202      	movs	r2, #2
 8000cba:	60ca      	str	r2, [r1, #12]
	sense_can_filt.FilterID1 = 0x00;
 8000cbc:	610b      	str	r3, [r1, #16]
	sense_can_filt.FilterID2 = 0x0E; // up to 0x0E for phalange sensors (14)
 8000cbe:	220e      	movs	r2, #14
 8000cc0:	614a      	str	r2, [r1, #20]
	sense_can_filt.RxBufferIndex = 0;
 8000cc2:	618b      	str	r3, [r1, #24]



	if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sense_can_filt) != HAL_OK)
 8000cc4:	481d      	ldr	r0, [pc, #116]	@ (8000d3c <dxl_read_main+0xa4>)
 8000cc6:	f002 fee7 	bl	8003a98 <HAL_FDCAN_ConfigFilter>
 8000cca:	b938      	cbnz	r0, 8000cdc <dxl_read_main+0x44>
		printf("Error in filter config. CAN FD2 \n\r");
		Error_Handler();
	}


	if ((HAL_FDCAN_Start(&hfdcan2)) != HAL_OK ) //Initialize CAN Bus
 8000ccc:	481b      	ldr	r0, [pc, #108]	@ (8000d3c <dxl_read_main+0xa4>)
 8000cce:	f002 ff26 	bl	8003b1e <HAL_FDCAN_Start>
 8000cd2:	b148      	cbz	r0, 8000ce8 <dxl_read_main+0x50>
	{
		printf("Failed to start sensor CAN.\n\r");
 8000cd4:	481a      	ldr	r0, [pc, #104]	@ (8000d40 <dxl_read_main+0xa8>)
 8000cd6:	f007 f8bd 	bl	8007e54 <iprintf>
		while(1);
 8000cda:	e7fe      	b.n	8000cda <dxl_read_main+0x42>
		printf("Error in filter config. CAN FD2 \n\r");
 8000cdc:	4819      	ldr	r0, [pc, #100]	@ (8000d44 <dxl_read_main+0xac>)
 8000cde:	f007 f8b9 	bl	8007e54 <iprintf>
		Error_Handler();
 8000ce2:	f7ff ffb3 	bl	8000c4c <Error_Handler>
 8000ce6:	e7f1      	b.n	8000ccc <dxl_read_main+0x34>
	}


	// enable CAN Interrupts
	HAL_FDCAN_ActivateNotification(&hfdcan2,FDCAN_IT_RX_FIFO1_NEW_MESSAGE,0);// Initialize CAN2 Rx1 Interrupt
 8000ce8:	2200      	movs	r2, #0
 8000cea:	2110      	movs	r1, #16
 8000cec:	4813      	ldr	r0, [pc, #76]	@ (8000d3c <dxl_read_main+0xa4>)
 8000cee:	f003 f815 	bl	8003d1c <HAL_FDCAN_ActivateNotification>


	int loop_count = 0;
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	4611      	mov	r1, r2
 8000cf6:	4814      	ldr	r0, [pc, #80]	@ (8000d48 <dxl_read_main+0xb0>)
 8000cf8:	f003 faf6 	bl	80042e8 <HAL_GPIO_WritePin>
	while (1)
	{

//			printf("loop time: %lu \r\n",eval_time);
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000cfc:	4e12      	ldr	r6, [pc, #72]	@ (8000d48 <dxl_read_main+0xb0>)
//			HAL_Delay(100);
//			printf("Force data: %lf, %lf, %lf, %lf, %lf\n\r", force2[0],force2[1],force2[2],force2[3],force2[4]);
			printf("Pressure data: %ld, %ld, %ld, %ld, %ld, %ld, %ld, %ld\n\r", pressure_raw2[0],pressure_raw2[1],pressure_raw2[2],pressure_raw2[3],pressure_raw2[4],pressure_raw2[5],pressure_raw2[6],pressure_raw2[7]);
 8000cfe:	4c13      	ldr	r4, [pc, #76]	@ (8000d4c <dxl_read_main+0xb4>)
 8000d00:	4d13      	ldr	r5, [pc, #76]	@ (8000d50 <dxl_read_main+0xb8>)
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000d02:	2101      	movs	r1, #1
 8000d04:	4630      	mov	r0, r6
 8000d06:	f003 faf5 	bl	80042f4 <HAL_GPIO_TogglePin>
			printf("Pressure data: %ld, %ld, %ld, %ld, %ld, %ld, %ld, %ld\n\r", pressure_raw2[0],pressure_raw2[1],pressure_raw2[2],pressure_raw2[3],pressure_raw2[4],pressure_raw2[5],pressure_raw2[6],pressure_raw2[7]);
 8000d0a:	69e3      	ldr	r3, [r4, #28]
 8000d0c:	9304      	str	r3, [sp, #16]
 8000d0e:	69a3      	ldr	r3, [r4, #24]
 8000d10:	9303      	str	r3, [sp, #12]
 8000d12:	6963      	ldr	r3, [r4, #20]
 8000d14:	9302      	str	r3, [sp, #8]
 8000d16:	6923      	ldr	r3, [r4, #16]
 8000d18:	9301      	str	r3, [sp, #4]
 8000d1a:	68e3      	ldr	r3, [r4, #12]
 8000d1c:	9300      	str	r3, [sp, #0]
 8000d1e:	68a3      	ldr	r3, [r4, #8]
 8000d20:	6862      	ldr	r2, [r4, #4]
 8000d22:	6821      	ldr	r1, [r4, #0]
 8000d24:	4628      	mov	r0, r5
 8000d26:	f007 f895 	bl	8007e54 <iprintf>
	while (1)
 8000d2a:	e7ea      	b.n	8000d02 <dxl_read_main+0x6a>
 8000d2c:	08009db4 	.word	0x08009db4
 8000d30:	3ff33333 	.word	0x3ff33333
 8000d34:	08009ddc 	.word	0x08009ddc
 8000d38:	240001c8 	.word	0x240001c8
 8000d3c:	24000020 	.word	0x24000020
 8000d40:	08009e18 	.word	0x08009e18
 8000d44:	08009df4 	.word	0x08009df4
 8000d48:	58020400 	.word	0x58020400
 8000d4c:	24000198 	.word	0x24000198
 8000d50:	08009e38 	.word	0x08009e38

08000d54 <HAL_FDCAN_RxFifo1Callback>:


// new unpacking for neural net values from fingertip sensors and extra ToF
void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *canHandle, uint32_t RxFifo1ITs)
{
	if((RxFifo1ITs & FDCAN_IT_RX_FIFO1_NEW_MESSAGE) != RESET){
 8000d54:	f011 0f10 	tst.w	r1, #16
 8000d58:	d100      	bne.n	8000d5c <HAL_FDCAN_RxFifo1Callback+0x8>
 8000d5a:	4770      	bx	lr
{
 8000d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d60:	ed2d 8b02 	vpush	{d8}
			HAL_FDCAN_GetRxMessage(canHandle, FDCAN_RX_FIFO1, &rxMsg_sense, sense_rx_buf);
 8000d64:	4c9d      	ldr	r4, [pc, #628]	@ (8000fdc <HAL_FDCAN_RxFifo1Callback+0x288>)
 8000d66:	4b9e      	ldr	r3, [pc, #632]	@ (8000fe0 <HAL_FDCAN_RxFifo1Callback+0x28c>)
 8000d68:	4622      	mov	r2, r4
 8000d6a:	2141      	movs	r1, #65	@ 0x41
 8000d6c:	f002 fef2 	bl	8003b54 <HAL_FDCAN_GetRxMessage>
			uint8_t id = rxMsg_sense.Identifier;
 8000d70:	7823      	ldrb	r3, [r4, #0]

//			printf("%d\n\r", id);

			if (id == CAN2_FORCE_1){
 8000d72:	2b05      	cmp	r3, #5
 8000d74:	d00c      	beq.n	8000d90 <HAL_FDCAN_RxFifo1Callback+0x3c>
				force1[1]  = uint_to_float(fy_int, FT_MIN, FT_MAX, 12);
				force1[2]  = uint_to_float(fz_int, FN_MIN, FN_MAX, 12);
				force1[3]  = uint_to_float(theta_int, ANG_MIN, ANG_MAX, 12);
				force1[4]  = uint_to_float(phi_int, ANG_MIN, ANG_MAX, 12);
			}
			else if (id == CAN2_FORCE_2){
 8000d76:	2b08      	cmp	r3, #8
 8000d78:	d85d      	bhi.n	8000e36 <HAL_FDCAN_RxFifo1Callback+0xe2>
 8000d7a:	e8df f013 	tbh	[pc, r3, lsl #1]
 8000d7e:	00ca      	.short	0x00ca
 8000d80:	00fc00e3 	.word	0x00fc00e3
 8000d84:	005c0115 	.word	0x005c0115
 8000d88:	0060005c 	.word	0x0060005c
 8000d8c:	00bf00b4 	.word	0x00bf00b4
				uint16_t fy_int = (sense_rx_buf[2]<<4)|(sense_rx_buf[3]>>4);
 8000d90:	4b93      	ldr	r3, [pc, #588]	@ (8000fe0 <HAL_FDCAN_RxFifo1Callback+0x28c>)
 8000d92:	78da      	ldrb	r2, [r3, #3]
 8000d94:	7899      	ldrb	r1, [r3, #2]
 8000d96:	0914      	lsrs	r4, r2, #4
 8000d98:	ea44 1401 	orr.w	r4, r4, r1, lsl #4
				uint16_t fz_int = ((sense_rx_buf[3]&0x0F)<<8)|sense_rx_buf[4];
 8000d9c:	0212      	lsls	r2, r2, #8
 8000d9e:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 8000da2:	791f      	ldrb	r7, [r3, #4]
 8000da4:	4317      	orrs	r7, r2
				uint16_t theta_int = (sense_rx_buf[5]<<4)|(sense_rx_buf[6]>>4);
 8000da6:	799a      	ldrb	r2, [r3, #6]
 8000da8:	7959      	ldrb	r1, [r3, #5]
 8000daa:	0916      	lsrs	r6, r2, #4
 8000dac:	ea46 1601 	orr.w	r6, r6, r1, lsl #4
				uint16_t phi_int = ((sense_rx_buf[6]&0x0F)<<8)|sense_rx_buf[7];
 8000db0:	0212      	lsls	r2, r2, #8
 8000db2:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 8000db6:	f893 8007 	ldrb.w	r8, [r3, #7]
 8000dba:	ea48 0802 	orr.w	r8, r8, r2
				uint16_t fx_int = ((sense_rx_buf[0]&0x0F)<<8)|sense_rx_buf[1];
 8000dbe:	781a      	ldrb	r2, [r3, #0]
 8000dc0:	0212      	lsls	r2, r2, #8
 8000dc2:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 8000dc6:	7858      	ldrb	r0, [r3, #1]
				force1[0] = uint_to_float(fx_int, FT_MIN, FT_MAX, 12);
 8000dc8:	210c      	movs	r1, #12
 8000dca:	eef3 0a04 	vmov.f32	s1, #52	@ 0x41a00000  20.0
 8000dce:	eebb 0a04 	vmov.f32	s0, #180	@ 0xc1a00000 -20.0
 8000dd2:	4310      	orrs	r0, r2
 8000dd4:	f7ff ff3c 	bl	8000c50 <uint_to_float>
 8000dd8:	4d82      	ldr	r5, [pc, #520]	@ (8000fe4 <HAL_FDCAN_RxFifo1Callback+0x290>)
 8000dda:	ed85 0a00 	vstr	s0, [r5]
				force1[1]  = uint_to_float(fy_int, FT_MIN, FT_MAX, 12);
 8000dde:	210c      	movs	r1, #12
 8000de0:	eef3 0a04 	vmov.f32	s1, #52	@ 0x41a00000  20.0
 8000de4:	eebb 0a04 	vmov.f32	s0, #180	@ 0xc1a00000 -20.0
 8000de8:	4620      	mov	r0, r4
 8000dea:	f7ff ff31 	bl	8000c50 <uint_to_float>
 8000dee:	ed85 0a01 	vstr	s0, [r5, #4]
				force1[2]  = uint_to_float(fz_int, FN_MIN, FN_MAX, 12);
 8000df2:	210c      	movs	r1, #12
 8000df4:	eef3 0a0e 	vmov.f32	s1, #62	@ 0x41f00000  30.0
 8000df8:	eebb 0a0e 	vmov.f32	s0, #190	@ 0xc1f00000 -30.0
 8000dfc:	4638      	mov	r0, r7
 8000dfe:	f7ff ff27 	bl	8000c50 <uint_to_float>
 8000e02:	ed85 0a02 	vstr	s0, [r5, #8]
				force1[3]  = uint_to_float(theta_int, ANG_MIN, ANG_MAX, 12);
 8000e06:	eddf 8a78 	vldr	s17, [pc, #480]	@ 8000fe8 <HAL_FDCAN_RxFifo1Callback+0x294>
 8000e0a:	ed9f 8a78 	vldr	s16, [pc, #480]	@ 8000fec <HAL_FDCAN_RxFifo1Callback+0x298>
 8000e0e:	210c      	movs	r1, #12
 8000e10:	eef0 0a68 	vmov.f32	s1, s17
 8000e14:	eeb0 0a48 	vmov.f32	s0, s16
 8000e18:	4630      	mov	r0, r6
 8000e1a:	f7ff ff19 	bl	8000c50 <uint_to_float>
 8000e1e:	ed85 0a03 	vstr	s0, [r5, #12]
				force1[4]  = uint_to_float(phi_int, ANG_MIN, ANG_MAX, 12);
 8000e22:	210c      	movs	r1, #12
 8000e24:	eef0 0a68 	vmov.f32	s1, s17
 8000e28:	eeb0 0a48 	vmov.f32	s0, s16
 8000e2c:	4640      	mov	r0, r8
 8000e2e:	f7ff ff0f 	bl	8000c50 <uint_to_float>
 8000e32:	ed85 0a04 	vstr	s0, [r5, #16]
				}


		}

}
 8000e36:	ecbd 8b02 	vpop	{d8}
 8000e3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				uint16_t fy_int = (sense_rx_buf[2]<<4)|(sense_rx_buf[3]>>4);
 8000e3e:	4b68      	ldr	r3, [pc, #416]	@ (8000fe0 <HAL_FDCAN_RxFifo1Callback+0x28c>)
 8000e40:	78da      	ldrb	r2, [r3, #3]
 8000e42:	7899      	ldrb	r1, [r3, #2]
 8000e44:	0914      	lsrs	r4, r2, #4
 8000e46:	ea44 1401 	orr.w	r4, r4, r1, lsl #4
				uint16_t fz_int = ((sense_rx_buf[3]&0x0F)<<8)|sense_rx_buf[4];
 8000e4a:	0212      	lsls	r2, r2, #8
 8000e4c:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 8000e50:	791f      	ldrb	r7, [r3, #4]
 8000e52:	4317      	orrs	r7, r2
				uint16_t theta_int = (sense_rx_buf[5]<<4)|(sense_rx_buf[6]>>4);
 8000e54:	799a      	ldrb	r2, [r3, #6]
 8000e56:	7959      	ldrb	r1, [r3, #5]
 8000e58:	0916      	lsrs	r6, r2, #4
 8000e5a:	ea46 1601 	orr.w	r6, r6, r1, lsl #4
				uint16_t phi_int = ((sense_rx_buf[6]&0x0F)<<8)|sense_rx_buf[7];
 8000e5e:	0212      	lsls	r2, r2, #8
 8000e60:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 8000e64:	f893 8007 	ldrb.w	r8, [r3, #7]
 8000e68:	ea48 0802 	orr.w	r8, r8, r2
				uint16_t fx_int = ((sense_rx_buf[0]&0x0F)<<8)|sense_rx_buf[1];
 8000e6c:	781a      	ldrb	r2, [r3, #0]
 8000e6e:	0212      	lsls	r2, r2, #8
 8000e70:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 8000e74:	7858      	ldrb	r0, [r3, #1]
				force2[0] = uint_to_float(fx_int, FT_MIN, FT_MAX, 12);
 8000e76:	210c      	movs	r1, #12
 8000e78:	eef3 0a04 	vmov.f32	s1, #52	@ 0x41a00000  20.0
 8000e7c:	eebb 0a04 	vmov.f32	s0, #180	@ 0xc1a00000 -20.0
 8000e80:	4310      	orrs	r0, r2
 8000e82:	f7ff fee5 	bl	8000c50 <uint_to_float>
 8000e86:	4d5a      	ldr	r5, [pc, #360]	@ (8000ff0 <HAL_FDCAN_RxFifo1Callback+0x29c>)
 8000e88:	ed85 0a00 	vstr	s0, [r5]
				force2[1]  = uint_to_float(fy_int, FT_MIN, FT_MAX, 12);
 8000e8c:	210c      	movs	r1, #12
 8000e8e:	eef3 0a04 	vmov.f32	s1, #52	@ 0x41a00000  20.0
 8000e92:	eebb 0a04 	vmov.f32	s0, #180	@ 0xc1a00000 -20.0
 8000e96:	4620      	mov	r0, r4
 8000e98:	f7ff feda 	bl	8000c50 <uint_to_float>
 8000e9c:	ed85 0a01 	vstr	s0, [r5, #4]
				force2[2]  = uint_to_float(fz_int, FN_MIN, FN_MAX, 12);
 8000ea0:	210c      	movs	r1, #12
 8000ea2:	eef3 0a0e 	vmov.f32	s1, #62	@ 0x41f00000  30.0
 8000ea6:	eebb 0a0e 	vmov.f32	s0, #190	@ 0xc1f00000 -30.0
 8000eaa:	4638      	mov	r0, r7
 8000eac:	f7ff fed0 	bl	8000c50 <uint_to_float>
 8000eb0:	ed85 0a02 	vstr	s0, [r5, #8]
				force2[3]  = uint_to_float(theta_int, ANG_MIN, ANG_MAX, 12);
 8000eb4:	eddf 8a4c 	vldr	s17, [pc, #304]	@ 8000fe8 <HAL_FDCAN_RxFifo1Callback+0x294>
 8000eb8:	ed9f 8a4c 	vldr	s16, [pc, #304]	@ 8000fec <HAL_FDCAN_RxFifo1Callback+0x298>
 8000ebc:	210c      	movs	r1, #12
 8000ebe:	eef0 0a68 	vmov.f32	s1, s17
 8000ec2:	eeb0 0a48 	vmov.f32	s0, s16
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	f7ff fec2 	bl	8000c50 <uint_to_float>
 8000ecc:	ed85 0a03 	vstr	s0, [r5, #12]
				force2[4]  = uint_to_float(phi_int, ANG_MIN, ANG_MAX, 12);
 8000ed0:	210c      	movs	r1, #12
 8000ed2:	eef0 0a68 	vmov.f32	s1, s17
 8000ed6:	eeb0 0a48 	vmov.f32	s0, s16
 8000eda:	4640      	mov	r0, r8
 8000edc:	f7ff feb8 	bl	8000c50 <uint_to_float>
 8000ee0:	ed85 0a04 	vstr	s0, [r5, #16]
 8000ee4:	e7a7      	b.n	8000e36 <HAL_FDCAN_RxFifo1Callback+0xe2>
 8000ee6:	4b43      	ldr	r3, [pc, #268]	@ (8000ff4 <HAL_FDCAN_RxFifo1Callback+0x2a0>)
 8000ee8:	4a43      	ldr	r2, [pc, #268]	@ (8000ff8 <HAL_FDCAN_RxFifo1Callback+0x2a4>)
 8000eea:	f103 0008 	add.w	r0, r3, #8
					tof1[i] = sense_rx_buf[i];
 8000eee:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8000ef2:	f802 1f01 	strb.w	r1, [r2, #1]!
				for(int i = 0;i<8;i++){
 8000ef6:	4283      	cmp	r3, r0
 8000ef8:	d1f9      	bne.n	8000eee <HAL_FDCAN_RxFifo1Callback+0x19a>
 8000efa:	e79c      	b.n	8000e36 <HAL_FDCAN_RxFifo1Callback+0xe2>
 8000efc:	4b3d      	ldr	r3, [pc, #244]	@ (8000ff4 <HAL_FDCAN_RxFifo1Callback+0x2a0>)
 8000efe:	4a3f      	ldr	r2, [pc, #252]	@ (8000ffc <HAL_FDCAN_RxFifo1Callback+0x2a8>)
 8000f00:	f103 0008 	add.w	r0, r3, #8
					tof2[i] = sense_rx_buf[i];
 8000f04:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8000f08:	f802 1f01 	strb.w	r1, [r2, #1]!
				for(int i = 0;i<8;i++){
 8000f0c:	4283      	cmp	r3, r0
 8000f0e:	d1f9      	bne.n	8000f04 <HAL_FDCAN_RxFifo1Callback+0x1b0>
 8000f10:	e791      	b.n	8000e36 <HAL_FDCAN_RxFifo1Callback+0xe2>
				uint32_t p_raw_2 = (sense_rx_buf[4] << 24) | (sense_rx_buf[5] << 16) | (sense_rx_buf[6] << 8) | sense_rx_buf[7];
 8000f12:	4933      	ldr	r1, [pc, #204]	@ (8000fe0 <HAL_FDCAN_RxFifo1Callback+0x28c>)
 8000f14:	790a      	ldrb	r2, [r1, #4]
 8000f16:	794b      	ldrb	r3, [r1, #5]
 8000f18:	041b      	lsls	r3, r3, #16
 8000f1a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000f1e:	79ca      	ldrb	r2, [r1, #7]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	798a      	ldrb	r2, [r1, #6]
 8000f24:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				pressure_raw2[0] = p_raw_1;
 8000f28:	4835      	ldr	r0, [pc, #212]	@ (8001000 <HAL_FDCAN_RxFifo1Callback+0x2ac>)
				uint32_t p_raw_1 = (sense_rx_buf[0] << 24) | (sense_rx_buf[1] << 16) | (sense_rx_buf[2] << 8) | sense_rx_buf[3];
 8000f2a:	780c      	ldrb	r4, [r1, #0]
 8000f2c:	784a      	ldrb	r2, [r1, #1]
 8000f2e:	0412      	lsls	r2, r2, #16
 8000f30:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 8000f34:	78cc      	ldrb	r4, [r1, #3]
 8000f36:	4322      	orrs	r2, r4
 8000f38:	7889      	ldrb	r1, [r1, #2]
 8000f3a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				pressure_raw2[0] = p_raw_1;
 8000f3e:	6002      	str	r2, [r0, #0]
				pressure_raw2[1]  = p_raw_2;
 8000f40:	6043      	str	r3, [r0, #4]
 8000f42:	e778      	b.n	8000e36 <HAL_FDCAN_RxFifo1Callback+0xe2>
				uint32_t p_raw_2 = (sense_rx_buf[4] << 24) | (sense_rx_buf[5] << 16) | (sense_rx_buf[6] << 8) | sense_rx_buf[7];
 8000f44:	4926      	ldr	r1, [pc, #152]	@ (8000fe0 <HAL_FDCAN_RxFifo1Callback+0x28c>)
 8000f46:	790a      	ldrb	r2, [r1, #4]
 8000f48:	794b      	ldrb	r3, [r1, #5]
 8000f4a:	041b      	lsls	r3, r3, #16
 8000f4c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000f50:	79ca      	ldrb	r2, [r1, #7]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	798a      	ldrb	r2, [r1, #6]
 8000f56:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				pressure_raw2[2] = p_raw_1;
 8000f5a:	4829      	ldr	r0, [pc, #164]	@ (8001000 <HAL_FDCAN_RxFifo1Callback+0x2ac>)
				uint32_t p_raw_1 = (sense_rx_buf[0] << 24) | (sense_rx_buf[1] << 16) | (sense_rx_buf[2] << 8) | sense_rx_buf[3];
 8000f5c:	780c      	ldrb	r4, [r1, #0]
 8000f5e:	784a      	ldrb	r2, [r1, #1]
 8000f60:	0412      	lsls	r2, r2, #16
 8000f62:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 8000f66:	78cc      	ldrb	r4, [r1, #3]
 8000f68:	4322      	orrs	r2, r4
 8000f6a:	7889      	ldrb	r1, [r1, #2]
 8000f6c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				pressure_raw2[2] = p_raw_1;
 8000f70:	6082      	str	r2, [r0, #8]
				pressure_raw2[3]  = p_raw_2;
 8000f72:	60c3      	str	r3, [r0, #12]
 8000f74:	e75f      	b.n	8000e36 <HAL_FDCAN_RxFifo1Callback+0xe2>
				uint32_t p_raw_2 = (sense_rx_buf[4] << 24) | (sense_rx_buf[5] << 16) | (sense_rx_buf[6] << 8) | sense_rx_buf[7];
 8000f76:	491a      	ldr	r1, [pc, #104]	@ (8000fe0 <HAL_FDCAN_RxFifo1Callback+0x28c>)
 8000f78:	790a      	ldrb	r2, [r1, #4]
 8000f7a:	794b      	ldrb	r3, [r1, #5]
 8000f7c:	041b      	lsls	r3, r3, #16
 8000f7e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000f82:	79ca      	ldrb	r2, [r1, #7]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	798a      	ldrb	r2, [r1, #6]
 8000f88:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				pressure_raw2[4] = p_raw_1;
 8000f8c:	481c      	ldr	r0, [pc, #112]	@ (8001000 <HAL_FDCAN_RxFifo1Callback+0x2ac>)
				uint32_t p_raw_1 = (sense_rx_buf[0] << 24) | (sense_rx_buf[1] << 16) | (sense_rx_buf[2] << 8) | sense_rx_buf[3];
 8000f8e:	780c      	ldrb	r4, [r1, #0]
 8000f90:	784a      	ldrb	r2, [r1, #1]
 8000f92:	0412      	lsls	r2, r2, #16
 8000f94:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 8000f98:	78cc      	ldrb	r4, [r1, #3]
 8000f9a:	4322      	orrs	r2, r4
 8000f9c:	7889      	ldrb	r1, [r1, #2]
 8000f9e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				pressure_raw2[4] = p_raw_1;
 8000fa2:	6102      	str	r2, [r0, #16]
				pressure_raw2[5]  = p_raw_2;
 8000fa4:	6143      	str	r3, [r0, #20]
 8000fa6:	e746      	b.n	8000e36 <HAL_FDCAN_RxFifo1Callback+0xe2>
				uint32_t p_raw_2 = (sense_rx_buf[4] << 24) | (sense_rx_buf[5] << 16) | (sense_rx_buf[6] << 8) | sense_rx_buf[7];
 8000fa8:	490d      	ldr	r1, [pc, #52]	@ (8000fe0 <HAL_FDCAN_RxFifo1Callback+0x28c>)
 8000faa:	790a      	ldrb	r2, [r1, #4]
 8000fac:	794b      	ldrb	r3, [r1, #5]
 8000fae:	041b      	lsls	r3, r3, #16
 8000fb0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000fb4:	79ca      	ldrb	r2, [r1, #7]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	798a      	ldrb	r2, [r1, #6]
 8000fba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				pressure_raw2[6] = p_raw_1;
 8000fbe:	4810      	ldr	r0, [pc, #64]	@ (8001000 <HAL_FDCAN_RxFifo1Callback+0x2ac>)
				uint32_t p_raw_1 = (sense_rx_buf[0] << 24) | (sense_rx_buf[1] << 16) | (sense_rx_buf[2] << 8) | sense_rx_buf[3];
 8000fc0:	780c      	ldrb	r4, [r1, #0]
 8000fc2:	784a      	ldrb	r2, [r1, #1]
 8000fc4:	0412      	lsls	r2, r2, #16
 8000fc6:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 8000fca:	78cc      	ldrb	r4, [r1, #3]
 8000fcc:	4322      	orrs	r2, r4
 8000fce:	7889      	ldrb	r1, [r1, #2]
 8000fd0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				pressure_raw2[6] = p_raw_1;
 8000fd4:	6182      	str	r2, [r0, #24]
				pressure_raw2[7]  = p_raw_2;
 8000fd6:	61c3      	str	r3, [r0, #28]
}
 8000fd8:	e72d      	b.n	8000e36 <HAL_FDCAN_RxFifo1Callback+0xe2>
 8000fda:	bf00      	nop
 8000fdc:	240001e8 	.word	0x240001e8
 8000fe0:	240001b8 	.word	0x240001b8
 8000fe4:	24000174 	.word	0x24000174
 8000fe8:	42340000 	.word	0x42340000
 8000fec:	c3070000 	.word	0xc3070000
 8000ff0:	24000160 	.word	0x24000160
 8000ff4:	240001b7 	.word	0x240001b7
 8000ff8:	2400018f 	.word	0x2400018f
 8000ffc:	24000187 	.word	0x24000187
 8001000:	24000198 	.word	0x24000198

08001004 <HAL_MspInit>:

/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
 8001004:	b500      	push	{lr}
 8001006:	b083      	sub	sp, #12
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

 8001008:	4b09      	ldr	r3, [pc, #36]	@ (8001030 <HAL_MspInit+0x2c>)
 800100a:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 800100e:	f042 0202 	orr.w	r2, r2, #2
 8001012:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 8001016:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800101a:	f003 0302 	and.w	r3, r3, #2
 800101e:	9301      	str	r3, [sp, #4]
 8001020:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();

 8001022:	2004      	movs	r0, #4
 8001024:	f000 fec4 	bl	8001db0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
 8001028:	b003      	add	sp, #12
 800102a:	f85d fb04 	ldr.w	pc, [sp], #4
 800102e:	bf00      	nop
 8001030:	58024400 	.word	0x58024400

08001034 <NMI_Handler>:
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
  {
  }
  /* USER CODE END NonMaskableInt_IRQn 1 */
 8001034:	e7fe      	b.n	8001034 <NMI_Handler>

08001036 <HardFault_Handler>:

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    /* USER CODE END W1_HardFault_IRQn 0 */
 8001036:	e7fe      	b.n	8001036 <HardFault_Handler>

08001038 <MemManage_Handler>:

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
    /* USER CODE END W1_MemoryManagement_IRQn 0 */
 8001038:	e7fe      	b.n	8001038 <MemManage_Handler>

0800103a <BusFault_Handler>:

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
    /* USER CODE END W1_BusFault_IRQn 0 */
 800103a:	e7fe      	b.n	800103a <BusFault_Handler>

0800103c <UsageFault_Handler>:

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
    /* USER CODE END W1_UsageFault_IRQn 0 */
 800103c:	e7fe      	b.n	800103c <UsageFault_Handler>

0800103e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 1 */
}

/**
  * @brief This function handles Debug monitor.
 800103e:	4770      	bx	lr

08001040 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 1 */
}

/**
  * @brief This function handles Pendable request for system service.
 8001040:	4770      	bx	lr

08001042 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 1 */
}

/**
  * @brief This function handles System tick timer.
 8001042:	4770      	bx	lr

08001044 <SysTick_Handler>:
  */
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
 8001044:	b508      	push	{r3, lr}
  HAL_IncTick();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
 8001046:	f000 fe87 	bl	8001d58 <HAL_IncTick>
}

/******************************************************************************/
/* STM32H7xx Peripheral Interrupt Handlers                                    */
 800104a:	bd08      	pop	{r3, pc}

0800104c <DMA1_Stream0_IRQHandler>:
  */
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
 800104c:	b508      	push	{r3, lr}
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
 800104e:	4802      	ldr	r0, [pc, #8]	@ (8001058 <DMA1_Stream0_IRQHandler+0xc>)
 8001050:	f001 fe46 	bl	8002ce0 <HAL_DMA_IRQHandler>
}

/**
  * @brief This function handles DMA1 stream1 global interrupt.
 8001054:	bd08      	pop	{r3, pc}
 8001056:	bf00      	nop
 8001058:	240004ac 	.word	0x240004ac

0800105c <DMA1_Stream1_IRQHandler>:
  */
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
 800105c:	b508      	push	{r3, lr}
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
 800105e:	4802      	ldr	r0, [pc, #8]	@ (8001068 <DMA1_Stream1_IRQHandler+0xc>)
 8001060:	f001 fe3e 	bl	8002ce0 <HAL_DMA_IRQHandler>
}

/**
  * @brief This function handles DMA1 stream2 global interrupt.
 8001064:	bd08      	pop	{r3, pc}
 8001066:	bf00      	nop
 8001068:	24000434 	.word	0x24000434

0800106c <DMA1_Stream2_IRQHandler>:
  */
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
 800106c:	b508      	push	{r3, lr}
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
 800106e:	4802      	ldr	r0, [pc, #8]	@ (8001078 <DMA1_Stream2_IRQHandler+0xc>)
 8001070:	f001 fe36 	bl	8002ce0 <HAL_DMA_IRQHandler>
}

/**
  * @brief This function handles DMA1 stream3 global interrupt.
 8001074:	bd08      	pop	{r3, pc}
 8001076:	bf00      	nop
 8001078:	240003bc 	.word	0x240003bc

0800107c <DMA1_Stream3_IRQHandler>:
  */
void DMA1_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
 800107c:	b508      	push	{r3, lr}
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
 800107e:	4802      	ldr	r0, [pc, #8]	@ (8001088 <DMA1_Stream3_IRQHandler+0xc>)
 8001080:	f001 fe2e 	bl	8002ce0 <HAL_DMA_IRQHandler>
}

/**
  * @brief This function handles DMA1 stream4 global interrupt.
 8001084:	bd08      	pop	{r3, pc}
 8001086:	bf00      	nop
 8001088:	24000344 	.word	0x24000344

0800108c <DMA1_Stream4_IRQHandler>:
  */
void DMA1_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
 800108c:	b508      	push	{r3, lr}
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
 800108e:	4802      	ldr	r0, [pc, #8]	@ (8001098 <DMA1_Stream4_IRQHandler+0xc>)
 8001090:	f001 fe26 	bl	8002ce0 <HAL_DMA_IRQHandler>
}

/**
  * @brief This function handles DMA1 stream5 global interrupt.
 8001094:	bd08      	pop	{r3, pc}
 8001096:	bf00      	nop
 8001098:	2400059c 	.word	0x2400059c

0800109c <DMA1_Stream5_IRQHandler>:
  */
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
 800109c:	b508      	push	{r3, lr}
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
 800109e:	4802      	ldr	r0, [pc, #8]	@ (80010a8 <DMA1_Stream5_IRQHandler+0xc>)
 80010a0:	f001 fe1e 	bl	8002ce0 <HAL_DMA_IRQHandler>
}

/**
  * @brief This function handles FDCAN1 interrupt 0.
 80010a4:	bd08      	pop	{r3, pc}
 80010a6:	bf00      	nop
 80010a8:	24000524 	.word	0x24000524

080010ac <DMA1_Stream6_IRQHandler>:
  */
void FDCAN1_IT0_IRQHandler(void)
{
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
 80010ac:	b508      	push	{r3, lr}
  HAL_FDCAN_IRQHandler(&hfdcan1);
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
 80010ae:	4802      	ldr	r0, [pc, #8]	@ (80010b8 <DMA1_Stream6_IRQHandler+0xc>)
 80010b0:	f001 fe16 	bl	8002ce0 <HAL_DMA_IRQHandler>
}

/**
  * @brief This function handles FDCAN2 interrupt 0.
 80010b4:	bd08      	pop	{r3, pc}
 80010b6:	bf00      	nop
 80010b8:	2400068c 	.word	0x2400068c

080010bc <FDCAN1_IT0_IRQHandler>:
  */
void FDCAN2_IT0_IRQHandler(void)
{
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
 80010bc:	b508      	push	{r3, lr}
  HAL_FDCAN_IRQHandler(&hfdcan2);
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
 80010be:	4802      	ldr	r0, [pc, #8]	@ (80010c8 <FDCAN1_IT0_IRQHandler+0xc>)
 80010c0:	f002 fe84 	bl	8003dcc <HAL_FDCAN_IRQHandler>
}

/**
  * @brief This function handles TIM2 global interrupt.
 80010c4:	bd08      	pop	{r3, pc}
 80010c6:	bf00      	nop
 80010c8:	240000c0 	.word	0x240000c0

080010cc <FDCAN2_IT0_IRQHandler>:
  */
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
 80010cc:	b508      	push	{r3, lr}
  HAL_TIM_IRQHandler(&htim2);
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
 80010ce:	4802      	ldr	r0, [pc, #8]	@ (80010d8 <FDCAN2_IT0_IRQHandler+0xc>)
 80010d0:	f002 fe7c 	bl	8003dcc <HAL_FDCAN_IRQHandler>
}

/**
  * @brief This function handles TIM3 global interrupt.
 80010d4:	bd08      	pop	{r3, pc}
 80010d6:	bf00      	nop
 80010d8:	24000020 	.word	0x24000020

080010dc <TIM2_IRQHandler>:
  */
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
 80010dc:	b508      	push	{r3, lr}
  HAL_TIM_IRQHandler(&htim3);
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
 80010de:	4802      	ldr	r0, [pc, #8]	@ (80010e8 <TIM2_IRQHandler+0xc>)
 80010e0:	f004 ff91 	bl	8006006 <HAL_TIM_IRQHandler>
}

/**
  * @brief This function handles USART1 global interrupt.
 80010e4:	bd08      	pop	{r3, pc}
 80010e6:	bf00      	nop
 80010e8:	240002ac 	.word	0x240002ac

080010ec <TIM3_IRQHandler>:
  */
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
 80010ec:	b508      	push	{r3, lr}
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
 80010ee:	4802      	ldr	r0, [pc, #8]	@ (80010f8 <TIM3_IRQHandler+0xc>)
 80010f0:	f004 ff89 	bl	8006006 <HAL_TIM_IRQHandler>
}

/**
  * @brief This function handles USART2 global interrupt.
 80010f4:	bd08      	pop	{r3, pc}
 80010f6:	bf00      	nop
 80010f8:	24000260 	.word	0x24000260

080010fc <USART1_IRQHandler>:
  */
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
 80010fc:	b508      	push	{r3, lr}
  HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
 80010fe:	4802      	ldr	r0, [pc, #8]	@ (8001108 <USART1_IRQHandler+0xc>)
 8001100:	f005 fa6e 	bl	80065e0 <HAL_UART_IRQHandler>
}

/**
  * @brief This function handles UART7 global interrupt.
 8001104:	bd08      	pop	{r3, pc}
 8001106:	bf00      	nop
 8001108:	2400082c 	.word	0x2400082c

0800110c <USART2_IRQHandler>:
  */
void UART7_IRQHandler(void)
{
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
 800110c:	b508      	push	{r3, lr}
  HAL_UART_IRQHandler(&huart7);
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
 800110e:	4802      	ldr	r0, [pc, #8]	@ (8001118 <USART2_IRQHandler+0xc>)
 8001110:	f005 fa66 	bl	80065e0 <HAL_UART_IRQHandler>
}

/* USER CODE BEGIN 1 */

 8001114:	bd08      	pop	{r3, pc}
 8001116:	bf00      	nop
 8001118:	24000798 	.word	0x24000798

0800111c <DMA1_Stream7_IRQHandler>:
/* USER CODE END 1 */
 800111c:	b508      	push	{r3, lr}
 800111e:	4802      	ldr	r0, [pc, #8]	@ (8001128 <DMA1_Stream7_IRQHandler+0xc>)
 8001120:	f001 fdde 	bl	8002ce0 <HAL_DMA_IRQHandler>
 8001124:	bd08      	pop	{r3, pc}
 8001126:	bf00      	nop
 8001128:	24000614 	.word	0x24000614

0800112c <UART5_IRQHandler>:
 800112c:	b508      	push	{r3, lr}
 800112e:	4802      	ldr	r0, [pc, #8]	@ (8001138 <UART5_IRQHandler+0xc>)
 8001130:	f005 fa56 	bl	80065e0 <HAL_UART_IRQHandler>
 8001134:	bd08      	pop	{r3, pc}
 8001136:	bf00      	nop
 8001138:	24000954 	.word	0x24000954

0800113c <UART7_IRQHandler>:
 800113c:	b508      	push	{r3, lr}
 800113e:	4802      	ldr	r0, [pc, #8]	@ (8001148 <UART7_IRQHandler+0xc>)
 8001140:	f005 fa4e 	bl	80065e0 <HAL_UART_IRQHandler>
 8001144:	bd08      	pop	{r3, pc}
 8001146:	bf00      	nop
 8001148:	240008c0 	.word	0x240008c0

0800114c <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 800114c:	2001      	movs	r0, #1
 800114e:	4770      	bx	lr

08001150 <_kill>:

int _kill(int pid, int sig)
{
 8001150:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001152:	f007 f819 	bl	8008188 <__errno>
 8001156:	2316      	movs	r3, #22
 8001158:	6003      	str	r3, [r0, #0]
  return -1;
}
 800115a:	f04f 30ff 	mov.w	r0, #4294967295
 800115e:	bd08      	pop	{r3, pc}

08001160 <_exit>:

void _exit (int status)
{
 8001160:	b508      	push	{r3, lr}
  errno = EINVAL;
 8001162:	f007 f811 	bl	8008188 <__errno>
 8001166:	2316      	movs	r3, #22
 8001168:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 800116a:	e7fe      	b.n	800116a <_exit+0xa>

0800116c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800116c:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800116e:	1e16      	subs	r6, r2, #0
 8001170:	dd07      	ble.n	8001182 <_read+0x16>
 8001172:	460c      	mov	r4, r1
 8001174:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 8001176:	f3af 8000 	nop.w
 800117a:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800117e:	42a5      	cmp	r5, r4
 8001180:	d1f9      	bne.n	8001176 <_read+0xa>
  }

  return len;
}
 8001182:	4630      	mov	r0, r6
 8001184:	bd70      	pop	{r4, r5, r6, pc}

08001186 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001186:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001188:	1e16      	subs	r6, r2, #0
 800118a:	dd07      	ble.n	800119c <_write+0x16>
 800118c:	460c      	mov	r4, r1
 800118e:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 8001190:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001194:	f7ff fd70 	bl	8000c78 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001198:	42a5      	cmp	r5, r4
 800119a:	d1f9      	bne.n	8001190 <_write+0xa>
  }
  return len;
}
 800119c:	4630      	mov	r0, r6
 800119e:	bd70      	pop	{r4, r5, r6, pc}

080011a0 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80011a0:	f04f 30ff 	mov.w	r0, #4294967295
 80011a4:	4770      	bx	lr

080011a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80011a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011aa:	604b      	str	r3, [r1, #4]
  return 0;
}
 80011ac:	2000      	movs	r0, #0
 80011ae:	4770      	bx	lr

080011b0 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80011b0:	2001      	movs	r0, #1
 80011b2:	4770      	bx	lr

080011b4 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80011b4:	2000      	movs	r0, #0
 80011b6:	4770      	bx	lr

080011b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011b8:	b508      	push	{r3, lr}
 80011ba:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011bc:	4a0c      	ldr	r2, [pc, #48]	@ (80011f0 <_sbrk+0x38>)
 80011be:	6812      	ldr	r2, [r2, #0]
 80011c0:	b152      	cbz	r2, 80011d8 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011c2:	4a0b      	ldr	r2, [pc, #44]	@ (80011f0 <_sbrk+0x38>)
 80011c4:	6810      	ldr	r0, [r2, #0]
 80011c6:	4403      	add	r3, r0
 80011c8:	4a0a      	ldr	r2, [pc, #40]	@ (80011f4 <_sbrk+0x3c>)
 80011ca:	490b      	ldr	r1, [pc, #44]	@ (80011f8 <_sbrk+0x40>)
 80011cc:	1a52      	subs	r2, r2, r1
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d806      	bhi.n	80011e0 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80011d2:	4a07      	ldr	r2, [pc, #28]	@ (80011f0 <_sbrk+0x38>)
 80011d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80011d6:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 80011d8:	4a05      	ldr	r2, [pc, #20]	@ (80011f0 <_sbrk+0x38>)
 80011da:	4908      	ldr	r1, [pc, #32]	@ (80011fc <_sbrk+0x44>)
 80011dc:	6011      	str	r1, [r2, #0]
 80011de:	e7f0      	b.n	80011c2 <_sbrk+0xa>
    errno = ENOMEM;
 80011e0:	f006 ffd2 	bl	8008188 <__errno>
 80011e4:	230c      	movs	r3, #12
 80011e6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80011e8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ec:	e7f3      	b.n	80011d6 <_sbrk+0x1e>
 80011ee:	bf00      	nop
 80011f0:	24000210 	.word	0x24000210
 80011f4:	24080000 	.word	0x24080000
 80011f8:	00000400 	.word	0x00000400
 80011fc:	200001d8 	.word	0x200001d8

08001200 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001200:	4a27      	ldr	r2, [pc, #156]	@ (80012a0 <SystemInit+0xa0>)
 8001202:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8001206:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800120a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800120e:	4b25      	ldr	r3, [pc, #148]	@ (80012a4 <SystemInit+0xa4>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 030f 	and.w	r3, r3, #15
 8001216:	2b06      	cmp	r3, #6
 8001218:	d806      	bhi.n	8001228 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800121a:	4a22      	ldr	r2, [pc, #136]	@ (80012a4 <SystemInit+0xa4>)
 800121c:	6813      	ldr	r3, [r2, #0]
 800121e:	f023 030f 	bic.w	r3, r3, #15
 8001222:	f043 0307 	orr.w	r3, r3, #7
 8001226:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001228:	4b1f      	ldr	r3, [pc, #124]	@ (80012a8 <SystemInit+0xa8>)
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	f042 0201 	orr.w	r2, r2, #1
 8001230:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001232:	2200      	movs	r2, #0
 8001234:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001236:	6819      	ldr	r1, [r3, #0]
 8001238:	4a1c      	ldr	r2, [pc, #112]	@ (80012ac <SystemInit+0xac>)
 800123a:	400a      	ands	r2, r1
 800123c:	601a      	str	r2, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800123e:	4b19      	ldr	r3, [pc, #100]	@ (80012a4 <SystemInit+0xa4>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f013 0f08 	tst.w	r3, #8
 8001246:	d006      	beq.n	8001256 <SystemInit+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001248:	4a16      	ldr	r2, [pc, #88]	@ (80012a4 <SystemInit+0xa4>)
 800124a:	6813      	ldr	r3, [r2, #0]
 800124c:	f023 030f 	bic.w	r3, r3, #15
 8001250:	f043 0307 	orr.w	r3, r3, #7
 8001254:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001256:	4b14      	ldr	r3, [pc, #80]	@ (80012a8 <SystemInit+0xa8>)
 8001258:	2200      	movs	r2, #0
 800125a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800125c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800125e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001260:	4913      	ldr	r1, [pc, #76]	@ (80012b0 <SystemInit+0xb0>)
 8001262:	6299      	str	r1, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001264:	4913      	ldr	r1, [pc, #76]	@ (80012b4 <SystemInit+0xb4>)
 8001266:	62d9      	str	r1, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001268:	4913      	ldr	r1, [pc, #76]	@ (80012b8 <SystemInit+0xb8>)
 800126a:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800126c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800126e:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001270:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001272:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001274:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001276:	6819      	ldr	r1, [r3, #0]
 8001278:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 800127c:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800127e:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001280:	4b0e      	ldr	r3, [pc, #56]	@ (80012bc <SystemInit+0xbc>)
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	4b0e      	ldr	r3, [pc, #56]	@ (80012c0 <SystemInit+0xc0>)
 8001286:	4013      	ands	r3, r2
 8001288:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800128c:	d203      	bcs.n	8001296 <SystemInit+0x96>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800128e:	4b0d      	ldr	r3, [pc, #52]	@ (80012c4 <SystemInit+0xc4>)
 8001290:	2201      	movs	r2, #1
 8001292:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001296:	4b0c      	ldr	r3, [pc, #48]	@ (80012c8 <SystemInit+0xc8>)
 8001298:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800129c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800129e:	4770      	bx	lr
 80012a0:	e000ed00 	.word	0xe000ed00
 80012a4:	52002000 	.word	0x52002000
 80012a8:	58024400 	.word	0x58024400
 80012ac:	eaf6ed7f 	.word	0xeaf6ed7f
 80012b0:	02020200 	.word	0x02020200
 80012b4:	01ff0000 	.word	0x01ff0000
 80012b8:	01010280 	.word	0x01010280
 80012bc:	5c001000 	.word	0x5c001000
 80012c0:	ffff0000 	.word	0xffff0000
 80012c4:	51008000 	.word	0x51008000
 80012c8:	52004000 	.word	0x52004000

080012cc <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80012cc:	b500      	push	{lr}
 80012ce:	b089      	sub	sp, #36	@ 0x24

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012d0:	2300      	movs	r3, #0
 80012d2:	9304      	str	r3, [sp, #16]
 80012d4:	9305      	str	r3, [sp, #20]
 80012d6:	9306      	str	r3, [sp, #24]
 80012d8:	9307      	str	r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012da:	9301      	str	r3, [sp, #4]
 80012dc:	9302      	str	r3, [sp, #8]
 80012de:	9303      	str	r3, [sp, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012e0:	4815      	ldr	r0, [pc, #84]	@ (8001338 <MX_TIM1_Init+0x6c>)
 80012e2:	4a16      	ldr	r2, [pc, #88]	@ (800133c <MX_TIM1_Init+0x70>)
 80012e4:	6002      	str	r2, [r0, #0]
  htim1.Init.Prescaler = 240;
 80012e6:	22f0      	movs	r2, #240	@ 0xf0
 80012e8:	6042      	str	r2, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ea:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 65535;
 80012ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012f0:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f2:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 80012f4:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012f6:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012f8:	f004 ffc4 	bl	8006284 <HAL_TIM_Base_Init>
 80012fc:	b998      	cbnz	r0, 8001326 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001302:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001304:	a904      	add	r1, sp, #16
 8001306:	480c      	ldr	r0, [pc, #48]	@ (8001338 <MX_TIM1_Init+0x6c>)
 8001308:	f004 fffa 	bl	8006300 <HAL_TIM_ConfigClockSource>
 800130c:	b970      	cbnz	r0, 800132c <MX_TIM1_Init+0x60>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800130e:	2300      	movs	r3, #0
 8001310:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001312:	9302      	str	r3, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001314:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001316:	a901      	add	r1, sp, #4
 8001318:	4807      	ldr	r0, [pc, #28]	@ (8001338 <MX_TIM1_Init+0x6c>)
 800131a:	f005 f8c3 	bl	80064a4 <HAL_TIMEx_MasterConfigSynchronization>
 800131e:	b940      	cbnz	r0, 8001332 <MX_TIM1_Init+0x66>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001320:	b009      	add	sp, #36	@ 0x24
 8001322:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001326:	f7ff fc91 	bl	8000c4c <Error_Handler>
 800132a:	e7e8      	b.n	80012fe <MX_TIM1_Init+0x32>
    Error_Handler();
 800132c:	f7ff fc8e 	bl	8000c4c <Error_Handler>
 8001330:	e7ed      	b.n	800130e <MX_TIM1_Init+0x42>
    Error_Handler();
 8001332:	f7ff fc8b 	bl	8000c4c <Error_Handler>
}
 8001336:	e7f3      	b.n	8001320 <MX_TIM1_Init+0x54>
 8001338:	240002f8 	.word	0x240002f8
 800133c:	40010000 	.word	0x40010000

08001340 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001340:	b500      	push	{lr}
 8001342:	b089      	sub	sp, #36	@ 0x24

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001344:	2300      	movs	r3, #0
 8001346:	9304      	str	r3, [sp, #16]
 8001348:	9305      	str	r3, [sp, #20]
 800134a:	9306      	str	r3, [sp, #24]
 800134c:	9307      	str	r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800134e:	9301      	str	r3, [sp, #4]
 8001350:	9302      	str	r3, [sp, #8]
 8001352:	9303      	str	r3, [sp, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001354:	4815      	ldr	r0, [pc, #84]	@ (80013ac <MX_TIM2_Init+0x6c>)
 8001356:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800135a:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 240;
 800135c:	22f0      	movs	r2, #240	@ 0xf0
 800135e:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001360:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 1000;
 8001362:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001366:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001368:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800136a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800136c:	f004 ff8a 	bl	8006284 <HAL_TIM_Base_Init>
 8001370:	b990      	cbnz	r0, 8001398 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001372:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001376:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001378:	a904      	add	r1, sp, #16
 800137a:	480c      	ldr	r0, [pc, #48]	@ (80013ac <MX_TIM2_Init+0x6c>)
 800137c:	f004 ffc0 	bl	8006300 <HAL_TIM_ConfigClockSource>
 8001380:	b968      	cbnz	r0, 800139e <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001382:	2300      	movs	r3, #0
 8001384:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001386:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001388:	a901      	add	r1, sp, #4
 800138a:	4808      	ldr	r0, [pc, #32]	@ (80013ac <MX_TIM2_Init+0x6c>)
 800138c:	f005 f88a 	bl	80064a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001390:	b940      	cbnz	r0, 80013a4 <MX_TIM2_Init+0x64>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001392:	b009      	add	sp, #36	@ 0x24
 8001394:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001398:	f7ff fc58 	bl	8000c4c <Error_Handler>
 800139c:	e7e9      	b.n	8001372 <MX_TIM2_Init+0x32>
    Error_Handler();
 800139e:	f7ff fc55 	bl	8000c4c <Error_Handler>
 80013a2:	e7ee      	b.n	8001382 <MX_TIM2_Init+0x42>
    Error_Handler();
 80013a4:	f7ff fc52 	bl	8000c4c <Error_Handler>
}
 80013a8:	e7f3      	b.n	8001392 <MX_TIM2_Init+0x52>
 80013aa:	bf00      	nop
 80013ac:	240002ac 	.word	0x240002ac

080013b0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80013b0:	b500      	push	{lr}
 80013b2:	b089      	sub	sp, #36	@ 0x24

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013b4:	2300      	movs	r3, #0
 80013b6:	9304      	str	r3, [sp, #16]
 80013b8:	9305      	str	r3, [sp, #20]
 80013ba:	9306      	str	r3, [sp, #24]
 80013bc:	9307      	str	r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013be:	9301      	str	r3, [sp, #4]
 80013c0:	9302      	str	r3, [sp, #8]
 80013c2:	9303      	str	r3, [sp, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013c4:	4814      	ldr	r0, [pc, #80]	@ (8001418 <MX_TIM3_Init+0x68>)
 80013c6:	4a15      	ldr	r2, [pc, #84]	@ (800141c <MX_TIM3_Init+0x6c>)
 80013c8:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 240;
 80013ca:	22f0      	movs	r2, #240	@ 0xf0
 80013cc:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ce:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 5000;
 80013d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013d4:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013d6:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d8:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013da:	f004 ff53 	bl	8006284 <HAL_TIM_Base_Init>
 80013de:	b990      	cbnz	r0, 8001406 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013e4:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013e6:	a904      	add	r1, sp, #16
 80013e8:	480b      	ldr	r0, [pc, #44]	@ (8001418 <MX_TIM3_Init+0x68>)
 80013ea:	f004 ff89 	bl	8006300 <HAL_TIM_ConfigClockSource>
 80013ee:	b968      	cbnz	r0, 800140c <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f0:	2300      	movs	r3, #0
 80013f2:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013f4:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013f6:	a901      	add	r1, sp, #4
 80013f8:	4807      	ldr	r0, [pc, #28]	@ (8001418 <MX_TIM3_Init+0x68>)
 80013fa:	f005 f853 	bl	80064a4 <HAL_TIMEx_MasterConfigSynchronization>
 80013fe:	b940      	cbnz	r0, 8001412 <MX_TIM3_Init+0x62>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001400:	b009      	add	sp, #36	@ 0x24
 8001402:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001406:	f7ff fc21 	bl	8000c4c <Error_Handler>
 800140a:	e7e9      	b.n	80013e0 <MX_TIM3_Init+0x30>
    Error_Handler();
 800140c:	f7ff fc1e 	bl	8000c4c <Error_Handler>
 8001410:	e7ee      	b.n	80013f0 <MX_TIM3_Init+0x40>
    Error_Handler();
 8001412:	f7ff fc1b 	bl	8000c4c <Error_Handler>
}
 8001416:	e7f3      	b.n	8001400 <MX_TIM3_Init+0x50>
 8001418:	24000260 	.word	0x24000260
 800141c:	40000400 	.word	0x40000400

08001420 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001420:	b500      	push	{lr}
 8001422:	b089      	sub	sp, #36	@ 0x24

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001424:	2300      	movs	r3, #0
 8001426:	9304      	str	r3, [sp, #16]
 8001428:	9305      	str	r3, [sp, #20]
 800142a:	9306      	str	r3, [sp, #24]
 800142c:	9307      	str	r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800142e:	9301      	str	r3, [sp, #4]
 8001430:	9302      	str	r3, [sp, #8]
 8001432:	9303      	str	r3, [sp, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001434:	4814      	ldr	r0, [pc, #80]	@ (8001488 <MX_TIM5_Init+0x68>)
 8001436:	4a15      	ldr	r2, [pc, #84]	@ (800148c <MX_TIM5_Init+0x6c>)
 8001438:	6002      	str	r2, [r0, #0]
  htim5.Init.Prescaler = 240;
 800143a:	22f0      	movs	r2, #240	@ 0xf0
 800143c:	6042      	str	r2, [r0, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800143e:	6083      	str	r3, [r0, #8]
  htim5.Init.Period = 4294967295;
 8001440:	f04f 32ff 	mov.w	r2, #4294967295
 8001444:	60c2      	str	r2, [r0, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001446:	6103      	str	r3, [r0, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001448:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800144a:	f004 ff1b 	bl	8006284 <HAL_TIM_Base_Init>
 800144e:	b990      	cbnz	r0, 8001476 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001450:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001454:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001456:	a904      	add	r1, sp, #16
 8001458:	480b      	ldr	r0, [pc, #44]	@ (8001488 <MX_TIM5_Init+0x68>)
 800145a:	f004 ff51 	bl	8006300 <HAL_TIM_ConfigClockSource>
 800145e:	b968      	cbnz	r0, 800147c <MX_TIM5_Init+0x5c>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001460:	2300      	movs	r3, #0
 8001462:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001464:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001466:	a901      	add	r1, sp, #4
 8001468:	4807      	ldr	r0, [pc, #28]	@ (8001488 <MX_TIM5_Init+0x68>)
 800146a:	f005 f81b 	bl	80064a4 <HAL_TIMEx_MasterConfigSynchronization>
 800146e:	b940      	cbnz	r0, 8001482 <MX_TIM5_Init+0x62>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001470:	b009      	add	sp, #36	@ 0x24
 8001472:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001476:	f7ff fbe9 	bl	8000c4c <Error_Handler>
 800147a:	e7e9      	b.n	8001450 <MX_TIM5_Init+0x30>
    Error_Handler();
 800147c:	f7ff fbe6 	bl	8000c4c <Error_Handler>
 8001480:	e7ee      	b.n	8001460 <MX_TIM5_Init+0x40>
    Error_Handler();
 8001482:	f7ff fbe3 	bl	8000c4c <Error_Handler>
}
 8001486:	e7f3      	b.n	8001470 <MX_TIM5_Init+0x50>
 8001488:	24000214 	.word	0x24000214
 800148c:	40000c00 	.word	0x40000c00

08001490 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001490:	b500      	push	{lr}
 8001492:	b085      	sub	sp, #20

  if(tim_baseHandle->Instance==TIM1)
 8001494:	6803      	ldr	r3, [r0, #0]
 8001496:	4a2b      	ldr	r2, [pc, #172]	@ (8001544 <HAL_TIM_Base_MspInit+0xb4>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d00b      	beq.n	80014b4 <HAL_TIM_Base_MspInit+0x24>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM2)
 800149c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014a0:	d016      	beq.n	80014d0 <HAL_TIM_Base_MspInit+0x40>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM3)
 80014a2:	4a29      	ldr	r2, [pc, #164]	@ (8001548 <HAL_TIM_Base_MspInit+0xb8>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d029      	beq.n	80014fc <HAL_TIM_Base_MspInit+0x6c>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM5)
 80014a8:	4a28      	ldr	r2, [pc, #160]	@ (800154c <HAL_TIM_Base_MspInit+0xbc>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d03c      	beq.n	8001528 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80014ae:	b005      	add	sp, #20
 80014b0:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014b4:	4b26      	ldr	r3, [pc, #152]	@ (8001550 <HAL_TIM_Base_MspInit+0xc0>)
 80014b6:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80014ba:	f042 0201 	orr.w	r2, r2, #1
 80014be:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 80014c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	9b00      	ldr	r3, [sp, #0]
 80014ce:	e7ee      	b.n	80014ae <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001550 <HAL_TIM_Base_MspInit+0xc0>)
 80014d2:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80014d6:	f042 0201 	orr.w	r2, r2, #1
 80014da:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 80014de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	9301      	str	r3, [sp, #4]
 80014e8:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 80014ea:	2200      	movs	r2, #0
 80014ec:	2102      	movs	r1, #2
 80014ee:	201c      	movs	r0, #28
 80014f0:	f000 fc70 	bl	8001dd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014f4:	201c      	movs	r0, #28
 80014f6:	f000 fca1 	bl	8001e3c <HAL_NVIC_EnableIRQ>
 80014fa:	e7d8      	b.n	80014ae <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014fc:	4b14      	ldr	r3, [pc, #80]	@ (8001550 <HAL_TIM_Base_MspInit+0xc0>)
 80014fe:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8001502:	f042 0202 	orr.w	r2, r2, #2
 8001506:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 800150a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	9302      	str	r3, [sp, #8]
 8001514:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 1);
 8001516:	2201      	movs	r2, #1
 8001518:	2102      	movs	r1, #2
 800151a:	201d      	movs	r0, #29
 800151c:	f000 fc5a 	bl	8001dd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001520:	201d      	movs	r0, #29
 8001522:	f000 fc8b 	bl	8001e3c <HAL_NVIC_EnableIRQ>
 8001526:	e7c2      	b.n	80014ae <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001528:	4b09      	ldr	r3, [pc, #36]	@ (8001550 <HAL_TIM_Base_MspInit+0xc0>)
 800152a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 800152e:	f042 0208 	orr.w	r2, r2, #8
 8001532:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8001536:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800153a:	f003 0308 	and.w	r3, r3, #8
 800153e:	9303      	str	r3, [sp, #12]
 8001540:	9b03      	ldr	r3, [sp, #12]
}
 8001542:	e7b4      	b.n	80014ae <HAL_TIM_Base_MspInit+0x1e>
 8001544:	40010000 	.word	0x40010000
 8001548:	40000400 	.word	0x40000400
 800154c:	40000c00 	.word	0x40000c00
 8001550:	58024400 	.word	0x58024400

08001554 <MX_UART5_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{

  /* USER CODE BEGIN UART7_Init 0 */

 8001554:	b508      	push	{r3, lr}

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
  huart7.Init.BaudRate = 4000000;
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001556:	4817      	ldr	r0, [pc, #92]	@ (80015b4 <MX_UART5_Init+0x60>)
 8001558:	4b17      	ldr	r3, [pc, #92]	@ (80015b8 <MX_UART5_Init+0x64>)
 800155a:	6003      	str	r3, [r0, #0]
  huart7.Init.Parity = UART_PARITY_NONE;
 800155c:	4b17      	ldr	r3, [pc, #92]	@ (80015bc <MX_UART5_Init+0x68>)
 800155e:	6043      	str	r3, [r0, #4]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001560:	2300      	movs	r3, #0
 8001562:	6083      	str	r3, [r0, #8]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001564:	60c3      	str	r3, [r0, #12]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001566:	6103      	str	r3, [r0, #16]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001568:	220c      	movs	r2, #12
 800156a:	6142      	str	r2, [r0, #20]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800156c:	6183      	str	r3, [r0, #24]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800156e:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001570:	6203      	str	r3, [r0, #32]
  {
 8001572:	6243      	str	r3, [r0, #36]	@ 0x24
    Error_Handler();
 8001574:	6283      	str	r3, [r0, #40]	@ 0x28
  }
 8001576:	f005 fead 	bl	80072d4 <HAL_UART_Init>
 800157a:	b970      	cbnz	r0, 800159a <MX_UART5_Init+0x46>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
  {
    Error_Handler();
  }
 800157c:	2100      	movs	r1, #0
 800157e:	480d      	ldr	r0, [pc, #52]	@ (80015b4 <MX_UART5_Init+0x60>)
 8001580:	f005 ff24 	bl	80073cc <HAL_UARTEx_SetTxFifoThreshold>
 8001584:	b960      	cbnz	r0, 80015a0 <MX_UART5_Init+0x4c>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
  {
    Error_Handler();
  }
 8001586:	2100      	movs	r1, #0
 8001588:	480a      	ldr	r0, [pc, #40]	@ (80015b4 <MX_UART5_Init+0x60>)
 800158a:	f005 ff44 	bl	8007416 <HAL_UARTEx_SetRxFifoThreshold>
 800158e:	b950      	cbnz	r0, 80015a6 <MX_UART5_Init+0x52>
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
  {
    Error_Handler();
  }
 8001590:	4808      	ldr	r0, [pc, #32]	@ (80015b4 <MX_UART5_Init+0x60>)
 8001592:	f005 fefc 	bl	800738e <HAL_UARTEx_DisableFifoMode>
 8001596:	b948      	cbnz	r0, 80015ac <MX_UART5_Init+0x58>
  /* USER CODE END UART7_Init 2 */

}
/* USART1 init function */

void MX_USART1_UART_Init(void)
 8001598:	bd08      	pop	{r3, pc}
  {
 800159a:	f7ff fb57 	bl	8000c4c <Error_Handler>
 800159e:	e7ed      	b.n	800157c <MX_UART5_Init+0x28>
  {
 80015a0:	f7ff fb54 	bl	8000c4c <Error_Handler>
 80015a4:	e7ef      	b.n	8001586 <MX_UART5_Init+0x32>
  {
 80015a6:	f7ff fb51 	bl	8000c4c <Error_Handler>
 80015aa:	e7f1      	b.n	8001590 <MX_UART5_Init+0x3c>

 80015ac:	f7ff fb4e 	bl	8000c4c <Error_Handler>
void MX_USART1_UART_Init(void)
 80015b0:	e7f2      	b.n	8001598 <MX_UART5_Init+0x44>
 80015b2:	bf00      	nop
 80015b4:	24000954 	.word	0x24000954
 80015b8:	40005000 	.word	0x40005000
 80015bc:	003d0900 	.word	0x003d0900

080015c0 <MX_UART7_Init>:
{

  /* USER CODE BEGIN USART1_Init 0 */
 80015c0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 4000000;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015c2:	4817      	ldr	r0, [pc, #92]	@ (8001620 <MX_UART7_Init+0x60>)
 80015c4:	4b17      	ldr	r3, [pc, #92]	@ (8001624 <MX_UART7_Init+0x64>)
 80015c6:	6003      	str	r3, [r0, #0]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015c8:	4b17      	ldr	r3, [pc, #92]	@ (8001628 <MX_UART7_Init+0x68>)
 80015ca:	6043      	str	r3, [r0, #4]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015cc:	2300      	movs	r3, #0
 80015ce:	6083      	str	r3, [r0, #8]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015d0:	60c3      	str	r3, [r0, #12]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015d2:	6103      	str	r3, [r0, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015d4:	220c      	movs	r2, #12
 80015d6:	6142      	str	r2, [r0, #20]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015d8:	6183      	str	r3, [r0, #24]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015da:	61c3      	str	r3, [r0, #28]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015dc:	6203      	str	r3, [r0, #32]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015de:	6243      	str	r3, [r0, #36]	@ 0x24
  {
 80015e0:	6283      	str	r3, [r0, #40]	@ 0x28
    Error_Handler();
 80015e2:	f005 fe77 	bl	80072d4 <HAL_UART_Init>
 80015e6:	b970      	cbnz	r0, 8001606 <MX_UART7_Init+0x46>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
  {
    Error_Handler();
 80015e8:	2100      	movs	r1, #0
 80015ea:	480d      	ldr	r0, [pc, #52]	@ (8001620 <MX_UART7_Init+0x60>)
 80015ec:	f005 feee 	bl	80073cc <HAL_UARTEx_SetTxFifoThreshold>
 80015f0:	b960      	cbnz	r0, 800160c <MX_UART7_Init+0x4c>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
  {
    Error_Handler();
 80015f2:	2100      	movs	r1, #0
 80015f4:	480a      	ldr	r0, [pc, #40]	@ (8001620 <MX_UART7_Init+0x60>)
 80015f6:	f005 ff0e 	bl	8007416 <HAL_UARTEx_SetRxFifoThreshold>
 80015fa:	b950      	cbnz	r0, 8001612 <MX_UART7_Init+0x52>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
  {
    Error_Handler();
 80015fc:	4808      	ldr	r0, [pc, #32]	@ (8001620 <MX_UART7_Init+0x60>)
 80015fe:	f005 fec6 	bl	800738e <HAL_UARTEx_DisableFifoMode>
 8001602:	b948      	cbnz	r0, 8001618 <MX_UART7_Init+0x58>

  /* USER CODE END USART1_Init 2 */

}
/* USART2 init function */

 8001604:	bd08      	pop	{r3, pc}
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001606:	f7ff fb21 	bl	8000c4c <Error_Handler>
 800160a:	e7ed      	b.n	80015e8 <MX_UART7_Init+0x28>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800160c:	f7ff fb1e 	bl	8000c4c <Error_Handler>
 8001610:	e7ef      	b.n	80015f2 <MX_UART7_Init+0x32>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001612:	f7ff fb1b 	bl	8000c4c <Error_Handler>
 8001616:	e7f1      	b.n	80015fc <MX_UART7_Init+0x3c>
  /* USER CODE BEGIN USART1_Init 2 */
 8001618:	f7ff fb18 	bl	8000c4c <Error_Handler>

 800161c:	e7f2      	b.n	8001604 <MX_UART7_Init+0x44>
 800161e:	bf00      	nop
 8001620:	240008c0 	.word	0x240008c0
 8001624:	40007800 	.word	0x40007800
 8001628:	003d0900 	.word	0x003d0900

0800162c <MX_USART1_UART_Init>:
void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */
 800162c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 4000000;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800162e:	4817      	ldr	r0, [pc, #92]	@ (800168c <MX_USART1_UART_Init+0x60>)
 8001630:	4b17      	ldr	r3, [pc, #92]	@ (8001690 <MX_USART1_UART_Init+0x64>)
 8001632:	6003      	str	r3, [r0, #0]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001634:	4b17      	ldr	r3, [pc, #92]	@ (8001694 <MX_USART1_UART_Init+0x68>)
 8001636:	6043      	str	r3, [r0, #4]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001638:	2300      	movs	r3, #0
 800163a:	6083      	str	r3, [r0, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800163c:	60c3      	str	r3, [r0, #12]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800163e:	6103      	str	r3, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001640:	220c      	movs	r2, #12
 8001642:	6142      	str	r2, [r0, #20]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001644:	6183      	str	r3, [r0, #24]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001646:	61c3      	str	r3, [r0, #28]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001648:	6203      	str	r3, [r0, #32]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800164a:	6243      	str	r3, [r0, #36]	@ 0x24
  {
 800164c:	6283      	str	r3, [r0, #40]	@ 0x28
    Error_Handler();
 800164e:	f005 fe41 	bl	80072d4 <HAL_UART_Init>
 8001652:	b970      	cbnz	r0, 8001672 <MX_USART1_UART_Init+0x46>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
  {
    Error_Handler();
 8001654:	2100      	movs	r1, #0
 8001656:	480d      	ldr	r0, [pc, #52]	@ (800168c <MX_USART1_UART_Init+0x60>)
 8001658:	f005 feb8 	bl	80073cc <HAL_UARTEx_SetTxFifoThreshold>
 800165c:	b960      	cbnz	r0, 8001678 <MX_USART1_UART_Init+0x4c>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
  {
    Error_Handler();
 800165e:	2100      	movs	r1, #0
 8001660:	480a      	ldr	r0, [pc, #40]	@ (800168c <MX_USART1_UART_Init+0x60>)
 8001662:	f005 fed8 	bl	8007416 <HAL_UARTEx_SetRxFifoThreshold>
 8001666:	b950      	cbnz	r0, 800167e <MX_USART1_UART_Init+0x52>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
  {
    Error_Handler();
 8001668:	4808      	ldr	r0, [pc, #32]	@ (800168c <MX_USART1_UART_Init+0x60>)
 800166a:	f005 fe90 	bl	800738e <HAL_UARTEx_DisableFifoMode>
 800166e:	b948      	cbnz	r0, 8001684 <MX_USART1_UART_Init+0x58>

  /* USER CODE END USART2_Init 2 */

}
/* USART6 init function */

 8001670:	bd08      	pop	{r3, pc}
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001672:	f7ff faeb 	bl	8000c4c <Error_Handler>
 8001676:	e7ed      	b.n	8001654 <MX_USART1_UART_Init+0x28>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001678:	f7ff fae8 	bl	8000c4c <Error_Handler>
 800167c:	e7ef      	b.n	800165e <MX_USART1_UART_Init+0x32>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800167e:	f7ff fae5 	bl	8000c4c <Error_Handler>
 8001682:	e7f1      	b.n	8001668 <MX_USART1_UART_Init+0x3c>
  /* USER CODE BEGIN USART2_Init 2 */
 8001684:	f7ff fae2 	bl	8000c4c <Error_Handler>

 8001688:	e7f2      	b.n	8001670 <MX_USART1_UART_Init+0x44>
 800168a:	bf00      	nop
 800168c:	2400082c 	.word	0x2400082c
 8001690:	40011000 	.word	0x40011000
 8001694:	003d0900 	.word	0x003d0900

08001698 <MX_USART2_UART_Init>:
void MX_USART6_UART_Init(void)
{

  /* USER CODE BEGIN USART6_Init 0 */
 8001698:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
  huart6.Init.BaudRate = 921600;
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800169a:	4817      	ldr	r0, [pc, #92]	@ (80016f8 <MX_USART2_UART_Init+0x60>)
 800169c:	4b17      	ldr	r3, [pc, #92]	@ (80016fc <MX_USART2_UART_Init+0x64>)
 800169e:	6003      	str	r3, [r0, #0]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80016a0:	4b17      	ldr	r3, [pc, #92]	@ (8001700 <MX_USART2_UART_Init+0x68>)
 80016a2:	6043      	str	r3, [r0, #4]
  huart6.Init.Parity = UART_PARITY_NONE;
 80016a4:	2300      	movs	r3, #0
 80016a6:	6083      	str	r3, [r0, #8]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80016a8:	60c3      	str	r3, [r0, #12]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016aa:	6103      	str	r3, [r0, #16]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80016ac:	220c      	movs	r2, #12
 80016ae:	6142      	str	r2, [r0, #20]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016b0:	6183      	str	r3, [r0, #24]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016b2:	61c3      	str	r3, [r0, #28]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016b4:	6203      	str	r3, [r0, #32]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80016b6:	6243      	str	r3, [r0, #36]	@ 0x24
  {
 80016b8:	6283      	str	r3, [r0, #40]	@ 0x28
    Error_Handler();
 80016ba:	f005 fe0b 	bl	80072d4 <HAL_UART_Init>
 80016be:	b970      	cbnz	r0, 80016de <MX_USART2_UART_Init+0x46>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
  {
    Error_Handler();
 80016c0:	2100      	movs	r1, #0
 80016c2:	480d      	ldr	r0, [pc, #52]	@ (80016f8 <MX_USART2_UART_Init+0x60>)
 80016c4:	f005 fe82 	bl	80073cc <HAL_UARTEx_SetTxFifoThreshold>
 80016c8:	b960      	cbnz	r0, 80016e4 <MX_USART2_UART_Init+0x4c>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
  {
    Error_Handler();
 80016ca:	2100      	movs	r1, #0
 80016cc:	480a      	ldr	r0, [pc, #40]	@ (80016f8 <MX_USART2_UART_Init+0x60>)
 80016ce:	f005 fea2 	bl	8007416 <HAL_UARTEx_SetRxFifoThreshold>
 80016d2:	b950      	cbnz	r0, 80016ea <MX_USART2_UART_Init+0x52>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
  {
    Error_Handler();
 80016d4:	4808      	ldr	r0, [pc, #32]	@ (80016f8 <MX_USART2_UART_Init+0x60>)
 80016d6:	f005 fe5a 	bl	800738e <HAL_UARTEx_DisableFifoMode>
 80016da:	b948      	cbnz	r0, 80016f0 <MX_USART2_UART_Init+0x58>

  /* USER CODE END USART6_Init 2 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
 80016dc:	bd08      	pop	{r3, pc}
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016de:	f7ff fab5 	bl	8000c4c <Error_Handler>
 80016e2:	e7ed      	b.n	80016c0 <MX_USART2_UART_Init+0x28>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016e4:	f7ff fab2 	bl	8000c4c <Error_Handler>
 80016e8:	e7ef      	b.n	80016ca <MX_USART2_UART_Init+0x32>
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 80016ea:	f7ff faaf 	bl	8000c4c <Error_Handler>
 80016ee:	e7f1      	b.n	80016d4 <MX_USART2_UART_Init+0x3c>
  /* USER CODE BEGIN USART6_Init 2 */
 80016f0:	f7ff faac 	bl	8000c4c <Error_Handler>
void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
 80016f4:	e7f2      	b.n	80016dc <MX_USART2_UART_Init+0x44>
 80016f6:	bf00      	nop
 80016f8:	24000798 	.word	0x24000798
 80016fc:	40004400 	.word	0x40004400
 8001700:	003d0900 	.word	0x003d0900

08001704 <MX_USART6_UART_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001704:	b508      	push	{r3, lr}

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8001706:	4817      	ldr	r0, [pc, #92]	@ (8001764 <MX_USART6_UART_Init+0x60>)
 8001708:	4b17      	ldr	r3, [pc, #92]	@ (8001768 <MX_USART6_UART_Init+0x64>)
 800170a:	6003      	str	r3, [r0, #0]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800170c:	f44f 2361 	mov.w	r3, #921600	@ 0xe1000
 8001710:	6043      	str	r3, [r0, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001712:	2300      	movs	r3, #0
 8001714:	6083      	str	r3, [r0, #8]
    {
 8001716:	60c3      	str	r3, [r0, #12]
      Error_Handler();
 8001718:	6103      	str	r3, [r0, #16]
    }
 800171a:	220c      	movs	r2, #12
 800171c:	6142      	str	r2, [r0, #20]

 800171e:	6183      	str	r3, [r0, #24]
    /* UART7 clock enable */
 8001720:	61c3      	str	r3, [r0, #28]
    __HAL_RCC_UART7_CLK_ENABLE();
 8001722:	6203      	str	r3, [r0, #32]

 8001724:	6243      	str	r3, [r0, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001726:	6283      	str	r3, [r0, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001728:	f005 fdd4 	bl	80072d4 <HAL_UART_Init>
 800172c:	b970      	cbnz	r0, 800174c <MX_USART6_UART_Init+0x48>
    /**UART7 GPIO Configuration
    PA15 (JTDI)     ------> UART7_TX
    PB3 (JTDO/TRACESWO)     ------> UART7_RX
    */
 800172e:	2100      	movs	r1, #0
 8001730:	480c      	ldr	r0, [pc, #48]	@ (8001764 <MX_USART6_UART_Init+0x60>)
 8001732:	f005 fe4b 	bl	80073cc <HAL_UARTEx_SetTxFifoThreshold>
 8001736:	b960      	cbnz	r0, 8001752 <MX_USART6_UART_Init+0x4e>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001738:	2100      	movs	r1, #0
 800173a:	480a      	ldr	r0, [pc, #40]	@ (8001764 <MX_USART6_UART_Init+0x60>)
 800173c:	f005 fe6b 	bl	8007416 <HAL_UARTEx_SetRxFifoThreshold>
 8001740:	b950      	cbnz	r0, 8001758 <MX_USART6_UART_Init+0x54>
    GPIO_InitStruct.Alternate = GPIO_AF11_UART7;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001742:	4808      	ldr	r0, [pc, #32]	@ (8001764 <MX_USART6_UART_Init+0x60>)
 8001744:	f005 fe23 	bl	800738e <HAL_UARTEx_DisableFifoMode>
 8001748:	b948      	cbnz	r0, 800175e <MX_USART6_UART_Init+0x5a>
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_UART7;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    /* UART7 DMA Init */
    /* UART7_RX Init */
 800174a:	bd08      	pop	{r3, pc}
    PA15 (JTDI)     ------> UART7_TX
 800174c:	f7ff fa7e 	bl	8000c4c <Error_Handler>
 8001750:	e7ed      	b.n	800172e <MX_USART6_UART_Init+0x2a>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001752:	f7ff fa7b 	bl	8000c4c <Error_Handler>
 8001756:	e7ef      	b.n	8001738 <MX_USART6_UART_Init+0x34>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001758:	f7ff fa78 	bl	8000c4c <Error_Handler>
 800175c:	e7f1      	b.n	8001742 <MX_USART6_UART_Init+0x3e>
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175e:	f7ff fa75 	bl	8000c4c <Error_Handler>
    /* UART7_RX Init */
 8001762:	e7f2      	b.n	800174a <MX_USART6_UART_Init+0x46>
 8001764:	24000704 	.word	0x24000704
 8001768:	40011400 	.word	0x40011400

0800176c <HAL_UART_MspInit>:
    hdma_uart7_rx.Instance = DMA1_Stream4;
    hdma_uart7_rx.Init.Request = DMA_REQUEST_UART7_RX;
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800176c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800176e:	b0c3      	sub	sp, #268	@ 0x10c
 8001770:	4604      	mov	r4, r0
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001772:	2100      	movs	r1, #0
 8001774:	913d      	str	r1, [sp, #244]	@ 0xf4
 8001776:	913e      	str	r1, [sp, #248]	@ 0xf8
 8001778:	913f      	str	r1, [sp, #252]	@ 0xfc
 800177a:	9140      	str	r1, [sp, #256]	@ 0x100
 800177c:	9141      	str	r1, [sp, #260]	@ 0x104
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800177e:	22c0      	movs	r2, #192	@ 0xc0
 8001780:	a80c      	add	r0, sp, #48	@ 0x30
 8001782:	f006 fcaf 	bl	80080e4 <memset>
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001786:	6823      	ldr	r3, [r4, #0]
 8001788:	4a8f      	ldr	r2, [pc, #572]	@ (80019c8 <HAL_UART_MspInit+0x25c>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d011      	beq.n	80017b2 <HAL_UART_MspInit+0x46>
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
    {
      Error_Handler();
    }

 800178e:	4a8f      	ldr	r2, [pc, #572]	@ (80019cc <HAL_UART_MspInit+0x260>)
 8001790:	4293      	cmp	r3, r2
 8001792:	f000 8093 	beq.w	80018bc <HAL_UART_MspInit+0x150>
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream3;
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001796:	4a8e      	ldr	r2, [pc, #568]	@ (80019d0 <HAL_UART_MspInit+0x264>)
 8001798:	4293      	cmp	r3, r2
 800179a:	f000 8139 	beq.w	8001a10 <HAL_UART_MspInit+0x2a4>
    PB3 (JTDO/TRACESWO)     ------> UART7_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_15);

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3);

 800179e:	4a8d      	ldr	r2, [pc, #564]	@ (80019d4 <HAL_UART_MspInit+0x268>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	f000 81a4 	beq.w	8001aee <HAL_UART_MspInit+0x382>
    PC7     ------> USART6_RX
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_6|GPIO_PIN_7);

  /* USER CODE BEGIN USART6_MspDeInit 1 */

 80017a6:	4a8c      	ldr	r2, [pc, #560]	@ (80019d8 <HAL_UART_MspInit+0x26c>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	f000 820e 	beq.w	8001bca <HAL_UART_MspInit+0x45e>
 80017ae:	b043      	add	sp, #268	@ 0x10c
 80017b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

 80017b2:	2202      	movs	r2, #2
 80017b4:	2300      	movs	r3, #0
 80017b6:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30

 80017ba:	a80c      	add	r0, sp, #48	@ 0x30
 80017bc:	f003 fcc2 	bl	8005144 <HAL_RCCEx_PeriphCLKConfig>
 80017c0:	2800      	cmp	r0, #0
 80017c2:	d172      	bne.n	80018aa <HAL_UART_MspInit+0x13e>
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017c4:	4b85      	ldr	r3, [pc, #532]	@ (80019dc <HAL_UART_MspInit+0x270>)
 80017c6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80017ca:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80017ce:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 80017d2:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80017d6:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80017da:	9200      	str	r2, [sp, #0]
 80017dc:	9a00      	ldr	r2, [sp, #0]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017de:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80017e2:	f042 0204 	orr.w	r2, r2, #4
 80017e6:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80017ea:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80017ee:	f002 0204 	and.w	r2, r2, #4
 80017f2:	9201      	str	r2, [sp, #4]
 80017f4:	9a01      	ldr	r2, [sp, #4]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 80017f6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80017fa:	f042 0208 	orr.w	r2, r2, #8
 80017fe:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001802:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001806:	f003 0308 	and.w	r3, r3, #8
 800180a:	9302      	str	r3, [sp, #8]
 800180c:	9b02      	ldr	r3, [sp, #8]
      Error_Handler();
 800180e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001812:	933d      	str	r3, [sp, #244]	@ 0xf4
    }
 8001814:	2702      	movs	r7, #2
 8001816:	973e      	str	r7, [sp, #248]	@ 0xf8

 8001818:	2500      	movs	r5, #0
 800181a:	953f      	str	r5, [sp, #252]	@ 0xfc
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart7_tx);
 800181c:	9540      	str	r5, [sp, #256]	@ 0x100

 800181e:	2608      	movs	r6, #8
 8001820:	9641      	str	r6, [sp, #260]	@ 0x104
    /* UART7 interrupt Init */
 8001822:	a93d      	add	r1, sp, #244	@ 0xf4
 8001824:	486e      	ldr	r0, [pc, #440]	@ (80019e0 <HAL_UART_MspInit+0x274>)
 8001826:	f002 fc5d 	bl	80040e4 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 800182a:	2304      	movs	r3, #4
 800182c:	933d      	str	r3, [sp, #244]	@ 0xf4
  /* USER CODE BEGIN UART7_MspInit 1 */
 800182e:	973e      	str	r7, [sp, #248]	@ 0xf8

 8001830:	953f      	str	r5, [sp, #252]	@ 0xfc
  /* USER CODE END UART7_MspInit 1 */
 8001832:	9540      	str	r5, [sp, #256]	@ 0x100
  }
 8001834:	9641      	str	r6, [sp, #260]	@ 0x104
  else if(uartHandle->Instance==USART1)
 8001836:	a93d      	add	r1, sp, #244	@ 0xf4
 8001838:	486a      	ldr	r0, [pc, #424]	@ (80019e4 <HAL_UART_MspInit+0x278>)
 800183a:	f002 fc53 	bl	80040e4 <HAL_GPIO_Init>
  /* USER CODE END USART1_MspInit 0 */
 800183e:	486a      	ldr	r0, [pc, #424]	@ (80019e8 <HAL_UART_MspInit+0x27c>)
 8001840:	4b6a      	ldr	r3, [pc, #424]	@ (80019ec <HAL_UART_MspInit+0x280>)
 8001842:	6003      	str	r3, [r0, #0]

 8001844:	2341      	movs	r3, #65	@ 0x41
 8001846:	6043      	str	r3, [r0, #4]
  /** Initializes the peripherals clock
 8001848:	6085      	str	r5, [r0, #8]
  */
 800184a:	60c5      	str	r5, [r0, #12]
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800184c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001850:	6103      	str	r3, [r0, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001852:	6145      	str	r5, [r0, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001854:	6185      	str	r5, [r0, #24]
    {
 8001856:	61c5      	str	r5, [r0, #28]
      Error_Handler();
 8001858:	6205      	str	r5, [r0, #32]
    }
 800185a:	6245      	str	r5, [r0, #36]	@ 0x24

 800185c:	f000 fc48 	bl	80020f0 <HAL_DMA_Init>
 8001860:	bb30      	cbnz	r0, 80018b0 <HAL_UART_MspInit+0x144>
    /**USART1 GPIO Configuration
 8001862:	4b61      	ldr	r3, [pc, #388]	@ (80019e8 <HAL_UART_MspInit+0x27c>)
 8001864:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
 8001868:	639c      	str	r4, [r3, #56]	@ 0x38
    */
 800186a:	4861      	ldr	r0, [pc, #388]	@ (80019f0 <HAL_UART_MspInit+0x284>)
 800186c:	4b61      	ldr	r3, [pc, #388]	@ (80019f4 <HAL_UART_MspInit+0x288>)
 800186e:	6003      	str	r3, [r0, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001870:	2342      	movs	r3, #66	@ 0x42
 8001872:	6043      	str	r3, [r0, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001874:	2340      	movs	r3, #64	@ 0x40
 8001876:	6083      	str	r3, [r0, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	60c3      	str	r3, [r0, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001880:	6102      	str	r2, [r0, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001882:	6143      	str	r3, [r0, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001884:	6183      	str	r3, [r0, #24]

 8001886:	61c3      	str	r3, [r0, #28]
    /* USART1 DMA Init */
 8001888:	6203      	str	r3, [r0, #32]
    /* USART1_RX Init */
 800188a:	6243      	str	r3, [r0, #36]	@ 0x24
    hdma_usart1_rx.Instance = DMA1_Stream0;
 800188c:	f000 fc30 	bl	80020f0 <HAL_DMA_Init>
 8001890:	b988      	cbnz	r0, 80018b6 <HAL_UART_MspInit+0x14a>
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001892:	4b57      	ldr	r3, [pc, #348]	@ (80019f0 <HAL_UART_MspInit+0x284>)
 8001894:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8001896:	639c      	str	r4, [r3, #56]	@ 0x38
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001898:	2200      	movs	r2, #0
 800189a:	2101      	movs	r1, #1
 800189c:	2035      	movs	r0, #53	@ 0x35
 800189e:	f000 fa99 	bl	8001dd4 <HAL_NVIC_SetPriority>
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018a2:	2035      	movs	r0, #53	@ 0x35
 80018a4:	f000 faca 	bl	8001e3c <HAL_NVIC_EnableIRQ>
 80018a8:	e781      	b.n	80017ae <HAL_UART_MspInit+0x42>
    hdma_uart7_tx.Instance = DMA1_Stream5;
 80018aa:	f7ff f9cf 	bl	8000c4c <Error_Handler>
 80018ae:	e789      	b.n	80017c4 <HAL_UART_MspInit+0x58>
    __HAL_RCC_USART1_CLK_ENABLE();
 80018b0:	f7ff f9cc 	bl	8000c4c <Error_Handler>
 80018b4:	e7d5      	b.n	8001862 <HAL_UART_MspInit+0xf6>
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018b6:	f7ff f9c9 	bl	8000c4c <Error_Handler>
 80018ba:	e7ea      	b.n	8001892 <HAL_UART_MspInit+0x126>
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018bc:	2202      	movs	r2, #2
 80018be:	2300      	movs	r3, #0
 80018c0:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018c4:	a80c      	add	r0, sp, #48	@ 0x30
 80018c6:	f003 fc3d 	bl	8005144 <HAL_RCCEx_PeriphCLKConfig>
 80018ca:	2800      	cmp	r0, #0
 80018cc:	d172      	bne.n	80019b4 <HAL_UART_MspInit+0x248>
      Error_Handler();
 80018ce:	4b43      	ldr	r3, [pc, #268]	@ (80019dc <HAL_UART_MspInit+0x270>)
 80018d0:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80018d4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80018d8:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 80018dc:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80018e0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80018e4:	9203      	str	r2, [sp, #12]
 80018e6:	9a03      	ldr	r2, [sp, #12]

 80018e8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80018ec:	f042 0201 	orr.w	r2, r2, #1
 80018f0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80018f4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80018f8:	f002 0201 	and.w	r2, r2, #1
 80018fc:	9204      	str	r2, [sp, #16]
 80018fe:	9a04      	ldr	r2, [sp, #16]
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001900:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001904:	f042 0202 	orr.w	r2, r2, #2
 8001908:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800190c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001910:	f003 0302 	and.w	r3, r3, #2
 8001914:	9305      	str	r3, [sp, #20]
 8001916:	9b05      	ldr	r3, [sp, #20]
  /* USER CODE BEGIN USART1_MspInit 1 */
 8001918:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800191c:	933d      	str	r3, [sp, #244]	@ 0xf4

 800191e:	2702      	movs	r7, #2
 8001920:	973e      	str	r7, [sp, #248]	@ 0xf8
  /* USER CODE END USART1_MspInit 1 */
 8001922:	2500      	movs	r5, #0
 8001924:	953f      	str	r5, [sp, #252]	@ 0xfc
  }
 8001926:	9540      	str	r5, [sp, #256]	@ 0x100
  else if(uartHandle->Instance==USART2)
 8001928:	260b      	movs	r6, #11
 800192a:	9641      	str	r6, [sp, #260]	@ 0x104
  {
 800192c:	a93d      	add	r1, sp, #244	@ 0xf4
 800192e:	4832      	ldr	r0, [pc, #200]	@ (80019f8 <HAL_UART_MspInit+0x28c>)
 8001930:	f002 fbd8 	bl	80040e4 <HAL_GPIO_Init>

 8001934:	2308      	movs	r3, #8
 8001936:	933d      	str	r3, [sp, #244]	@ 0xf4
  /* USER CODE END USART2_MspInit 0 */
 8001938:	973e      	str	r7, [sp, #248]	@ 0xf8

 800193a:	953f      	str	r5, [sp, #252]	@ 0xfc
  /** Initializes the peripherals clock
 800193c:	9540      	str	r5, [sp, #256]	@ 0x100
  */
 800193e:	9641      	str	r6, [sp, #260]	@ 0x104
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001940:	a93d      	add	r1, sp, #244	@ 0xf4
 8001942:	482e      	ldr	r0, [pc, #184]	@ (80019fc <HAL_UART_MspInit+0x290>)
 8001944:	f002 fbce 	bl	80040e4 <HAL_GPIO_Init>
      Error_Handler();
 8001948:	482d      	ldr	r0, [pc, #180]	@ (8001a00 <HAL_UART_MspInit+0x294>)
 800194a:	4b2e      	ldr	r3, [pc, #184]	@ (8001a04 <HAL_UART_MspInit+0x298>)
 800194c:	6003      	str	r3, [r0, #0]
    }
 800194e:	234f      	movs	r3, #79	@ 0x4f
 8001950:	6043      	str	r3, [r0, #4]

 8001952:	6085      	str	r5, [r0, #8]
    /* USART2 clock enable */
 8001954:	60c5      	str	r5, [r0, #12]
    __HAL_RCC_USART2_CLK_ENABLE();
 8001956:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800195a:	6103      	str	r3, [r0, #16]

 800195c:	6145      	str	r5, [r0, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800195e:	6185      	str	r5, [r0, #24]
    /**USART2 GPIO Configuration
 8001960:	61c5      	str	r5, [r0, #28]
    PA2     ------> USART2_TX
 8001962:	6205      	str	r5, [r0, #32]
    PA3     ------> USART2_RX
 8001964:	6245      	str	r5, [r0, #36]	@ 0x24
    */
 8001966:	f000 fbc3 	bl	80020f0 <HAL_DMA_Init>
 800196a:	bb30      	cbnz	r0, 80019ba <HAL_UART_MspInit+0x24e>
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800196c:	4b24      	ldr	r3, [pc, #144]	@ (8001a00 <HAL_UART_MspInit+0x294>)
 800196e:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
 8001972:	639c      	str	r4, [r3, #56]	@ 0x38
    /* USART2 DMA Init */
 8001974:	4824      	ldr	r0, [pc, #144]	@ (8001a08 <HAL_UART_MspInit+0x29c>)
 8001976:	4b25      	ldr	r3, [pc, #148]	@ (8001a0c <HAL_UART_MspInit+0x2a0>)
 8001978:	6003      	str	r3, [r0, #0]
    /* USART2_RX Init */
 800197a:	2350      	movs	r3, #80	@ 0x50
 800197c:	6043      	str	r3, [r0, #4]
    hdma_usart2_rx.Instance = DMA1_Stream2;
 800197e:	2340      	movs	r3, #64	@ 0x40
 8001980:	6083      	str	r3, [r0, #8]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001982:	2300      	movs	r3, #0
 8001984:	60c3      	str	r3, [r0, #12]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001986:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800198a:	6102      	str	r2, [r0, #16]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800198c:	6143      	str	r3, [r0, #20]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800198e:	6183      	str	r3, [r0, #24]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001990:	61c3      	str	r3, [r0, #28]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001992:	6203      	str	r3, [r0, #32]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001994:	6243      	str	r3, [r0, #36]	@ 0x24
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001996:	f000 fbab 	bl	80020f0 <HAL_DMA_Init>
 800199a:	b988      	cbnz	r0, 80019c0 <HAL_UART_MspInit+0x254>
    }
 800199c:	4b1a      	ldr	r3, [pc, #104]	@ (8001a08 <HAL_UART_MspInit+0x29c>)
 800199e:	67e3      	str	r3, [r4, #124]	@ 0x7c
 80019a0:	639c      	str	r4, [r3, #56]	@ 0x38

 80019a2:	2200      	movs	r2, #0
 80019a4:	2101      	movs	r1, #1
 80019a6:	2052      	movs	r0, #82	@ 0x52
 80019a8:	f000 fa14 	bl	8001dd4 <HAL_NVIC_SetPriority>
    /* USART2_TX Init */
 80019ac:	2052      	movs	r0, #82	@ 0x52
 80019ae:	f000 fa45 	bl	8001e3c <HAL_NVIC_EnableIRQ>
 80019b2:	e6fc      	b.n	80017ae <HAL_UART_MspInit+0x42>
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80019b4:	f7ff f94a 	bl	8000c4c <Error_Handler>
 80019b8:	e789      	b.n	80018ce <HAL_UART_MspInit+0x162>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ba:	f7ff f947 	bl	8000c4c <Error_Handler>
 80019be:	e7d5      	b.n	800196c <HAL_UART_MspInit+0x200>
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80019c0:	f7ff f944 	bl	8000c4c <Error_Handler>
 80019c4:	e7ea      	b.n	800199c <HAL_UART_MspInit+0x230>
 80019c6:	bf00      	nop
 80019c8:	40005000 	.word	0x40005000
 80019cc:	40007800 	.word	0x40007800
 80019d0:	40011000 	.word	0x40011000
 80019d4:	40004400 	.word	0x40004400
 80019d8:	40011400 	.word	0x40011400
 80019dc:	58024400 	.word	0x58024400
 80019e0:	58020800 	.word	0x58020800
 80019e4:	58020c00 	.word	0x58020c00
 80019e8:	2400068c 	.word	0x2400068c
 80019ec:	400200a0 	.word	0x400200a0
 80019f0:	24000614 	.word	0x24000614
 80019f4:	400200b8 	.word	0x400200b8
 80019f8:	58020000 	.word	0x58020000
 80019fc:	58020400 	.word	0x58020400
 8001a00:	2400059c 	.word	0x2400059c
 8001a04:	40020070 	.word	0x40020070
 8001a08:	24000524 	.word	0x24000524
 8001a0c:	40020088 	.word	0x40020088
      Error_Handler();
 8001a10:	2201      	movs	r2, #1
 8001a12:	2300      	movs	r3, #0
 8001a14:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30

 8001a18:	a80c      	add	r0, sp, #48	@ 0x30
 8001a1a:	f003 fb93 	bl	8005144 <HAL_RCCEx_PeriphCLKConfig>
 8001a1e:	2800      	cmp	r0, #0
 8001a20:	d15c      	bne.n	8001adc <HAL_UART_MspInit+0x370>
  /* USER CODE BEGIN USART2_MspInit 1 */
 8001a22:	4b83      	ldr	r3, [pc, #524]	@ (8001c30 <HAL_UART_MspInit+0x4c4>)
 8001a24:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8001a28:	f042 0210 	orr.w	r2, r2, #16
 8001a2c:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 8001a30:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8001a34:	f002 0210 	and.w	r2, r2, #16
 8001a38:	9206      	str	r2, [sp, #24]
 8001a3a:	9a06      	ldr	r2, [sp, #24]
  /* USER CODE END USART2_MspInit 1 */
 8001a3c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001a40:	f042 0201 	orr.w	r2, r2, #1
 8001a44:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001a48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a4c:	f003 0301 	and.w	r3, r3, #1
 8001a50:	9307      	str	r3, [sp, #28]
 8001a52:	9b07      	ldr	r3, [sp, #28]

 8001a54:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001a58:	933d      	str	r3, [sp, #244]	@ 0xf4
  /* USER CODE END USART6_MspInit 0 */
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	933e      	str	r3, [sp, #248]	@ 0xf8

 8001a5e:	2500      	movs	r5, #0
 8001a60:	953f      	str	r5, [sp, #252]	@ 0xfc
  /** Initializes the peripherals clock
 8001a62:	9540      	str	r5, [sp, #256]	@ 0x100
  */
 8001a64:	2307      	movs	r3, #7
 8001a66:	9341      	str	r3, [sp, #260]	@ 0x104
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8001a68:	a93d      	add	r1, sp, #244	@ 0xf4
 8001a6a:	4872      	ldr	r0, [pc, #456]	@ (8001c34 <HAL_UART_MspInit+0x4c8>)
 8001a6c:	f002 fb3a 	bl	80040e4 <HAL_GPIO_Init>
      Error_Handler();
 8001a70:	4871      	ldr	r0, [pc, #452]	@ (8001c38 <HAL_UART_MspInit+0x4cc>)
 8001a72:	4b72      	ldr	r3, [pc, #456]	@ (8001c3c <HAL_UART_MspInit+0x4d0>)
 8001a74:	6003      	str	r3, [r0, #0]
    }
 8001a76:	2329      	movs	r3, #41	@ 0x29
 8001a78:	6043      	str	r3, [r0, #4]

 8001a7a:	6085      	str	r5, [r0, #8]
    /* USART6 clock enable */
 8001a7c:	60c5      	str	r5, [r0, #12]
    __HAL_RCC_USART6_CLK_ENABLE();
 8001a7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a82:	6103      	str	r3, [r0, #16]

 8001a84:	6145      	str	r5, [r0, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a86:	6185      	str	r5, [r0, #24]
    /**USART6 GPIO Configuration
 8001a88:	61c5      	str	r5, [r0, #28]
    PC6     ------> USART6_TX
 8001a8a:	6205      	str	r5, [r0, #32]
    PC7     ------> USART6_RX
 8001a8c:	6245      	str	r5, [r0, #36]	@ 0x24
    */
 8001a8e:	f000 fb2f 	bl	80020f0 <HAL_DMA_Init>
 8001a92:	bb30      	cbnz	r0, 8001ae2 <HAL_UART_MspInit+0x376>
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8001a94:	4b68      	ldr	r3, [pc, #416]	@ (8001c38 <HAL_UART_MspInit+0x4cc>)
 8001a96:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
 8001a9a:	639c      	str	r4, [r3, #56]	@ 0x38
  /* USER CODE BEGIN USART6_MspInit 1 */
 8001a9c:	4868      	ldr	r0, [pc, #416]	@ (8001c40 <HAL_UART_MspInit+0x4d4>)
 8001a9e:	4b69      	ldr	r3, [pc, #420]	@ (8001c44 <HAL_UART_MspInit+0x4d8>)
 8001aa0:	6003      	str	r3, [r0, #0]

 8001aa2:	232a      	movs	r3, #42	@ 0x2a
 8001aa4:	6043      	str	r3, [r0, #4]
  /* USER CODE END USART6_MspInit 1 */
 8001aa6:	2340      	movs	r3, #64	@ 0x40
 8001aa8:	6083      	str	r3, [r0, #8]
  }
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60c3      	str	r3, [r0, #12]
}
 8001aae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ab2:	6102      	str	r2, [r0, #16]

 8001ab4:	6143      	str	r3, [r0, #20]
void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
 8001ab6:	6183      	str	r3, [r0, #24]
{
 8001ab8:	61c3      	str	r3, [r0, #28]

 8001aba:	6203      	str	r3, [r0, #32]
  if(uartHandle->Instance==UART7)
 8001abc:	6243      	str	r3, [r0, #36]	@ 0x24
  {
 8001abe:	f000 fb17 	bl	80020f0 <HAL_DMA_Init>
 8001ac2:	b988      	cbnz	r0, 8001ae8 <HAL_UART_MspInit+0x37c>
    __HAL_RCC_UART7_CLK_DISABLE();
 8001ac4:	4b5e      	ldr	r3, [pc, #376]	@ (8001c40 <HAL_UART_MspInit+0x4d4>)
 8001ac6:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8001ac8:	639c      	str	r4, [r3, #56]	@ 0x38
    PA15 (JTDI)     ------> UART7_TX
 8001aca:	2200      	movs	r2, #0
 8001acc:	2101      	movs	r1, #1
 8001ace:	2025      	movs	r0, #37	@ 0x25
 8001ad0:	f000 f980 	bl	8001dd4 <HAL_NVIC_SetPriority>
    PB3 (JTDO/TRACESWO)     ------> UART7_RX
 8001ad4:	2025      	movs	r0, #37	@ 0x25
 8001ad6:	f000 f9b1 	bl	8001e3c <HAL_NVIC_EnableIRQ>
 8001ada:	e668      	b.n	80017ae <HAL_UART_MspInit+0x42>

 8001adc:	f7ff f8b6 	bl	8000c4c <Error_Handler>
 8001ae0:	e79f      	b.n	8001a22 <HAL_UART_MspInit+0x2b6>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae2:	f7ff f8b3 	bl	8000c4c <Error_Handler>
 8001ae6:	e7d5      	b.n	8001a94 <HAL_UART_MspInit+0x328>

 8001ae8:	f7ff f8b0 	bl	8000c4c <Error_Handler>
 8001aec:	e7ea      	b.n	8001ac4 <HAL_UART_MspInit+0x358>

 8001aee:	2202      	movs	r2, #2
 8001af0:	2300      	movs	r3, #0
 8001af2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
  }
 8001af6:	a80c      	add	r0, sp, #48	@ 0x30
 8001af8:	f003 fb24 	bl	8005144 <HAL_RCCEx_PeriphCLKConfig>
 8001afc:	2800      	cmp	r0, #0
 8001afe:	d15b      	bne.n	8001bb8 <HAL_UART_MspInit+0x44c>
    /* Peripheral clock disable */
 8001b00:	4b4b      	ldr	r3, [pc, #300]	@ (8001c30 <HAL_UART_MspInit+0x4c4>)
 8001b02:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8001b06:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8001b0a:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8001b0e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8001b12:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8001b16:	9208      	str	r2, [sp, #32]
 8001b18:	9a08      	ldr	r2, [sp, #32]

 8001b1a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001b1e:	f042 0201 	orr.w	r2, r2, #1
 8001b22:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8001b30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8001b32:	230c      	movs	r3, #12
 8001b34:	933d      	str	r3, [sp, #244]	@ 0xf4

 8001b36:	2302      	movs	r3, #2
 8001b38:	933e      	str	r3, [sp, #248]	@ 0xf8
    /* USART1 DMA DeInit */
 8001b3a:	2500      	movs	r5, #0
 8001b3c:	953f      	str	r5, [sp, #252]	@ 0xfc
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8001b3e:	9540      	str	r5, [sp, #256]	@ 0x100
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8001b40:	2307      	movs	r3, #7
 8001b42:	9341      	str	r3, [sp, #260]	@ 0x104

 8001b44:	a93d      	add	r1, sp, #244	@ 0xf4
 8001b46:	483b      	ldr	r0, [pc, #236]	@ (8001c34 <HAL_UART_MspInit+0x4c8>)
 8001b48:	f002 facc 	bl	80040e4 <HAL_GPIO_Init>

 8001b4c:	483e      	ldr	r0, [pc, #248]	@ (8001c48 <HAL_UART_MspInit+0x4dc>)
 8001b4e:	4b3f      	ldr	r3, [pc, #252]	@ (8001c4c <HAL_UART_MspInit+0x4e0>)
 8001b50:	6003      	str	r3, [r0, #0]
  /* USER CODE END USART1_MspDeInit 1 */
 8001b52:	232b      	movs	r3, #43	@ 0x2b
 8001b54:	6043      	str	r3, [r0, #4]
  }
 8001b56:	6085      	str	r5, [r0, #8]
  else if(uartHandle->Instance==USART2)
 8001b58:	60c5      	str	r5, [r0, #12]
  {
 8001b5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b5e:	6103      	str	r3, [r0, #16]
  /* USER CODE BEGIN USART2_MspDeInit 0 */
 8001b60:	6145      	str	r5, [r0, #20]

 8001b62:	6185      	str	r5, [r0, #24]
  /* USER CODE END USART2_MspDeInit 0 */
 8001b64:	61c5      	str	r5, [r0, #28]
    /* Peripheral clock disable */
 8001b66:	6205      	str	r5, [r0, #32]
    __HAL_RCC_USART2_CLK_DISABLE();
 8001b68:	6245      	str	r5, [r0, #36]	@ 0x24

 8001b6a:	f000 fac1 	bl	80020f0 <HAL_DMA_Init>
 8001b6e:	bb30      	cbnz	r0, 8001bbe <HAL_UART_MspInit+0x452>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8001b70:	4b35      	ldr	r3, [pc, #212]	@ (8001c48 <HAL_UART_MspInit+0x4dc>)
 8001b72:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
 8001b76:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8001b78:	4835      	ldr	r0, [pc, #212]	@ (8001c50 <HAL_UART_MspInit+0x4e4>)
 8001b7a:	4b36      	ldr	r3, [pc, #216]	@ (8001c54 <HAL_UART_MspInit+0x4e8>)
 8001b7c:	6003      	str	r3, [r0, #0]
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8001b7e:	232c      	movs	r3, #44	@ 0x2c
 8001b80:	6043      	str	r3, [r0, #4]

 8001b82:	2340      	movs	r3, #64	@ 0x40
 8001b84:	6083      	str	r3, [r0, #8]
    /* USART2 interrupt Deinit */
 8001b86:	2300      	movs	r3, #0
 8001b88:	60c3      	str	r3, [r0, #12]
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8001b8a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b8e:	6102      	str	r2, [r0, #16]
  /* USER CODE BEGIN USART2_MspDeInit 1 */
 8001b90:	6143      	str	r3, [r0, #20]

 8001b92:	6183      	str	r3, [r0, #24]
  /* USER CODE END USART2_MspDeInit 1 */
 8001b94:	61c3      	str	r3, [r0, #28]
  }
 8001b96:	6203      	str	r3, [r0, #32]
  else if(uartHandle->Instance==USART6)
 8001b98:	6243      	str	r3, [r0, #36]	@ 0x24
  {
 8001b9a:	f000 faa9 	bl	80020f0 <HAL_DMA_Init>
 8001b9e:	b988      	cbnz	r0, 8001bc4 <HAL_UART_MspInit+0x458>
    __HAL_RCC_USART6_CLK_DISABLE();
 8001ba0:	4b2b      	ldr	r3, [pc, #172]	@ (8001c50 <HAL_UART_MspInit+0x4e4>)
 8001ba2:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8001ba4:	639c      	str	r4, [r3, #56]	@ 0x38
    PC6     ------> USART6_TX
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	2101      	movs	r1, #1
 8001baa:	2026      	movs	r0, #38	@ 0x26
 8001bac:	f000 f912 	bl	8001dd4 <HAL_NVIC_SetPriority>
    PC7     ------> USART6_RX
 8001bb0:	2026      	movs	r0, #38	@ 0x26
 8001bb2:	f000 f943 	bl	8001e3c <HAL_NVIC_EnableIRQ>
 8001bb6:	e5fa      	b.n	80017ae <HAL_UART_MspInit+0x42>
  {
 8001bb8:	f7ff f848 	bl	8000c4c <Error_Handler>
 8001bbc:	e7a0      	b.n	8001b00 <HAL_UART_MspInit+0x394>
    PA2     ------> USART2_TX
 8001bbe:	f7ff f845 	bl	8000c4c <Error_Handler>
 8001bc2:	e7d5      	b.n	8001b70 <HAL_UART_MspInit+0x404>

 8001bc4:	f7ff f842 	bl	8000c4c <Error_Handler>
 8001bc8:	e7ea      	b.n	8001ba0 <HAL_UART_MspInit+0x434>
 8001bca:	2201      	movs	r2, #1
 8001bcc:	2300      	movs	r3, #0
 8001bce:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8001bd2:	a80c      	add	r0, sp, #48	@ 0x30
 8001bd4:	f003 fab6 	bl	8005144 <HAL_RCCEx_PeriphCLKConfig>
 8001bd8:	bb30      	cbnz	r0, 8001c28 <HAL_UART_MspInit+0x4bc>
 8001bda:	4b15      	ldr	r3, [pc, #84]	@ (8001c30 <HAL_UART_MspInit+0x4c4>)
 8001bdc:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8001be0:	f042 0220 	orr.w	r2, r2, #32
 8001be4:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 8001be8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8001bec:	f002 0220 	and.w	r2, r2, #32
 8001bf0:	920a      	str	r2, [sp, #40]	@ 0x28
 8001bf2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8001bf4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001bf8:	f042 0204 	orr.w	r2, r2, #4
 8001bfc:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c04:	f003 0304 	and.w	r3, r3, #4
 8001c08:	930b      	str	r3, [sp, #44]	@ 0x2c
 8001c0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8001c0c:	23c0      	movs	r3, #192	@ 0xc0
 8001c0e:	933d      	str	r3, [sp, #244]	@ 0xf4
 8001c10:	2302      	movs	r3, #2
 8001c12:	933e      	str	r3, [sp, #248]	@ 0xf8
 8001c14:	2300      	movs	r3, #0
 8001c16:	933f      	str	r3, [sp, #252]	@ 0xfc
 8001c18:	9340      	str	r3, [sp, #256]	@ 0x100
 8001c1a:	2307      	movs	r3, #7
 8001c1c:	9341      	str	r3, [sp, #260]	@ 0x104
 8001c1e:	a93d      	add	r1, sp, #244	@ 0xf4
 8001c20:	480d      	ldr	r0, [pc, #52]	@ (8001c58 <HAL_UART_MspInit+0x4ec>)
 8001c22:	f002 fa5f 	bl	80040e4 <HAL_GPIO_Init>
 8001c26:	e5c2      	b.n	80017ae <HAL_UART_MspInit+0x42>
 8001c28:	f7ff f810 	bl	8000c4c <Error_Handler>
 8001c2c:	e7d5      	b.n	8001bda <HAL_UART_MspInit+0x46e>
 8001c2e:	bf00      	nop
 8001c30:	58024400 	.word	0x58024400
 8001c34:	58020000 	.word	0x58020000
 8001c38:	240004ac 	.word	0x240004ac
 8001c3c:	40020010 	.word	0x40020010
 8001c40:	24000434 	.word	0x24000434
 8001c44:	40020028 	.word	0x40020028
 8001c48:	240003bc 	.word	0x240003bc
 8001c4c:	40020040 	.word	0x40020040
 8001c50:	24000344 	.word	0x24000344
 8001c54:	40020058 	.word	0x40020058
 8001c58:	58020800 	.word	0x58020800

08001c5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001c5c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c94 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c60:	f7ff face 	bl	8001200 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c64:	480c      	ldr	r0, [pc, #48]	@ (8001c98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c66:	490d      	ldr	r1, [pc, #52]	@ (8001c9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c68:	4a0d      	ldr	r2, [pc, #52]	@ (8001ca0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c6c:	e002      	b.n	8001c74 <LoopCopyDataInit>

08001c6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c72:	3304      	adds	r3, #4

08001c74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c78:	d3f9      	bcc.n	8001c6e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c7a:	4a0a      	ldr	r2, [pc, #40]	@ (8001ca4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c7c:	4c0a      	ldr	r4, [pc, #40]	@ (8001ca8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c80:	e001      	b.n	8001c86 <LoopFillZerobss>

08001c82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c84:	3204      	adds	r2, #4

08001c86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c88:	d3fb      	bcc.n	8001c82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c8a:	f006 fa83 	bl	8008194 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c8e:	f7fe ff8d 	bl	8000bac <main>
  bx  lr
 8001c92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c94:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001c98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c9c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001ca0:	0800a240 	.word	0x0800a240
  ldr r2, =_sbss
 8001ca4:	24000000 	.word	0x24000000
  ldr r4, =_ebss
 8001ca8:	24000b38 	.word	0x24000b38

08001cac <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cac:	e7fe      	b.n	8001cac <ADC3_IRQHandler>
	...

08001cb0 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001cb0:	4b0f      	ldr	r3, [pc, #60]	@ (8001cf0 <HAL_InitTick+0x40>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	b90b      	cbnz	r3, 8001cba <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 8001cb6:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001cb8:	4770      	bx	lr
{
 8001cba:	b510      	push	{r4, lr}
 8001cbc:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001cbe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001cc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cc6:	4a0b      	ldr	r2, [pc, #44]	@ (8001cf4 <HAL_InitTick+0x44>)
 8001cc8:	6810      	ldr	r0, [r2, #0]
 8001cca:	fbb0 f0f3 	udiv	r0, r0, r3
 8001cce:	f000 f8d5 	bl	8001e7c <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cd2:	2c0f      	cmp	r4, #15
 8001cd4:	d800      	bhi.n	8001cd8 <HAL_InitTick+0x28>
 8001cd6:	b108      	cbz	r0, 8001cdc <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8001cd8:	2001      	movs	r0, #1
}
 8001cda:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cdc:	2200      	movs	r2, #0
 8001cde:	4621      	mov	r1, r4
 8001ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ce4:	f000 f876 	bl	8001dd4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ce8:	4b03      	ldr	r3, [pc, #12]	@ (8001cf8 <HAL_InitTick+0x48>)
 8001cea:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 8001cec:	2000      	movs	r0, #0
 8001cee:	e7f4      	b.n	8001cda <HAL_InitTick+0x2a>
 8001cf0:	20000008 	.word	0x20000008
 8001cf4:	20000004 	.word	0x20000004
 8001cf8:	2000000c 	.word	0x2000000c

08001cfc <HAL_Init>:
{
 8001cfc:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cfe:	2003      	movs	r0, #3
 8001d00:	f000 f856 	bl	8001db0 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001d04:	f002 fe82 	bl	8004a0c <HAL_RCC_GetSysClockFreq>
 8001d08:	490f      	ldr	r1, [pc, #60]	@ (8001d48 <HAL_Init+0x4c>)
 8001d0a:	698b      	ldr	r3, [r1, #24]
 8001d0c:	4a0f      	ldr	r2, [pc, #60]	@ (8001d4c <HAL_Init+0x50>)
 8001d0e:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8001d12:	5cd3      	ldrb	r3, [r2, r3]
 8001d14:	f003 031f 	and.w	r3, r3, #31
 8001d18:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001d1a:	698b      	ldr	r3, [r1, #24]
 8001d1c:	f003 030f 	and.w	r3, r3, #15
 8001d20:	5cd3      	ldrb	r3, [r2, r3]
 8001d22:	f003 031f 	and.w	r3, r3, #31
 8001d26:	fa20 f303 	lsr.w	r3, r0, r3
 8001d2a:	4a09      	ldr	r2, [pc, #36]	@ (8001d50 <HAL_Init+0x54>)
 8001d2c:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8001d2e:	4b09      	ldr	r3, [pc, #36]	@ (8001d54 <HAL_Init+0x58>)
 8001d30:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d32:	2007      	movs	r0, #7
 8001d34:	f7ff ffbc 	bl	8001cb0 <HAL_InitTick>
 8001d38:	b110      	cbz	r0, 8001d40 <HAL_Init+0x44>
    return HAL_ERROR;
 8001d3a:	2401      	movs	r4, #1
}
 8001d3c:	4620      	mov	r0, r4
 8001d3e:	bd10      	pop	{r4, pc}
 8001d40:	4604      	mov	r4, r0
  HAL_MspInit();
 8001d42:	f7ff f95f 	bl	8001004 <HAL_MspInit>
  return HAL_OK;
 8001d46:	e7f9      	b.n	8001d3c <HAL_Init+0x40>
 8001d48:	58024400 	.word	0x58024400
 8001d4c:	08009e70 	.word	0x08009e70
 8001d50:	20000000 	.word	0x20000000
 8001d54:	20000004 	.word	0x20000004

08001d58 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001d58:	4a03      	ldr	r2, [pc, #12]	@ (8001d68 <HAL_IncTick+0x10>)
 8001d5a:	6811      	ldr	r1, [r2, #0]
 8001d5c:	4b03      	ldr	r3, [pc, #12]	@ (8001d6c <HAL_IncTick+0x14>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	440b      	add	r3, r1
 8001d62:	6013      	str	r3, [r2, #0]
}
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	240009e8 	.word	0x240009e8
 8001d6c:	20000008 	.word	0x20000008

08001d70 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001d70:	4b01      	ldr	r3, [pc, #4]	@ (8001d78 <HAL_GetTick+0x8>)
 8001d72:	6818      	ldr	r0, [r3, #0]
}
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	240009e8 	.word	0x240009e8

08001d7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d7c:	b538      	push	{r3, r4, r5, lr}
 8001d7e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001d80:	f7ff fff6 	bl	8001d70 <HAL_GetTick>
 8001d84:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d86:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001d8a:	d002      	beq.n	8001d92 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d8c:	4b04      	ldr	r3, [pc, #16]	@ (8001da0 <HAL_Delay+0x24>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d92:	f7ff ffed 	bl	8001d70 <HAL_GetTick>
 8001d96:	1b40      	subs	r0, r0, r5
 8001d98:	42a0      	cmp	r0, r4
 8001d9a:	d3fa      	bcc.n	8001d92 <HAL_Delay+0x16>
  {
  }
}
 8001d9c:	bd38      	pop	{r3, r4, r5, pc}
 8001d9e:	bf00      	nop
 8001da0:	20000008 	.word	0x20000008

08001da4 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8001da4:	4b01      	ldr	r3, [pc, #4]	@ (8001dac <HAL_GetREVID+0x8>)
 8001da6:	6818      	ldr	r0, [r3, #0]
}
 8001da8:	0c00      	lsrs	r0, r0, #16
 8001daa:	4770      	bx	lr
 8001dac:	5c001000 	.word	0x5c001000

08001db0 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001db0:	4a06      	ldr	r2, [pc, #24]	@ (8001dcc <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8001db2:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001db4:	0200      	lsls	r0, r0, #8
 8001db6:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dba:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001dbe:	041b      	lsls	r3, r3, #16
 8001dc0:	0c1b      	lsrs	r3, r3, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dc2:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8001dc4:	4b02      	ldr	r3, [pc, #8]	@ (8001dd0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001dc6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001dc8:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001dca:	4770      	bx	lr
 8001dcc:	e000ed00 	.word	0xe000ed00
 8001dd0:	05fa0000 	.word	0x05fa0000

08001dd4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dd4:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dd6:	4b16      	ldr	r3, [pc, #88]	@ (8001e30 <HAL_NVIC_SetPriority+0x5c>)
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dde:	f1c3 0c07 	rsb	ip, r3, #7
 8001de2:	f1bc 0f04 	cmp.w	ip, #4
 8001de6:	bf28      	it	cs
 8001de8:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dec:	f103 0e04 	add.w	lr, r3, #4
 8001df0:	f1be 0f06 	cmp.w	lr, #6
 8001df4:	bf8c      	ite	hi
 8001df6:	3b03      	subhi	r3, #3
 8001df8:	2300      	movls	r3, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dfa:	f04f 3eff 	mov.w	lr, #4294967295
 8001dfe:	fa0e fc0c 	lsl.w	ip, lr, ip
 8001e02:	ea21 010c 	bic.w	r1, r1, ip
 8001e06:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e08:	fa0e fe03 	lsl.w	lr, lr, r3
 8001e0c:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e10:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8001e12:	2800      	cmp	r0, #0
 8001e14:	db05      	blt.n	8001e22 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e16:	0109      	lsls	r1, r1, #4
 8001e18:	b2c9      	uxtb	r1, r1
 8001e1a:	4b06      	ldr	r3, [pc, #24]	@ (8001e34 <HAL_NVIC_SetPriority+0x60>)
 8001e1c:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001e1e:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e22:	f000 000f 	and.w	r0, r0, #15
 8001e26:	0109      	lsls	r1, r1, #4
 8001e28:	b2c9      	uxtb	r1, r1
 8001e2a:	4b03      	ldr	r3, [pc, #12]	@ (8001e38 <HAL_NVIC_SetPriority+0x64>)
 8001e2c:	5419      	strb	r1, [r3, r0]
 8001e2e:	e7f6      	b.n	8001e1e <HAL_NVIC_SetPriority+0x4a>
 8001e30:	e000ed00 	.word	0xe000ed00
 8001e34:	e000e400 	.word	0xe000e400
 8001e38:	e000ed14 	.word	0xe000ed14

08001e3c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001e3c:	2800      	cmp	r0, #0
 8001e3e:	db07      	blt.n	8001e50 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e40:	0941      	lsrs	r1, r0, #5
 8001e42:	f000 001f 	and.w	r0, r0, #31
 8001e46:	2301      	movs	r3, #1
 8001e48:	4083      	lsls	r3, r0
 8001e4a:	4a02      	ldr	r2, [pc, #8]	@ (8001e54 <HAL_NVIC_EnableIRQ+0x18>)
 8001e4c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	e000e100 	.word	0xe000e100

08001e58 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001e58:	2800      	cmp	r0, #0
 8001e5a:	db0c      	blt.n	8001e76 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e5c:	0943      	lsrs	r3, r0, #5
 8001e5e:	f000 001f 	and.w	r0, r0, #31
 8001e62:	2201      	movs	r2, #1
 8001e64:	4082      	lsls	r2, r0
 8001e66:	3320      	adds	r3, #32
 8001e68:	4903      	ldr	r1, [pc, #12]	@ (8001e78 <HAL_NVIC_DisableIRQ+0x20>)
 8001e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001e6e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001e72:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8001e76:	4770      	bx	lr
 8001e78:	e000e100 	.word	0xe000e100

08001e7c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e7c:	3801      	subs	r0, #1
 8001e7e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8001e82:	d20b      	bcs.n	8001e9c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e84:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001e88:	6158      	str	r0, [r3, #20]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e8a:	4a05      	ldr	r2, [pc, #20]	@ (8001ea0 <HAL_SYSTICK_Config+0x24>)
 8001e8c:	21f0      	movs	r1, #240	@ 0xf0
 8001e8e:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e92:	2000      	movs	r0, #0
 8001e94:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e96:	2207      	movs	r2, #7
 8001e98:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e9a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001e9c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001e9e:	4770      	bx	lr
 8001ea0:	e000ed00 	.word	0xe000ed00

08001ea4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ea4:	4601      	mov	r1, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ea6:	6802      	ldr	r2, [r0, #0]
 8001ea8:	4b33      	ldr	r3, [pc, #204]	@ (8001f78 <DMA_CalcBaseAndBitshift+0xd4>)
 8001eaa:	4834      	ldr	r0, [pc, #208]	@ (8001f7c <DMA_CalcBaseAndBitshift+0xd8>)
 8001eac:	4282      	cmp	r2, r0
 8001eae:	bf18      	it	ne
 8001eb0:	429a      	cmpne	r2, r3
 8001eb2:	bf0c      	ite	eq
 8001eb4:	2301      	moveq	r3, #1
 8001eb6:	2300      	movne	r3, #0
 8001eb8:	3018      	adds	r0, #24
 8001eba:	4282      	cmp	r2, r0
 8001ebc:	bf08      	it	eq
 8001ebe:	f043 0301 	orreq.w	r3, r3, #1
 8001ec2:	3018      	adds	r0, #24
 8001ec4:	4282      	cmp	r2, r0
 8001ec6:	bf08      	it	eq
 8001ec8:	f043 0301 	orreq.w	r3, r3, #1
 8001ecc:	3018      	adds	r0, #24
 8001ece:	4282      	cmp	r2, r0
 8001ed0:	bf08      	it	eq
 8001ed2:	f043 0301 	orreq.w	r3, r3, #1
 8001ed6:	3018      	adds	r0, #24
 8001ed8:	4282      	cmp	r2, r0
 8001eda:	bf08      	it	eq
 8001edc:	f043 0301 	orreq.w	r3, r3, #1
 8001ee0:	3018      	adds	r0, #24
 8001ee2:	4282      	cmp	r2, r0
 8001ee4:	bf08      	it	eq
 8001ee6:	f043 0301 	orreq.w	r3, r3, #1
 8001eea:	3018      	adds	r0, #24
 8001eec:	4282      	cmp	r2, r0
 8001eee:	bf08      	it	eq
 8001ef0:	f043 0301 	orreq.w	r3, r3, #1
 8001ef4:	f500 7056 	add.w	r0, r0, #856	@ 0x358
 8001ef8:	4282      	cmp	r2, r0
 8001efa:	bf08      	it	eq
 8001efc:	f043 0301 	orreq.w	r3, r3, #1
 8001f00:	3018      	adds	r0, #24
 8001f02:	4282      	cmp	r2, r0
 8001f04:	bf08      	it	eq
 8001f06:	f043 0301 	orreq.w	r3, r3, #1
 8001f0a:	3018      	adds	r0, #24
 8001f0c:	4282      	cmp	r2, r0
 8001f0e:	bf08      	it	eq
 8001f10:	f043 0301 	orreq.w	r3, r3, #1
 8001f14:	3018      	adds	r0, #24
 8001f16:	4282      	cmp	r2, r0
 8001f18:	bf08      	it	eq
 8001f1a:	f043 0301 	orreq.w	r3, r3, #1
 8001f1e:	3018      	adds	r0, #24
 8001f20:	4282      	cmp	r2, r0
 8001f22:	bf08      	it	eq
 8001f24:	f043 0301 	orreq.w	r3, r3, #1
 8001f28:	3018      	adds	r0, #24
 8001f2a:	4282      	cmp	r2, r0
 8001f2c:	bf08      	it	eq
 8001f2e:	f043 0301 	orreq.w	r3, r3, #1
 8001f32:	3018      	adds	r0, #24
 8001f34:	4282      	cmp	r2, r0
 8001f36:	bf08      	it	eq
 8001f38:	f043 0301 	orreq.w	r3, r3, #1
 8001f3c:	b913      	cbnz	r3, 8001f44 <DMA_CalcBaseAndBitshift+0xa0>
 8001f3e:	4b10      	ldr	r3, [pc, #64]	@ (8001f80 <DMA_CalcBaseAndBitshift+0xdc>)
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d114      	bne.n	8001f6e <DMA_CalcBaseAndBitshift+0xca>
{
 8001f44:	b410      	push	{r4}
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001f46:	b2d0      	uxtb	r0, r2
 8001f48:	3810      	subs	r0, #16
 8001f4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f84 <DMA_CalcBaseAndBitshift+0xe0>)
 8001f4c:	fba3 4300 	umull	r4, r3, r3, r0

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8001f50:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001f54:	4c0c      	ldr	r4, [pc, #48]	@ (8001f88 <DMA_CalcBaseAndBitshift+0xe4>)
 8001f56:	5ce3      	ldrb	r3, [r4, r3]
 8001f58:	65cb      	str	r3, [r1, #92]	@ 0x5c

    if (stream_number > 3U)
 8001f5a:	285f      	cmp	r0, #95	@ 0x5f
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8001f5c:	480b      	ldr	r0, [pc, #44]	@ (8001f8c <DMA_CalcBaseAndBitshift+0xe8>)
 8001f5e:	ea00 0002 	and.w	r0, r0, r2
 8001f62:	bf88      	it	hi
 8001f64:	3004      	addhi	r0, #4
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8001f66:	6588      	str	r0, [r1, #88]	@ 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
 8001f68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001f6c:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8001f6e:	f022 00ff 	bic.w	r0, r2, #255	@ 0xff
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8001f72:	6588      	str	r0, [r1, #88]	@ 0x58
}
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	40020010 	.word	0x40020010
 8001f7c:	40020028 	.word	0x40020028
 8001f80:	400204b8 	.word	0x400204b8
 8001f84:	aaaaaaab 	.word	0xaaaaaaab
 8001f88:	08009e80 	.word	0x08009e80
 8001f8c:	fffffc00 	.word	0xfffffc00

08001f90 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8001f90:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001f92:	4a26      	ldr	r2, [pc, #152]	@ (800202c <DMA_CalcDMAMUXChannelBaseAndMask+0x9c>)
 8001f94:	4926      	ldr	r1, [pc, #152]	@ (8002030 <DMA_CalcDMAMUXChannelBaseAndMask+0xa0>)
 8001f96:	428b      	cmp	r3, r1
 8001f98:	bf18      	it	ne
 8001f9a:	4293      	cmpne	r3, r2
 8001f9c:	bf0c      	ite	eq
 8001f9e:	2201      	moveq	r2, #1
 8001fa0:	2200      	movne	r2, #0
 8001fa2:	3114      	adds	r1, #20
 8001fa4:	428b      	cmp	r3, r1
 8001fa6:	bf08      	it	eq
 8001fa8:	f042 0201 	orreq.w	r2, r2, #1
 8001fac:	3114      	adds	r1, #20
 8001fae:	428b      	cmp	r3, r1
 8001fb0:	bf08      	it	eq
 8001fb2:	f042 0201 	orreq.w	r2, r2, #1
 8001fb6:	3114      	adds	r1, #20
 8001fb8:	428b      	cmp	r3, r1
 8001fba:	bf08      	it	eq
 8001fbc:	f042 0201 	orreq.w	r2, r2, #1
 8001fc0:	3114      	adds	r1, #20
 8001fc2:	428b      	cmp	r3, r1
 8001fc4:	bf08      	it	eq
 8001fc6:	f042 0201 	orreq.w	r2, r2, #1
 8001fca:	3114      	adds	r1, #20
 8001fcc:	428b      	cmp	r3, r1
 8001fce:	bf08      	it	eq
 8001fd0:	f042 0201 	orreq.w	r2, r2, #1
 8001fd4:	b912      	cbnz	r2, 8001fdc <DMA_CalcDMAMUXChannelBaseAndMask+0x4c>
 8001fd6:	4a17      	ldr	r2, [pc, #92]	@ (8002034 <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d112      	bne.n	8002002 <DMA_CalcDMAMUXChannelBaseAndMask+0x72>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	3b08      	subs	r3, #8
 8001fe0:	4a15      	ldr	r2, [pc, #84]	@ (8002038 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 8001fe2:	fba2 2303 	umull	r2, r3, r2, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8001fe6:	4a15      	ldr	r2, [pc, #84]	@ (800203c <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
 8001fe8:	eb02 1213 	add.w	r2, r2, r3, lsr #4
 8001fec:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001fee:	f3c3 1304 	ubfx	r3, r3, #4, #5
 8001ff2:	2101      	movs	r1, #1
 8001ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff8:	4911      	ldr	r1, [pc, #68]	@ (8002040 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8001ffa:	6602      	str	r2, [r0, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8001ffc:	6641      	str	r1, [r0, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001ffe:	6683      	str	r3, [r0, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8002000:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002002:	b2d9      	uxtb	r1, r3
 8002004:	3910      	subs	r1, #16
 8002006:	4a0f      	ldr	r2, [pc, #60]	@ (8002044 <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
 8002008:	fba2 2101 	umull	r2, r1, r2, r1
 800200c:	0909      	lsrs	r1, r1, #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800200e:	4a0e      	ldr	r2, [pc, #56]	@ (8002048 <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
 8002010:	441a      	add	r2, r3
 8002012:	2aa8      	cmp	r2, #168	@ 0xa8
 8002014:	d908      	bls.n	8002028 <DMA_CalcDMAMUXChannelBaseAndMask+0x98>
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002016:	4a0d      	ldr	r2, [pc, #52]	@ (800204c <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
 8002018:	440a      	add	r2, r1
 800201a:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800201c:	f001 011f 	and.w	r1, r1, #31
 8002020:	2301      	movs	r3, #1
 8002022:	408b      	lsls	r3, r1
 8002024:	490a      	ldr	r1, [pc, #40]	@ (8002050 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
 8002026:	e7e8      	b.n	8001ffa <DMA_CalcDMAMUXChannelBaseAndMask+0x6a>
      stream_number += 8U;
 8002028:	3108      	adds	r1, #8
 800202a:	e7f4      	b.n	8002016 <DMA_CalcDMAMUXChannelBaseAndMask+0x86>
 800202c:	58025408 	.word	0x58025408
 8002030:	5802541c 	.word	0x5802541c
 8002034:	58025494 	.word	0x58025494
 8002038:	cccccccd 	.word	0xcccccccd
 800203c:	16009600 	.word	0x16009600
 8002040:	58025880 	.word	0x58025880
 8002044:	aaaaaaab 	.word	0xaaaaaaab
 8002048:	bffdfbf0 	.word	0xbffdfbf0
 800204c:	10008200 	.word	0x10008200
 8002050:	40020880 	.word	0x40020880

08002054 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002054:	f890 c004 	ldrb.w	ip, [r0, #4]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8002058:	f10c 31ff 	add.w	r1, ip, #4294967295
 800205c:	2907      	cmp	r1, #7
 800205e:	d837      	bhi.n	80020d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x7c>
{
 8002060:	b410      	push	{r4}
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002062:	6802      	ldr	r2, [r0, #0]
 8002064:	4b1b      	ldr	r3, [pc, #108]	@ (80020d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x80>)
 8002066:	4c1c      	ldr	r4, [pc, #112]	@ (80020d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x84>)
 8002068:	42a2      	cmp	r2, r4
 800206a:	bf18      	it	ne
 800206c:	429a      	cmpne	r2, r3
 800206e:	bf0c      	ite	eq
 8002070:	2301      	moveq	r3, #1
 8002072:	2300      	movne	r3, #0
 8002074:	3414      	adds	r4, #20
 8002076:	42a2      	cmp	r2, r4
 8002078:	bf08      	it	eq
 800207a:	f043 0301 	orreq.w	r3, r3, #1
 800207e:	3414      	adds	r4, #20
 8002080:	42a2      	cmp	r2, r4
 8002082:	bf08      	it	eq
 8002084:	f043 0301 	orreq.w	r3, r3, #1
 8002088:	3414      	adds	r4, #20
 800208a:	42a2      	cmp	r2, r4
 800208c:	bf08      	it	eq
 800208e:	f043 0301 	orreq.w	r3, r3, #1
 8002092:	3414      	adds	r4, #20
 8002094:	42a2      	cmp	r2, r4
 8002096:	bf08      	it	eq
 8002098:	f043 0301 	orreq.w	r3, r3, #1
 800209c:	3414      	adds	r4, #20
 800209e:	42a2      	cmp	r2, r4
 80020a0:	bf08      	it	eq
 80020a2:	f043 0301 	orreq.w	r3, r3, #1
 80020a6:	b913      	cbnz	r3, 80020ae <DMA_CalcDMAMUXRequestGenBaseAndMask+0x5a>
 80020a8:	4b0c      	ldr	r3, [pc, #48]	@ (80020dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x88>)
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d10b      	bne.n	80020c6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80020ae:	4b0c      	ldr	r3, [pc, #48]	@ (80020e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>)
 80020b0:	4463      	add	r3, ip
 80020b2:	009b      	lsls	r3, r3, #2

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80020b4:	4a0b      	ldr	r2, [pc, #44]	@ (80020e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x90>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80020b6:	66c3      	str	r3, [r0, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80020b8:	6702      	str	r2, [r0, #112]	@ 0x70
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80020ba:	2301      	movs	r3, #1
 80020bc:	408b      	lsls	r3, r1
 80020be:	6743      	str	r3, [r0, #116]	@ 0x74
  }
}
 80020c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80020c4:	4770      	bx	lr
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80020c6:	4b08      	ldr	r3, [pc, #32]	@ (80020e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x94>)
 80020c8:	4463      	add	r3, ip
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	4a07      	ldr	r2, [pc, #28]	@ (80020ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x98>)
 80020ce:	e7f2      	b.n	80020b6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x62>
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	58025408 	.word	0x58025408
 80020d8:	5802541c 	.word	0x5802541c
 80020dc:	58025494 	.word	0x58025494
 80020e0:	1600963f 	.word	0x1600963f
 80020e4:	58025940 	.word	0x58025940
 80020e8:	1000823f 	.word	0x1000823f
 80020ec:	40020940 	.word	0x40020940

080020f0 <HAL_DMA_Init>:
{
 80020f0:	b538      	push	{r3, r4, r5, lr}
 80020f2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80020f4:	f7ff fe3c 	bl	8001d70 <HAL_GetTick>
  if(hdma == NULL)
 80020f8:	2c00      	cmp	r4, #0
 80020fa:	f000 820a 	beq.w	8002512 <HAL_DMA_Init+0x422>
 80020fe:	4605      	mov	r5, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002100:	6822      	ldr	r2, [r4, #0]
 8002102:	4b64      	ldr	r3, [pc, #400]	@ (8002294 <HAL_DMA_Init+0x1a4>)
 8002104:	4964      	ldr	r1, [pc, #400]	@ (8002298 <HAL_DMA_Init+0x1a8>)
 8002106:	428a      	cmp	r2, r1
 8002108:	bf18      	it	ne
 800210a:	429a      	cmpne	r2, r3
 800210c:	bf0c      	ite	eq
 800210e:	2301      	moveq	r3, #1
 8002110:	2300      	movne	r3, #0
 8002112:	3118      	adds	r1, #24
 8002114:	428a      	cmp	r2, r1
 8002116:	bf08      	it	eq
 8002118:	f043 0301 	orreq.w	r3, r3, #1
 800211c:	3118      	adds	r1, #24
 800211e:	428a      	cmp	r2, r1
 8002120:	bf08      	it	eq
 8002122:	f043 0301 	orreq.w	r3, r3, #1
 8002126:	3118      	adds	r1, #24
 8002128:	428a      	cmp	r2, r1
 800212a:	bf08      	it	eq
 800212c:	f043 0301 	orreq.w	r3, r3, #1
 8002130:	3118      	adds	r1, #24
 8002132:	428a      	cmp	r2, r1
 8002134:	bf08      	it	eq
 8002136:	f043 0301 	orreq.w	r3, r3, #1
 800213a:	3118      	adds	r1, #24
 800213c:	428a      	cmp	r2, r1
 800213e:	bf08      	it	eq
 8002140:	f043 0301 	orreq.w	r3, r3, #1
 8002144:	3118      	adds	r1, #24
 8002146:	428a      	cmp	r2, r1
 8002148:	bf08      	it	eq
 800214a:	f043 0301 	orreq.w	r3, r3, #1
 800214e:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 8002152:	428a      	cmp	r2, r1
 8002154:	bf08      	it	eq
 8002156:	f043 0301 	orreq.w	r3, r3, #1
 800215a:	3118      	adds	r1, #24
 800215c:	428a      	cmp	r2, r1
 800215e:	bf08      	it	eq
 8002160:	f043 0301 	orreq.w	r3, r3, #1
 8002164:	3118      	adds	r1, #24
 8002166:	428a      	cmp	r2, r1
 8002168:	bf08      	it	eq
 800216a:	f043 0301 	orreq.w	r3, r3, #1
 800216e:	3118      	adds	r1, #24
 8002170:	428a      	cmp	r2, r1
 8002172:	bf08      	it	eq
 8002174:	f043 0301 	orreq.w	r3, r3, #1
 8002178:	3118      	adds	r1, #24
 800217a:	428a      	cmp	r2, r1
 800217c:	bf08      	it	eq
 800217e:	f043 0301 	orreq.w	r3, r3, #1
 8002182:	3118      	adds	r1, #24
 8002184:	428a      	cmp	r2, r1
 8002186:	bf08      	it	eq
 8002188:	f043 0301 	orreq.w	r3, r3, #1
 800218c:	3118      	adds	r1, #24
 800218e:	428a      	cmp	r2, r1
 8002190:	bf08      	it	eq
 8002192:	f043 0301 	orreq.w	r3, r3, #1
 8002196:	b913      	cbnz	r3, 800219e <HAL_DMA_Init+0xae>
 8002198:	4b40      	ldr	r3, [pc, #256]	@ (800229c <HAL_DMA_Init+0x1ac>)
 800219a:	429a      	cmp	r2, r3
 800219c:	d11a      	bne.n	80021d4 <HAL_DMA_Init+0xe4>
    hdma->State = HAL_DMA_STATE_BUSY;
 800219e:	2302      	movs	r3, #2
 80021a0:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 80021a4:	2300      	movs	r3, #0
 80021a6:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    __HAL_DMA_DISABLE(hdma);
 80021aa:	6813      	ldr	r3, [r2, #0]
 80021ac:	f023 0301 	bic.w	r3, r3, #1
 80021b0:	6013      	str	r3, [r2, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80021b2:	6823      	ldr	r3, [r4, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	f012 0f01 	tst.w	r2, #1
 80021ba:	d07d      	beq.n	80022b8 <HAL_DMA_Init+0x1c8>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021bc:	f7ff fdd8 	bl	8001d70 <HAL_GetTick>
 80021c0:	1b43      	subs	r3, r0, r5
 80021c2:	2b05      	cmp	r3, #5
 80021c4:	d9f5      	bls.n	80021b2 <HAL_DMA_Init+0xc2>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021c6:	2320      	movs	r3, #32
 80021c8:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 80021ca:	2303      	movs	r3, #3
 80021cc:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        return HAL_ERROR;
 80021d0:	2001      	movs	r0, #1
}
 80021d2:	bd38      	pop	{r3, r4, r5, pc}
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80021d4:	4b32      	ldr	r3, [pc, #200]	@ (80022a0 <HAL_DMA_Init+0x1b0>)
 80021d6:	4933      	ldr	r1, [pc, #204]	@ (80022a4 <HAL_DMA_Init+0x1b4>)
 80021d8:	428a      	cmp	r2, r1
 80021da:	bf18      	it	ne
 80021dc:	429a      	cmpne	r2, r3
 80021de:	bf0c      	ite	eq
 80021e0:	2301      	moveq	r3, #1
 80021e2:	2300      	movne	r3, #0
 80021e4:	3114      	adds	r1, #20
 80021e6:	428a      	cmp	r2, r1
 80021e8:	bf08      	it	eq
 80021ea:	f043 0301 	orreq.w	r3, r3, #1
 80021ee:	3114      	adds	r1, #20
 80021f0:	428a      	cmp	r2, r1
 80021f2:	bf08      	it	eq
 80021f4:	f043 0301 	orreq.w	r3, r3, #1
 80021f8:	3114      	adds	r1, #20
 80021fa:	428a      	cmp	r2, r1
 80021fc:	bf08      	it	eq
 80021fe:	f043 0301 	orreq.w	r3, r3, #1
 8002202:	3114      	adds	r1, #20
 8002204:	428a      	cmp	r2, r1
 8002206:	bf08      	it	eq
 8002208:	f043 0301 	orreq.w	r3, r3, #1
 800220c:	3114      	adds	r1, #20
 800220e:	428a      	cmp	r2, r1
 8002210:	bf08      	it	eq
 8002212:	f043 0301 	orreq.w	r3, r3, #1
 8002216:	b91b      	cbnz	r3, 8002220 <HAL_DMA_Init+0x130>
 8002218:	4b23      	ldr	r3, [pc, #140]	@ (80022a8 <HAL_DMA_Init+0x1b8>)
 800221a:	429a      	cmp	r2, r3
 800221c:	f040 8163 	bne.w	80024e6 <HAL_DMA_Init+0x3f6>
    hdma->State = HAL_DMA_STATE_BUSY;
 8002220:	2302      	movs	r3, #2
 8002222:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8002226:	2300      	movs	r3, #0
 8002228:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800222c:	6813      	ldr	r3, [r2, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800222e:	481f      	ldr	r0, [pc, #124]	@ (80022ac <HAL_DMA_Init+0x1bc>)
 8002230:	4018      	ands	r0, r3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002232:	68a3      	ldr	r3, [r4, #8]
 8002234:	2b40      	cmp	r3, #64	@ 0x40
 8002236:	f000 815d 	beq.w	80024f4 <HAL_DMA_Init+0x404>
 800223a:	2b80      	cmp	r3, #128	@ 0x80
 800223c:	bf14      	ite	ne
 800223e:	2300      	movne	r3, #0
 8002240:	2301      	moveq	r3, #1
 8002242:	0399      	lsls	r1, r3, #14
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002244:	68e5      	ldr	r5, [r4, #12]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002246:	6923      	ldr	r3, [r4, #16]
 8002248:	08db      	lsrs	r3, r3, #3
 800224a:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800224e:	6965      	ldr	r5, [r4, #20]
 8002250:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002254:	69a5      	ldr	r5, [r4, #24]
 8002256:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800225a:	69e5      	ldr	r5, [r4, #28]
 800225c:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002260:	6a25      	ldr	r5, [r4, #32]
 8002262:	ea43 1315 	orr.w	r3, r3, r5, lsr #4
 8002266:	4303      	orrs	r3, r0
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002268:	4319      	orrs	r1, r3
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800226a:	6011      	str	r1, [r2, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800226c:	6822      	ldr	r2, [r4, #0]
 800226e:	4b10      	ldr	r3, [pc, #64]	@ (80022b0 <HAL_DMA_Init+0x1c0>)
 8002270:	4413      	add	r3, r2
 8002272:	4a10      	ldr	r2, [pc, #64]	@ (80022b4 <HAL_DMA_Init+0x1c4>)
 8002274:	fba2 2303 	umull	r2, r3, r2, r3
 8002278:	091b      	lsrs	r3, r3, #4
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	65e3      	str	r3, [r4, #92]	@ 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800227e:	4620      	mov	r0, r4
 8002280:	f7ff fe10 	bl	8001ea4 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002284:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8002286:	f002 011f 	and.w	r1, r2, #31
 800228a:	2201      	movs	r2, #1
 800228c:	408a      	lsls	r2, r1
 800228e:	6042      	str	r2, [r0, #4]
 8002290:	e05d      	b.n	800234e <HAL_DMA_Init+0x25e>
 8002292:	bf00      	nop
 8002294:	40020010 	.word	0x40020010
 8002298:	40020028 	.word	0x40020028
 800229c:	400204b8 	.word	0x400204b8
 80022a0:	58025408 	.word	0x58025408
 80022a4:	5802541c 	.word	0x5802541c
 80022a8:	58025494 	.word	0x58025494
 80022ac:	fffe000f 	.word	0xfffe000f
 80022b0:	a7fdabf8 	.word	0xa7fdabf8
 80022b4:	cccccccd 	.word	0xcccccccd
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80022b8:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80022ba:	4999      	ldr	r1, [pc, #612]	@ (8002520 <HAL_DMA_Init+0x430>)
 80022bc:	4011      	ands	r1, r2
    registerValue |=  hdma->Init.Direction           |
 80022be:	68a2      	ldr	r2, [r4, #8]
 80022c0:	68e0      	ldr	r0, [r4, #12]
 80022c2:	4302      	orrs	r2, r0
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022c4:	6920      	ldr	r0, [r4, #16]
 80022c6:	4302      	orrs	r2, r0
 80022c8:	6960      	ldr	r0, [r4, #20]
 80022ca:	4302      	orrs	r2, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022cc:	69a0      	ldr	r0, [r4, #24]
 80022ce:	4302      	orrs	r2, r0
 80022d0:	69e0      	ldr	r0, [r4, #28]
 80022d2:	4302      	orrs	r2, r0
            hdma->Init.Mode                | hdma->Init.Priority;
 80022d4:	6a20      	ldr	r0, [r4, #32]
 80022d6:	4302      	orrs	r2, r0
    registerValue |=  hdma->Init.Direction           |
 80022d8:	430a      	orrs	r2, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022da:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80022dc:	2904      	cmp	r1, #4
 80022de:	f000 80c7 	beq.w	8002470 <HAL_DMA_Init+0x380>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80022e2:	4990      	ldr	r1, [pc, #576]	@ (8002524 <HAL_DMA_Init+0x434>)
 80022e4:	6808      	ldr	r0, [r1, #0]
 80022e6:	4990      	ldr	r1, [pc, #576]	@ (8002528 <HAL_DMA_Init+0x438>)
 80022e8:	4001      	ands	r1, r0
 80022ea:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 80022ee:	d30c      	bcc.n	800230a <HAL_DMA_Init+0x21a>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80022f0:	6861      	ldr	r1, [r4, #4]
 80022f2:	f1a1 0029 	sub.w	r0, r1, #41	@ 0x29
 80022f6:	281f      	cmp	r0, #31
 80022f8:	f200 810d 	bhi.w	8002516 <HAL_DMA_Init+0x426>
 80022fc:	498b      	ldr	r1, [pc, #556]	@ (800252c <HAL_DMA_Init+0x43c>)
 80022fe:	40c1      	lsrs	r1, r0
 8002300:	f011 0f01 	tst.w	r1, #1
 8002304:	d001      	beq.n	800230a <HAL_DMA_Init+0x21a>
        registerValue |= DMA_SxCR_TRBUFF;
 8002306:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800230a:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800230c:	6821      	ldr	r1, [r4, #0]
 800230e:	694a      	ldr	r2, [r1, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002310:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 8002314:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002316:	431a      	orrs	r2, r3
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002318:	2b04      	cmp	r3, #4
 800231a:	d10e      	bne.n	800233a <HAL_DMA_Init+0x24a>
      registerValue |= hdma->Init.FIFOThreshold;
 800231c:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800231e:	4302      	orrs	r2, r0
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002320:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002322:	b153      	cbz	r3, 800233a <HAL_DMA_Init+0x24a>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002324:	69a5      	ldr	r5, [r4, #24]
 8002326:	2d00      	cmp	r5, #0
 8002328:	f040 80b8 	bne.w	800249c <HAL_DMA_Init+0x3ac>
    switch (hdma->Init.FIFOThreshold)
 800232c:	2801      	cmp	r0, #1
 800232e:	f000 80af 	beq.w	8002490 <HAL_DMA_Init+0x3a0>
 8002332:	f030 0002 	bics.w	r0, r0, #2
 8002336:	f000 80a0 	beq.w	800247a <HAL_DMA_Init+0x38a>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800233a:	614a      	str	r2, [r1, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800233c:	4620      	mov	r0, r4
 800233e:	f7ff fdb1 	bl	8001ea4 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002342:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002344:	f003 021f 	and.w	r2, r3, #31
 8002348:	233f      	movs	r3, #63	@ 0x3f
 800234a:	4093      	lsls	r3, r2
 800234c:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800234e:	6822      	ldr	r2, [r4, #0]
 8002350:	4b77      	ldr	r3, [pc, #476]	@ (8002530 <HAL_DMA_Init+0x440>)
 8002352:	4978      	ldr	r1, [pc, #480]	@ (8002534 <HAL_DMA_Init+0x444>)
 8002354:	428a      	cmp	r2, r1
 8002356:	bf18      	it	ne
 8002358:	429a      	cmpne	r2, r3
 800235a:	bf0c      	ite	eq
 800235c:	2301      	moveq	r3, #1
 800235e:	2300      	movne	r3, #0
 8002360:	3118      	adds	r1, #24
 8002362:	428a      	cmp	r2, r1
 8002364:	bf08      	it	eq
 8002366:	f043 0301 	orreq.w	r3, r3, #1
 800236a:	3118      	adds	r1, #24
 800236c:	428a      	cmp	r2, r1
 800236e:	bf08      	it	eq
 8002370:	f043 0301 	orreq.w	r3, r3, #1
 8002374:	3118      	adds	r1, #24
 8002376:	428a      	cmp	r2, r1
 8002378:	bf08      	it	eq
 800237a:	f043 0301 	orreq.w	r3, r3, #1
 800237e:	3118      	adds	r1, #24
 8002380:	428a      	cmp	r2, r1
 8002382:	bf08      	it	eq
 8002384:	f043 0301 	orreq.w	r3, r3, #1
 8002388:	3118      	adds	r1, #24
 800238a:	428a      	cmp	r2, r1
 800238c:	bf08      	it	eq
 800238e:	f043 0301 	orreq.w	r3, r3, #1
 8002392:	3118      	adds	r1, #24
 8002394:	428a      	cmp	r2, r1
 8002396:	bf08      	it	eq
 8002398:	f043 0301 	orreq.w	r3, r3, #1
 800239c:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 80023a0:	428a      	cmp	r2, r1
 80023a2:	bf08      	it	eq
 80023a4:	f043 0301 	orreq.w	r3, r3, #1
 80023a8:	3118      	adds	r1, #24
 80023aa:	428a      	cmp	r2, r1
 80023ac:	bf08      	it	eq
 80023ae:	f043 0301 	orreq.w	r3, r3, #1
 80023b2:	3118      	adds	r1, #24
 80023b4:	428a      	cmp	r2, r1
 80023b6:	bf08      	it	eq
 80023b8:	f043 0301 	orreq.w	r3, r3, #1
 80023bc:	3118      	adds	r1, #24
 80023be:	428a      	cmp	r2, r1
 80023c0:	bf08      	it	eq
 80023c2:	f043 0301 	orreq.w	r3, r3, #1
 80023c6:	3118      	adds	r1, #24
 80023c8:	428a      	cmp	r2, r1
 80023ca:	bf08      	it	eq
 80023cc:	f043 0301 	orreq.w	r3, r3, #1
 80023d0:	3118      	adds	r1, #24
 80023d2:	428a      	cmp	r2, r1
 80023d4:	bf08      	it	eq
 80023d6:	f043 0301 	orreq.w	r3, r3, #1
 80023da:	3118      	adds	r1, #24
 80023dc:	428a      	cmp	r2, r1
 80023de:	bf08      	it	eq
 80023e0:	f043 0301 	orreq.w	r3, r3, #1
 80023e4:	3118      	adds	r1, #24
 80023e6:	428a      	cmp	r2, r1
 80023e8:	bf08      	it	eq
 80023ea:	f043 0301 	orreq.w	r3, r3, #1
 80023ee:	4952      	ldr	r1, [pc, #328]	@ (8002538 <HAL_DMA_Init+0x448>)
 80023f0:	428a      	cmp	r2, r1
 80023f2:	bf08      	it	eq
 80023f4:	f043 0301 	orreq.w	r3, r3, #1
 80023f8:	3114      	adds	r1, #20
 80023fa:	428a      	cmp	r2, r1
 80023fc:	bf08      	it	eq
 80023fe:	f043 0301 	orreq.w	r3, r3, #1
 8002402:	3114      	adds	r1, #20
 8002404:	428a      	cmp	r2, r1
 8002406:	bf08      	it	eq
 8002408:	f043 0301 	orreq.w	r3, r3, #1
 800240c:	3114      	adds	r1, #20
 800240e:	428a      	cmp	r2, r1
 8002410:	bf08      	it	eq
 8002412:	f043 0301 	orreq.w	r3, r3, #1
 8002416:	3114      	adds	r1, #20
 8002418:	428a      	cmp	r2, r1
 800241a:	bf08      	it	eq
 800241c:	f043 0301 	orreq.w	r3, r3, #1
 8002420:	3114      	adds	r1, #20
 8002422:	428a      	cmp	r2, r1
 8002424:	bf08      	it	eq
 8002426:	f043 0301 	orreq.w	r3, r3, #1
 800242a:	3114      	adds	r1, #20
 800242c:	428a      	cmp	r2, r1
 800242e:	bf08      	it	eq
 8002430:	f043 0301 	orreq.w	r3, r3, #1
 8002434:	b913      	cbnz	r3, 800243c <HAL_DMA_Init+0x34c>
 8002436:	4b41      	ldr	r3, [pc, #260]	@ (800253c <HAL_DMA_Init+0x44c>)
 8002438:	429a      	cmp	r2, r3
 800243a:	d113      	bne.n	8002464 <HAL_DMA_Init+0x374>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800243c:	4620      	mov	r0, r4
 800243e:	f7ff fda7 	bl	8001f90 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002442:	68a3      	ldr	r3, [r4, #8]
 8002444:	2b80      	cmp	r3, #128	@ 0x80
 8002446:	d057      	beq.n	80024f8 <HAL_DMA_Init+0x408>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002448:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800244a:	7922      	ldrb	r2, [r4, #4]
 800244c:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800244e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002450:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 8002452:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002454:	6863      	ldr	r3, [r4, #4]
 8002456:	3b01      	subs	r3, #1
 8002458:	2b07      	cmp	r3, #7
 800245a:	d950      	bls.n	80024fe <HAL_DMA_Init+0x40e>
      hdma->DMAmuxRequestGen = 0U;
 800245c:	2300      	movs	r3, #0
 800245e:	66e3      	str	r3, [r4, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002460:	6723      	str	r3, [r4, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002462:	6763      	str	r3, [r4, #116]	@ 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002464:	2000      	movs	r0, #0
 8002466:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002468:	2301      	movs	r3, #1
 800246a:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 800246e:	e6b0      	b.n	80021d2 <HAL_DMA_Init+0xe2>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002470:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8002472:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8002474:	4301      	orrs	r1, r0
 8002476:	430a      	orrs	r2, r1
 8002478:	e733      	b.n	80022e2 <HAL_DMA_Init+0x1f2>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800247a:	f3c3 6300 	ubfx	r3, r3, #24, #1
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800247e:	2b00      	cmp	r3, #0
 8002480:	f43f af5b 	beq.w	800233a <HAL_DMA_Init+0x24a>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002484:	2340      	movs	r3, #64	@ 0x40
 8002486:	6563      	str	r3, [r4, #84]	@ 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8002488:	2001      	movs	r0, #1
 800248a:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
          return HAL_ERROR;
 800248e:	e6a0      	b.n	80021d2 <HAL_DMA_Init+0xe2>
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002490:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002494:	bf14      	ite	ne
 8002496:	2300      	movne	r3, #0
 8002498:	2301      	moveq	r3, #1
 800249a:	e7f0      	b.n	800247e <HAL_DMA_Init+0x38e>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800249c:	f5b5 5f00 	cmp.w	r5, #8192	@ 0x2000
 80024a0:	d00a      	beq.n	80024b8 <HAL_DMA_Init+0x3c8>
    switch (hdma->Init.FIFOThreshold)
 80024a2:	2802      	cmp	r0, #2
 80024a4:	d9ee      	bls.n	8002484 <HAL_DMA_Init+0x394>
 80024a6:	2803      	cmp	r0, #3
 80024a8:	f47f af47 	bne.w	800233a <HAL_DMA_Init+0x24a>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024ac:	f3c3 6300 	ubfx	r3, r3, #24, #1
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	f43f af42 	beq.w	800233a <HAL_DMA_Init+0x24a>
 80024b6:	e7e5      	b.n	8002484 <HAL_DMA_Init+0x394>
    switch (hdma->Init.FIFOThreshold)
 80024b8:	2803      	cmp	r0, #3
 80024ba:	f63f af3e 	bhi.w	800233a <HAL_DMA_Init+0x24a>
 80024be:	a501      	add	r5, pc, #4	@ (adr r5, 80024c4 <HAL_DMA_Init+0x3d4>)
 80024c0:	f855 f020 	ldr.w	pc, [r5, r0, lsl #2]
 80024c4:	08002485 	.word	0x08002485
 80024c8:	080024d5 	.word	0x080024d5
 80024cc:	08002485 	.word	0x08002485
 80024d0:	080024db 	.word	0x080024db
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024d4:	f3c3 6300 	ubfx	r3, r3, #24, #1
 80024d8:	e7ea      	b.n	80024b0 <HAL_DMA_Init+0x3c0>
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024da:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80024de:	bf14      	ite	ne
 80024e0:	2300      	movne	r3, #0
 80024e2:	2301      	moveq	r3, #1
 80024e4:	e7e4      	b.n	80024b0 <HAL_DMA_Init+0x3c0>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024e6:	2340      	movs	r3, #64	@ 0x40
 80024e8:	6563      	str	r3, [r4, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80024ea:	2303      	movs	r3, #3
 80024ec:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    return HAL_ERROR;
 80024f0:	2001      	movs	r0, #1
 80024f2:	e66e      	b.n	80021d2 <HAL_DMA_Init+0xe2>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80024f4:	2110      	movs	r1, #16
 80024f6:	e6a5      	b.n	8002244 <HAL_DMA_Init+0x154>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80024f8:	2300      	movs	r3, #0
 80024fa:	6063      	str	r3, [r4, #4]
 80024fc:	e7a4      	b.n	8002448 <HAL_DMA_Init+0x358>
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80024fe:	4620      	mov	r0, r4
 8002500:	f7ff fda8 	bl	8002054 <DMA_CalcDMAMUXRequestGenBaseAndMask>
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002504:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8002506:	2200      	movs	r2, #0
 8002508:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800250a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800250c:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 800250e:	605a      	str	r2, [r3, #4]
 8002510:	e7a8      	b.n	8002464 <HAL_DMA_Init+0x374>
    return HAL_ERROR;
 8002512:	2001      	movs	r0, #1
 8002514:	e65d      	b.n	80021d2 <HAL_DMA_Init+0xe2>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002516:	394f      	subs	r1, #79	@ 0x4f
 8002518:	2903      	cmp	r1, #3
 800251a:	f67f aef4 	bls.w	8002306 <HAL_DMA_Init+0x216>
 800251e:	e6f4      	b.n	800230a <HAL_DMA_Init+0x21a>
 8002520:	fe10803f 	.word	0xfe10803f
 8002524:	5c001000 	.word	0x5c001000
 8002528:	ffff0000 	.word	0xffff0000
 800252c:	c3c0003f 	.word	0xc3c0003f
 8002530:	40020010 	.word	0x40020010
 8002534:	40020028 	.word	0x40020028
 8002538:	58025408 	.word	0x58025408
 800253c:	58025494 	.word	0x58025494

08002540 <HAL_DMA_Abort>:
{
 8002540:	b570      	push	{r4, r5, r6, lr}
 8002542:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002544:	f7ff fc14 	bl	8001d70 <HAL_GetTick>
  if(hdma == NULL)
 8002548:	2c00      	cmp	r4, #0
 800254a:	f000 8248 	beq.w	80029de <HAL_DMA_Abort+0x49e>
 800254e:	4605      	mov	r5, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002550:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d006      	beq.n	8002568 <HAL_DMA_Abort+0x28>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800255a:	2380      	movs	r3, #128	@ 0x80
 800255c:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 800255e:	2300      	movs	r3, #0
 8002560:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 8002564:	2001      	movs	r0, #1
}
 8002566:	bd70      	pop	{r4, r5, r6, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002568:	6822      	ldr	r2, [r4, #0]
 800256a:	4b92      	ldr	r3, [pc, #584]	@ (80027b4 <HAL_DMA_Abort+0x274>)
 800256c:	4992      	ldr	r1, [pc, #584]	@ (80027b8 <HAL_DMA_Abort+0x278>)
 800256e:	428a      	cmp	r2, r1
 8002570:	bf18      	it	ne
 8002572:	429a      	cmpne	r2, r3
 8002574:	bf0c      	ite	eq
 8002576:	2301      	moveq	r3, #1
 8002578:	2300      	movne	r3, #0
 800257a:	3118      	adds	r1, #24
 800257c:	428a      	cmp	r2, r1
 800257e:	bf08      	it	eq
 8002580:	f043 0301 	orreq.w	r3, r3, #1
 8002584:	3118      	adds	r1, #24
 8002586:	428a      	cmp	r2, r1
 8002588:	bf08      	it	eq
 800258a:	f043 0301 	orreq.w	r3, r3, #1
 800258e:	3118      	adds	r1, #24
 8002590:	428a      	cmp	r2, r1
 8002592:	bf08      	it	eq
 8002594:	f043 0301 	orreq.w	r3, r3, #1
 8002598:	3118      	adds	r1, #24
 800259a:	428a      	cmp	r2, r1
 800259c:	bf08      	it	eq
 800259e:	f043 0301 	orreq.w	r3, r3, #1
 80025a2:	3118      	adds	r1, #24
 80025a4:	428a      	cmp	r2, r1
 80025a6:	bf08      	it	eq
 80025a8:	f043 0301 	orreq.w	r3, r3, #1
 80025ac:	3118      	adds	r1, #24
 80025ae:	428a      	cmp	r2, r1
 80025b0:	bf08      	it	eq
 80025b2:	f043 0301 	orreq.w	r3, r3, #1
 80025b6:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 80025ba:	428a      	cmp	r2, r1
 80025bc:	bf08      	it	eq
 80025be:	f043 0301 	orreq.w	r3, r3, #1
 80025c2:	3118      	adds	r1, #24
 80025c4:	428a      	cmp	r2, r1
 80025c6:	bf08      	it	eq
 80025c8:	f043 0301 	orreq.w	r3, r3, #1
 80025cc:	3118      	adds	r1, #24
 80025ce:	428a      	cmp	r2, r1
 80025d0:	bf08      	it	eq
 80025d2:	f043 0301 	orreq.w	r3, r3, #1
 80025d6:	3118      	adds	r1, #24
 80025d8:	428a      	cmp	r2, r1
 80025da:	bf08      	it	eq
 80025dc:	f043 0301 	orreq.w	r3, r3, #1
 80025e0:	3118      	adds	r1, #24
 80025e2:	428a      	cmp	r2, r1
 80025e4:	bf08      	it	eq
 80025e6:	f043 0301 	orreq.w	r3, r3, #1
 80025ea:	3118      	adds	r1, #24
 80025ec:	428a      	cmp	r2, r1
 80025ee:	bf08      	it	eq
 80025f0:	f043 0301 	orreq.w	r3, r3, #1
 80025f4:	3118      	adds	r1, #24
 80025f6:	428a      	cmp	r2, r1
 80025f8:	bf08      	it	eq
 80025fa:	f043 0301 	orreq.w	r3, r3, #1
 80025fe:	b91b      	cbnz	r3, 8002608 <HAL_DMA_Abort+0xc8>
 8002600:	4b6e      	ldr	r3, [pc, #440]	@ (80027bc <HAL_DMA_Abort+0x27c>)
 8002602:	429a      	cmp	r2, r3
 8002604:	f040 80f7 	bne.w	80027f6 <HAL_DMA_Abort+0x2b6>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002608:	6813      	ldr	r3, [r2, #0]
 800260a:	f023 031e 	bic.w	r3, r3, #30
 800260e:	6013      	str	r3, [r2, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002610:	6822      	ldr	r2, [r4, #0]
 8002612:	6953      	ldr	r3, [r2, #20]
 8002614:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002618:	6153      	str	r3, [r2, #20]
      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800261a:	6826      	ldr	r6, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800261c:	6822      	ldr	r2, [r4, #0]
 800261e:	4b65      	ldr	r3, [pc, #404]	@ (80027b4 <HAL_DMA_Abort+0x274>)
 8002620:	4965      	ldr	r1, [pc, #404]	@ (80027b8 <HAL_DMA_Abort+0x278>)
 8002622:	428a      	cmp	r2, r1
 8002624:	bf18      	it	ne
 8002626:	429a      	cmpne	r2, r3
 8002628:	bf0c      	ite	eq
 800262a:	2301      	moveq	r3, #1
 800262c:	2300      	movne	r3, #0
 800262e:	3118      	adds	r1, #24
 8002630:	428a      	cmp	r2, r1
 8002632:	bf08      	it	eq
 8002634:	f043 0301 	orreq.w	r3, r3, #1
 8002638:	3118      	adds	r1, #24
 800263a:	428a      	cmp	r2, r1
 800263c:	bf08      	it	eq
 800263e:	f043 0301 	orreq.w	r3, r3, #1
 8002642:	3118      	adds	r1, #24
 8002644:	428a      	cmp	r2, r1
 8002646:	bf08      	it	eq
 8002648:	f043 0301 	orreq.w	r3, r3, #1
 800264c:	3118      	adds	r1, #24
 800264e:	428a      	cmp	r2, r1
 8002650:	bf08      	it	eq
 8002652:	f043 0301 	orreq.w	r3, r3, #1
 8002656:	3118      	adds	r1, #24
 8002658:	428a      	cmp	r2, r1
 800265a:	bf08      	it	eq
 800265c:	f043 0301 	orreq.w	r3, r3, #1
 8002660:	3118      	adds	r1, #24
 8002662:	428a      	cmp	r2, r1
 8002664:	bf08      	it	eq
 8002666:	f043 0301 	orreq.w	r3, r3, #1
 800266a:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 800266e:	428a      	cmp	r2, r1
 8002670:	bf08      	it	eq
 8002672:	f043 0301 	orreq.w	r3, r3, #1
 8002676:	3118      	adds	r1, #24
 8002678:	428a      	cmp	r2, r1
 800267a:	bf08      	it	eq
 800267c:	f043 0301 	orreq.w	r3, r3, #1
 8002680:	3118      	adds	r1, #24
 8002682:	428a      	cmp	r2, r1
 8002684:	bf08      	it	eq
 8002686:	f043 0301 	orreq.w	r3, r3, #1
 800268a:	3118      	adds	r1, #24
 800268c:	428a      	cmp	r2, r1
 800268e:	bf08      	it	eq
 8002690:	f043 0301 	orreq.w	r3, r3, #1
 8002694:	3118      	adds	r1, #24
 8002696:	428a      	cmp	r2, r1
 8002698:	bf08      	it	eq
 800269a:	f043 0301 	orreq.w	r3, r3, #1
 800269e:	3118      	adds	r1, #24
 80026a0:	428a      	cmp	r2, r1
 80026a2:	bf08      	it	eq
 80026a4:	f043 0301 	orreq.w	r3, r3, #1
 80026a8:	3118      	adds	r1, #24
 80026aa:	428a      	cmp	r2, r1
 80026ac:	bf08      	it	eq
 80026ae:	f043 0301 	orreq.w	r3, r3, #1
 80026b2:	3118      	adds	r1, #24
 80026b4:	428a      	cmp	r2, r1
 80026b6:	bf08      	it	eq
 80026b8:	f043 0301 	orreq.w	r3, r3, #1
 80026bc:	4940      	ldr	r1, [pc, #256]	@ (80027c0 <HAL_DMA_Abort+0x280>)
 80026be:	428a      	cmp	r2, r1
 80026c0:	bf08      	it	eq
 80026c2:	f043 0301 	orreq.w	r3, r3, #1
 80026c6:	3114      	adds	r1, #20
 80026c8:	428a      	cmp	r2, r1
 80026ca:	bf08      	it	eq
 80026cc:	f043 0301 	orreq.w	r3, r3, #1
 80026d0:	3114      	adds	r1, #20
 80026d2:	428a      	cmp	r2, r1
 80026d4:	bf08      	it	eq
 80026d6:	f043 0301 	orreq.w	r3, r3, #1
 80026da:	3114      	adds	r1, #20
 80026dc:	428a      	cmp	r2, r1
 80026de:	bf08      	it	eq
 80026e0:	f043 0301 	orreq.w	r3, r3, #1
 80026e4:	3114      	adds	r1, #20
 80026e6:	428a      	cmp	r2, r1
 80026e8:	bf08      	it	eq
 80026ea:	f043 0301 	orreq.w	r3, r3, #1
 80026ee:	3114      	adds	r1, #20
 80026f0:	428a      	cmp	r2, r1
 80026f2:	bf08      	it	eq
 80026f4:	f043 0301 	orreq.w	r3, r3, #1
 80026f8:	3114      	adds	r1, #20
 80026fa:	428a      	cmp	r2, r1
 80026fc:	bf08      	it	eq
 80026fe:	f043 0301 	orreq.w	r3, r3, #1
 8002702:	b913      	cbnz	r3, 800270a <HAL_DMA_Abort+0x1ca>
 8002704:	4b2f      	ldr	r3, [pc, #188]	@ (80027c4 <HAL_DMA_Abort+0x284>)
 8002706:	429a      	cmp	r2, r3
 8002708:	d104      	bne.n	8002714 <HAL_DMA_Abort+0x1d4>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800270a:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800270c:	6813      	ldr	r3, [r2, #0]
 800270e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002712:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002714:	6822      	ldr	r2, [r4, #0]
 8002716:	4b27      	ldr	r3, [pc, #156]	@ (80027b4 <HAL_DMA_Abort+0x274>)
 8002718:	4927      	ldr	r1, [pc, #156]	@ (80027b8 <HAL_DMA_Abort+0x278>)
 800271a:	428a      	cmp	r2, r1
 800271c:	bf18      	it	ne
 800271e:	429a      	cmpne	r2, r3
 8002720:	bf0c      	ite	eq
 8002722:	2301      	moveq	r3, #1
 8002724:	2300      	movne	r3, #0
 8002726:	3118      	adds	r1, #24
 8002728:	428a      	cmp	r2, r1
 800272a:	bf08      	it	eq
 800272c:	f043 0301 	orreq.w	r3, r3, #1
 8002730:	3118      	adds	r1, #24
 8002732:	428a      	cmp	r2, r1
 8002734:	bf08      	it	eq
 8002736:	f043 0301 	orreq.w	r3, r3, #1
 800273a:	3118      	adds	r1, #24
 800273c:	428a      	cmp	r2, r1
 800273e:	bf08      	it	eq
 8002740:	f043 0301 	orreq.w	r3, r3, #1
 8002744:	3118      	adds	r1, #24
 8002746:	428a      	cmp	r2, r1
 8002748:	bf08      	it	eq
 800274a:	f043 0301 	orreq.w	r3, r3, #1
 800274e:	3118      	adds	r1, #24
 8002750:	428a      	cmp	r2, r1
 8002752:	bf08      	it	eq
 8002754:	f043 0301 	orreq.w	r3, r3, #1
 8002758:	3118      	adds	r1, #24
 800275a:	428a      	cmp	r2, r1
 800275c:	bf08      	it	eq
 800275e:	f043 0301 	orreq.w	r3, r3, #1
 8002762:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 8002766:	428a      	cmp	r2, r1
 8002768:	bf08      	it	eq
 800276a:	f043 0301 	orreq.w	r3, r3, #1
 800276e:	3118      	adds	r1, #24
 8002770:	428a      	cmp	r2, r1
 8002772:	bf08      	it	eq
 8002774:	f043 0301 	orreq.w	r3, r3, #1
 8002778:	3118      	adds	r1, #24
 800277a:	428a      	cmp	r2, r1
 800277c:	bf08      	it	eq
 800277e:	f043 0301 	orreq.w	r3, r3, #1
 8002782:	3118      	adds	r1, #24
 8002784:	428a      	cmp	r2, r1
 8002786:	bf08      	it	eq
 8002788:	f043 0301 	orreq.w	r3, r3, #1
 800278c:	3118      	adds	r1, #24
 800278e:	428a      	cmp	r2, r1
 8002790:	bf08      	it	eq
 8002792:	f043 0301 	orreq.w	r3, r3, #1
 8002796:	3118      	adds	r1, #24
 8002798:	428a      	cmp	r2, r1
 800279a:	bf08      	it	eq
 800279c:	f043 0301 	orreq.w	r3, r3, #1
 80027a0:	3118      	adds	r1, #24
 80027a2:	428a      	cmp	r2, r1
 80027a4:	bf08      	it	eq
 80027a6:	f043 0301 	orreq.w	r3, r3, #1
 80027aa:	b96b      	cbnz	r3, 80027c8 <HAL_DMA_Abort+0x288>
 80027ac:	4b03      	ldr	r3, [pc, #12]	@ (80027bc <HAL_DMA_Abort+0x27c>)
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d127      	bne.n	8002802 <HAL_DMA_Abort+0x2c2>
 80027b2:	e009      	b.n	80027c8 <HAL_DMA_Abort+0x288>
 80027b4:	40020010 	.word	0x40020010
 80027b8:	40020028 	.word	0x40020028
 80027bc:	400204b8 	.word	0x400204b8
 80027c0:	58025408 	.word	0x58025408
 80027c4:	58025494 	.word	0x58025494
 80027c8:	6813      	ldr	r3, [r2, #0]
 80027ca:	f023 0301 	bic.w	r3, r3, #1
 80027ce:	6013      	str	r3, [r2, #0]
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80027d0:	6833      	ldr	r3, [r6, #0]
 80027d2:	f013 0f01 	tst.w	r3, #1
 80027d6:	d019      	beq.n	800280c <HAL_DMA_Abort+0x2cc>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027d8:	f7ff faca 	bl	8001d70 <HAL_GetTick>
 80027dc:	1b40      	subs	r0, r0, r5
 80027de:	2805      	cmp	r0, #5
 80027e0:	d9f6      	bls.n	80027d0 <HAL_DMA_Abort+0x290>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027e2:	2320      	movs	r3, #32
 80027e4:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 80027e6:	2303      	movs	r3, #3
 80027e8:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 80027ec:	2300      	movs	r3, #0
 80027ee:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        return HAL_ERROR;
 80027f2:	2001      	movs	r0, #1
 80027f4:	e6b7      	b.n	8002566 <HAL_DMA_Abort+0x26>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80027f6:	6813      	ldr	r3, [r2, #0]
 80027f8:	f023 030e 	bic.w	r3, r3, #14
 80027fc:	6013      	str	r3, [r2, #0]
      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80027fe:	6826      	ldr	r6, [r4, #0]
 8002800:	e70c      	b.n	800261c <HAL_DMA_Abort+0xdc>
    __HAL_DMA_DISABLE(hdma);
 8002802:	6813      	ldr	r3, [r2, #0]
 8002804:	f023 0301 	bic.w	r3, r3, #1
 8002808:	6013      	str	r3, [r2, #0]
 800280a:	e7e1      	b.n	80027d0 <HAL_DMA_Abort+0x290>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800280c:	6822      	ldr	r2, [r4, #0]
 800280e:	4b75      	ldr	r3, [pc, #468]	@ (80029e4 <HAL_DMA_Abort+0x4a4>)
 8002810:	4975      	ldr	r1, [pc, #468]	@ (80029e8 <HAL_DMA_Abort+0x4a8>)
 8002812:	428a      	cmp	r2, r1
 8002814:	bf18      	it	ne
 8002816:	429a      	cmpne	r2, r3
 8002818:	bf0c      	ite	eq
 800281a:	2301      	moveq	r3, #1
 800281c:	2300      	movne	r3, #0
 800281e:	3118      	adds	r1, #24
 8002820:	428a      	cmp	r2, r1
 8002822:	bf08      	it	eq
 8002824:	f043 0301 	orreq.w	r3, r3, #1
 8002828:	3118      	adds	r1, #24
 800282a:	428a      	cmp	r2, r1
 800282c:	bf08      	it	eq
 800282e:	f043 0301 	orreq.w	r3, r3, #1
 8002832:	3118      	adds	r1, #24
 8002834:	428a      	cmp	r2, r1
 8002836:	bf08      	it	eq
 8002838:	f043 0301 	orreq.w	r3, r3, #1
 800283c:	3118      	adds	r1, #24
 800283e:	428a      	cmp	r2, r1
 8002840:	bf08      	it	eq
 8002842:	f043 0301 	orreq.w	r3, r3, #1
 8002846:	3118      	adds	r1, #24
 8002848:	428a      	cmp	r2, r1
 800284a:	bf08      	it	eq
 800284c:	f043 0301 	orreq.w	r3, r3, #1
 8002850:	3118      	adds	r1, #24
 8002852:	428a      	cmp	r2, r1
 8002854:	bf08      	it	eq
 8002856:	f043 0301 	orreq.w	r3, r3, #1
 800285a:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 800285e:	428a      	cmp	r2, r1
 8002860:	bf08      	it	eq
 8002862:	f043 0301 	orreq.w	r3, r3, #1
 8002866:	3118      	adds	r1, #24
 8002868:	428a      	cmp	r2, r1
 800286a:	bf08      	it	eq
 800286c:	f043 0301 	orreq.w	r3, r3, #1
 8002870:	3118      	adds	r1, #24
 8002872:	428a      	cmp	r2, r1
 8002874:	bf08      	it	eq
 8002876:	f043 0301 	orreq.w	r3, r3, #1
 800287a:	3118      	adds	r1, #24
 800287c:	428a      	cmp	r2, r1
 800287e:	bf08      	it	eq
 8002880:	f043 0301 	orreq.w	r3, r3, #1
 8002884:	3118      	adds	r1, #24
 8002886:	428a      	cmp	r2, r1
 8002888:	bf08      	it	eq
 800288a:	f043 0301 	orreq.w	r3, r3, #1
 800288e:	3118      	adds	r1, #24
 8002890:	428a      	cmp	r2, r1
 8002892:	bf08      	it	eq
 8002894:	f043 0301 	orreq.w	r3, r3, #1
 8002898:	3118      	adds	r1, #24
 800289a:	428a      	cmp	r2, r1
 800289c:	bf08      	it	eq
 800289e:	f043 0301 	orreq.w	r3, r3, #1
 80028a2:	b91b      	cbnz	r3, 80028ac <HAL_DMA_Abort+0x36c>
 80028a4:	4b51      	ldr	r3, [pc, #324]	@ (80029ec <HAL_DMA_Abort+0x4ac>)
 80028a6:	429a      	cmp	r2, r3
 80028a8:	f040 8091 	bne.w	80029ce <HAL_DMA_Abort+0x48e>
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028ac:	6da1      	ldr	r1, [r4, #88]	@ 0x58
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80028ae:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80028b0:	f003 021f 	and.w	r2, r3, #31
 80028b4:	233f      	movs	r3, #63	@ 0x3f
 80028b6:	4093      	lsls	r3, r2
 80028b8:	608b      	str	r3, [r1, #8]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80028ba:	6822      	ldr	r2, [r4, #0]
 80028bc:	4b49      	ldr	r3, [pc, #292]	@ (80029e4 <HAL_DMA_Abort+0x4a4>)
 80028be:	494a      	ldr	r1, [pc, #296]	@ (80029e8 <HAL_DMA_Abort+0x4a8>)
 80028c0:	428a      	cmp	r2, r1
 80028c2:	bf18      	it	ne
 80028c4:	429a      	cmpne	r2, r3
 80028c6:	bf0c      	ite	eq
 80028c8:	2301      	moveq	r3, #1
 80028ca:	2300      	movne	r3, #0
 80028cc:	3118      	adds	r1, #24
 80028ce:	428a      	cmp	r2, r1
 80028d0:	bf08      	it	eq
 80028d2:	f043 0301 	orreq.w	r3, r3, #1
 80028d6:	3118      	adds	r1, #24
 80028d8:	428a      	cmp	r2, r1
 80028da:	bf08      	it	eq
 80028dc:	f043 0301 	orreq.w	r3, r3, #1
 80028e0:	3118      	adds	r1, #24
 80028e2:	428a      	cmp	r2, r1
 80028e4:	bf08      	it	eq
 80028e6:	f043 0301 	orreq.w	r3, r3, #1
 80028ea:	3118      	adds	r1, #24
 80028ec:	428a      	cmp	r2, r1
 80028ee:	bf08      	it	eq
 80028f0:	f043 0301 	orreq.w	r3, r3, #1
 80028f4:	3118      	adds	r1, #24
 80028f6:	428a      	cmp	r2, r1
 80028f8:	bf08      	it	eq
 80028fa:	f043 0301 	orreq.w	r3, r3, #1
 80028fe:	3118      	adds	r1, #24
 8002900:	428a      	cmp	r2, r1
 8002902:	bf08      	it	eq
 8002904:	f043 0301 	orreq.w	r3, r3, #1
 8002908:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 800290c:	428a      	cmp	r2, r1
 800290e:	bf08      	it	eq
 8002910:	f043 0301 	orreq.w	r3, r3, #1
 8002914:	3118      	adds	r1, #24
 8002916:	428a      	cmp	r2, r1
 8002918:	bf08      	it	eq
 800291a:	f043 0301 	orreq.w	r3, r3, #1
 800291e:	3118      	adds	r1, #24
 8002920:	428a      	cmp	r2, r1
 8002922:	bf08      	it	eq
 8002924:	f043 0301 	orreq.w	r3, r3, #1
 8002928:	3118      	adds	r1, #24
 800292a:	428a      	cmp	r2, r1
 800292c:	bf08      	it	eq
 800292e:	f043 0301 	orreq.w	r3, r3, #1
 8002932:	3118      	adds	r1, #24
 8002934:	428a      	cmp	r2, r1
 8002936:	bf08      	it	eq
 8002938:	f043 0301 	orreq.w	r3, r3, #1
 800293c:	3118      	adds	r1, #24
 800293e:	428a      	cmp	r2, r1
 8002940:	bf08      	it	eq
 8002942:	f043 0301 	orreq.w	r3, r3, #1
 8002946:	3118      	adds	r1, #24
 8002948:	428a      	cmp	r2, r1
 800294a:	bf08      	it	eq
 800294c:	f043 0301 	orreq.w	r3, r3, #1
 8002950:	3118      	adds	r1, #24
 8002952:	428a      	cmp	r2, r1
 8002954:	bf08      	it	eq
 8002956:	f043 0301 	orreq.w	r3, r3, #1
 800295a:	4925      	ldr	r1, [pc, #148]	@ (80029f0 <HAL_DMA_Abort+0x4b0>)
 800295c:	428a      	cmp	r2, r1
 800295e:	bf08      	it	eq
 8002960:	f043 0301 	orreq.w	r3, r3, #1
 8002964:	3114      	adds	r1, #20
 8002966:	428a      	cmp	r2, r1
 8002968:	bf08      	it	eq
 800296a:	f043 0301 	orreq.w	r3, r3, #1
 800296e:	3114      	adds	r1, #20
 8002970:	428a      	cmp	r2, r1
 8002972:	bf08      	it	eq
 8002974:	f043 0301 	orreq.w	r3, r3, #1
 8002978:	3114      	adds	r1, #20
 800297a:	428a      	cmp	r2, r1
 800297c:	bf08      	it	eq
 800297e:	f043 0301 	orreq.w	r3, r3, #1
 8002982:	3114      	adds	r1, #20
 8002984:	428a      	cmp	r2, r1
 8002986:	bf08      	it	eq
 8002988:	f043 0301 	orreq.w	r3, r3, #1
 800298c:	3114      	adds	r1, #20
 800298e:	428a      	cmp	r2, r1
 8002990:	bf08      	it	eq
 8002992:	f043 0301 	orreq.w	r3, r3, #1
 8002996:	3114      	adds	r1, #20
 8002998:	428a      	cmp	r2, r1
 800299a:	bf08      	it	eq
 800299c:	f043 0301 	orreq.w	r3, r3, #1
 80029a0:	b913      	cbnz	r3, 80029a8 <HAL_DMA_Abort+0x468>
 80029a2:	4b14      	ldr	r3, [pc, #80]	@ (80029f4 <HAL_DMA_Abort+0x4b4>)
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d10b      	bne.n	80029c0 <HAL_DMA_Abort+0x480>
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80029aa:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 80029ac:	605a      	str	r2, [r3, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 80029ae:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 80029b0:	b133      	cbz	r3, 80029c0 <HAL_DMA_Abort+0x480>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029b8:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029ba:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80029bc:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 80029be:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80029c0:	2301      	movs	r3, #1
 80029c2:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 80029c6:	2000      	movs	r0, #0
 80029c8:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  return HAL_OK;
 80029cc:	e5cb      	b.n	8002566 <HAL_DMA_Abort+0x26>
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80029ce:	6da1      	ldr	r1, [r4, #88]	@ 0x58
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80029d0:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80029d2:	f003 021f 	and.w	r2, r3, #31
 80029d6:	2301      	movs	r3, #1
 80029d8:	4093      	lsls	r3, r2
 80029da:	604b      	str	r3, [r1, #4]
 80029dc:	e76d      	b.n	80028ba <HAL_DMA_Abort+0x37a>
    return HAL_ERROR;
 80029de:	2001      	movs	r0, #1
 80029e0:	e5c1      	b.n	8002566 <HAL_DMA_Abort+0x26>
 80029e2:	bf00      	nop
 80029e4:	40020010 	.word	0x40020010
 80029e8:	40020028 	.word	0x40020028
 80029ec:	400204b8 	.word	0x400204b8
 80029f0:	58025408 	.word	0x58025408
 80029f4:	58025494 	.word	0x58025494

080029f8 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 80029f8:	2800      	cmp	r0, #0
 80029fa:	f000 8162 	beq.w	8002cc2 <HAL_DMA_Abort_IT+0x2ca>
{
 80029fe:	b508      	push	{r3, lr}
 8002a00:	4601      	mov	r1, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a02:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d003      	beq.n	8002a14 <HAL_DMA_Abort_IT+0x1c>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a0c:	2380      	movs	r3, #128	@ 0x80
 8002a0e:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 8002a10:	2001      	movs	r0, #1
}
 8002a12:	bd08      	pop	{r3, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a14:	6802      	ldr	r2, [r0, #0]
 8002a16:	4b2b      	ldr	r3, [pc, #172]	@ (8002ac4 <HAL_DMA_Abort_IT+0xcc>)
 8002a18:	482b      	ldr	r0, [pc, #172]	@ (8002ac8 <HAL_DMA_Abort_IT+0xd0>)
 8002a1a:	4282      	cmp	r2, r0
 8002a1c:	bf18      	it	ne
 8002a1e:	429a      	cmpne	r2, r3
 8002a20:	bf0c      	ite	eq
 8002a22:	2301      	moveq	r3, #1
 8002a24:	2300      	movne	r3, #0
 8002a26:	3018      	adds	r0, #24
 8002a28:	4282      	cmp	r2, r0
 8002a2a:	bf08      	it	eq
 8002a2c:	f043 0301 	orreq.w	r3, r3, #1
 8002a30:	3018      	adds	r0, #24
 8002a32:	4282      	cmp	r2, r0
 8002a34:	bf08      	it	eq
 8002a36:	f043 0301 	orreq.w	r3, r3, #1
 8002a3a:	3018      	adds	r0, #24
 8002a3c:	4282      	cmp	r2, r0
 8002a3e:	bf08      	it	eq
 8002a40:	f043 0301 	orreq.w	r3, r3, #1
 8002a44:	3018      	adds	r0, #24
 8002a46:	4282      	cmp	r2, r0
 8002a48:	bf08      	it	eq
 8002a4a:	f043 0301 	orreq.w	r3, r3, #1
 8002a4e:	3018      	adds	r0, #24
 8002a50:	4282      	cmp	r2, r0
 8002a52:	bf08      	it	eq
 8002a54:	f043 0301 	orreq.w	r3, r3, #1
 8002a58:	3018      	adds	r0, #24
 8002a5a:	4282      	cmp	r2, r0
 8002a5c:	bf08      	it	eq
 8002a5e:	f043 0301 	orreq.w	r3, r3, #1
 8002a62:	f500 7056 	add.w	r0, r0, #856	@ 0x358
 8002a66:	4282      	cmp	r2, r0
 8002a68:	bf08      	it	eq
 8002a6a:	f043 0301 	orreq.w	r3, r3, #1
 8002a6e:	3018      	adds	r0, #24
 8002a70:	4282      	cmp	r2, r0
 8002a72:	bf08      	it	eq
 8002a74:	f043 0301 	orreq.w	r3, r3, #1
 8002a78:	3018      	adds	r0, #24
 8002a7a:	4282      	cmp	r2, r0
 8002a7c:	bf08      	it	eq
 8002a7e:	f043 0301 	orreq.w	r3, r3, #1
 8002a82:	3018      	adds	r0, #24
 8002a84:	4282      	cmp	r2, r0
 8002a86:	bf08      	it	eq
 8002a88:	f043 0301 	orreq.w	r3, r3, #1
 8002a8c:	3018      	adds	r0, #24
 8002a8e:	4282      	cmp	r2, r0
 8002a90:	bf08      	it	eq
 8002a92:	f043 0301 	orreq.w	r3, r3, #1
 8002a96:	3018      	adds	r0, #24
 8002a98:	4282      	cmp	r2, r0
 8002a9a:	bf08      	it	eq
 8002a9c:	f043 0301 	orreq.w	r3, r3, #1
 8002aa0:	3018      	adds	r0, #24
 8002aa2:	4282      	cmp	r2, r0
 8002aa4:	bf08      	it	eq
 8002aa6:	f043 0301 	orreq.w	r3, r3, #1
 8002aaa:	b913      	cbnz	r3, 8002ab2 <HAL_DMA_Abort_IT+0xba>
 8002aac:	4b07      	ldr	r3, [pc, #28]	@ (8002acc <HAL_DMA_Abort_IT+0xd4>)
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d10e      	bne.n	8002ad0 <HAL_DMA_Abort_IT+0xd8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ab2:	2304      	movs	r3, #4
 8002ab4:	f881 3035 	strb.w	r3, [r1, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 8002ab8:	6813      	ldr	r3, [r2, #0]
 8002aba:	f023 0301 	bic.w	r3, r3, #1
 8002abe:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8002ac0:	2000      	movs	r0, #0
      __HAL_DMA_DISABLE(hdma);
 8002ac2:	e7a6      	b.n	8002a12 <HAL_DMA_Abort_IT+0x1a>
 8002ac4:	40020010 	.word	0x40020010
 8002ac8:	40020028 	.word	0x40020028
 8002acc:	400204b8 	.word	0x400204b8
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002ad0:	6813      	ldr	r3, [r2, #0]
 8002ad2:	f023 030e 	bic.w	r3, r3, #14
 8002ad6:	6013      	str	r3, [r2, #0]
      __HAL_DMA_DISABLE(hdma);
 8002ad8:	680a      	ldr	r2, [r1, #0]
 8002ada:	4b7c      	ldr	r3, [pc, #496]	@ (8002ccc <HAL_DMA_Abort_IT+0x2d4>)
 8002adc:	f5a0 608f 	sub.w	r0, r0, #1144	@ 0x478
 8002ae0:	4282      	cmp	r2, r0
 8002ae2:	bf18      	it	ne
 8002ae4:	429a      	cmpne	r2, r3
 8002ae6:	bf0c      	ite	eq
 8002ae8:	2301      	moveq	r3, #1
 8002aea:	2300      	movne	r3, #0
 8002aec:	3018      	adds	r0, #24
 8002aee:	4282      	cmp	r2, r0
 8002af0:	bf08      	it	eq
 8002af2:	f043 0301 	orreq.w	r3, r3, #1
 8002af6:	3018      	adds	r0, #24
 8002af8:	4282      	cmp	r2, r0
 8002afa:	bf08      	it	eq
 8002afc:	f043 0301 	orreq.w	r3, r3, #1
 8002b00:	3018      	adds	r0, #24
 8002b02:	4282      	cmp	r2, r0
 8002b04:	bf08      	it	eq
 8002b06:	f043 0301 	orreq.w	r3, r3, #1
 8002b0a:	3018      	adds	r0, #24
 8002b0c:	4282      	cmp	r2, r0
 8002b0e:	bf08      	it	eq
 8002b10:	f043 0301 	orreq.w	r3, r3, #1
 8002b14:	3018      	adds	r0, #24
 8002b16:	4282      	cmp	r2, r0
 8002b18:	bf08      	it	eq
 8002b1a:	f043 0301 	orreq.w	r3, r3, #1
 8002b1e:	3018      	adds	r0, #24
 8002b20:	4282      	cmp	r2, r0
 8002b22:	bf08      	it	eq
 8002b24:	f043 0301 	orreq.w	r3, r3, #1
 8002b28:	f500 7056 	add.w	r0, r0, #856	@ 0x358
 8002b2c:	4282      	cmp	r2, r0
 8002b2e:	bf08      	it	eq
 8002b30:	f043 0301 	orreq.w	r3, r3, #1
 8002b34:	3018      	adds	r0, #24
 8002b36:	4282      	cmp	r2, r0
 8002b38:	bf08      	it	eq
 8002b3a:	f043 0301 	orreq.w	r3, r3, #1
 8002b3e:	3018      	adds	r0, #24
 8002b40:	4282      	cmp	r2, r0
 8002b42:	bf08      	it	eq
 8002b44:	f043 0301 	orreq.w	r3, r3, #1
 8002b48:	3018      	adds	r0, #24
 8002b4a:	4282      	cmp	r2, r0
 8002b4c:	bf08      	it	eq
 8002b4e:	f043 0301 	orreq.w	r3, r3, #1
 8002b52:	3018      	adds	r0, #24
 8002b54:	4282      	cmp	r2, r0
 8002b56:	bf08      	it	eq
 8002b58:	f043 0301 	orreq.w	r3, r3, #1
 8002b5c:	3018      	adds	r0, #24
 8002b5e:	4282      	cmp	r2, r0
 8002b60:	bf08      	it	eq
 8002b62:	f043 0301 	orreq.w	r3, r3, #1
 8002b66:	3018      	adds	r0, #24
 8002b68:	4282      	cmp	r2, r0
 8002b6a:	bf08      	it	eq
 8002b6c:	f043 0301 	orreq.w	r3, r3, #1
 8002b70:	b91b      	cbnz	r3, 8002b7a <HAL_DMA_Abort_IT+0x182>
 8002b72:	4b57      	ldr	r3, [pc, #348]	@ (8002cd0 <HAL_DMA_Abort_IT+0x2d8>)
 8002b74:	429a      	cmp	r2, r3
 8002b76:	f040 809f 	bne.w	8002cb8 <HAL_DMA_Abort_IT+0x2c0>
 8002b7a:	6813      	ldr	r3, [r2, #0]
 8002b7c:	f023 0301 	bic.w	r3, r3, #1
 8002b80:	6013      	str	r3, [r2, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002b82:	680a      	ldr	r2, [r1, #0]
 8002b84:	4b51      	ldr	r3, [pc, #324]	@ (8002ccc <HAL_DMA_Abort_IT+0x2d4>)
 8002b86:	4853      	ldr	r0, [pc, #332]	@ (8002cd4 <HAL_DMA_Abort_IT+0x2dc>)
 8002b88:	4282      	cmp	r2, r0
 8002b8a:	bf18      	it	ne
 8002b8c:	429a      	cmpne	r2, r3
 8002b8e:	bf0c      	ite	eq
 8002b90:	2301      	moveq	r3, #1
 8002b92:	2300      	movne	r3, #0
 8002b94:	3018      	adds	r0, #24
 8002b96:	4282      	cmp	r2, r0
 8002b98:	bf08      	it	eq
 8002b9a:	f043 0301 	orreq.w	r3, r3, #1
 8002b9e:	3018      	adds	r0, #24
 8002ba0:	4282      	cmp	r2, r0
 8002ba2:	bf08      	it	eq
 8002ba4:	f043 0301 	orreq.w	r3, r3, #1
 8002ba8:	3018      	adds	r0, #24
 8002baa:	4282      	cmp	r2, r0
 8002bac:	bf08      	it	eq
 8002bae:	f043 0301 	orreq.w	r3, r3, #1
 8002bb2:	3018      	adds	r0, #24
 8002bb4:	4282      	cmp	r2, r0
 8002bb6:	bf08      	it	eq
 8002bb8:	f043 0301 	orreq.w	r3, r3, #1
 8002bbc:	3018      	adds	r0, #24
 8002bbe:	4282      	cmp	r2, r0
 8002bc0:	bf08      	it	eq
 8002bc2:	f043 0301 	orreq.w	r3, r3, #1
 8002bc6:	3018      	adds	r0, #24
 8002bc8:	4282      	cmp	r2, r0
 8002bca:	bf08      	it	eq
 8002bcc:	f043 0301 	orreq.w	r3, r3, #1
 8002bd0:	f500 7056 	add.w	r0, r0, #856	@ 0x358
 8002bd4:	4282      	cmp	r2, r0
 8002bd6:	bf08      	it	eq
 8002bd8:	f043 0301 	orreq.w	r3, r3, #1
 8002bdc:	3018      	adds	r0, #24
 8002bde:	4282      	cmp	r2, r0
 8002be0:	bf08      	it	eq
 8002be2:	f043 0301 	orreq.w	r3, r3, #1
 8002be6:	3018      	adds	r0, #24
 8002be8:	4282      	cmp	r2, r0
 8002bea:	bf08      	it	eq
 8002bec:	f043 0301 	orreq.w	r3, r3, #1
 8002bf0:	3018      	adds	r0, #24
 8002bf2:	4282      	cmp	r2, r0
 8002bf4:	bf08      	it	eq
 8002bf6:	f043 0301 	orreq.w	r3, r3, #1
 8002bfa:	3018      	adds	r0, #24
 8002bfc:	4282      	cmp	r2, r0
 8002bfe:	bf08      	it	eq
 8002c00:	f043 0301 	orreq.w	r3, r3, #1
 8002c04:	3018      	adds	r0, #24
 8002c06:	4282      	cmp	r2, r0
 8002c08:	bf08      	it	eq
 8002c0a:	f043 0301 	orreq.w	r3, r3, #1
 8002c0e:	3018      	adds	r0, #24
 8002c10:	4282      	cmp	r2, r0
 8002c12:	bf08      	it	eq
 8002c14:	f043 0301 	orreq.w	r3, r3, #1
 8002c18:	3018      	adds	r0, #24
 8002c1a:	4282      	cmp	r2, r0
 8002c1c:	bf08      	it	eq
 8002c1e:	f043 0301 	orreq.w	r3, r3, #1
 8002c22:	482d      	ldr	r0, [pc, #180]	@ (8002cd8 <HAL_DMA_Abort_IT+0x2e0>)
 8002c24:	4282      	cmp	r2, r0
 8002c26:	bf08      	it	eq
 8002c28:	f043 0301 	orreq.w	r3, r3, #1
 8002c2c:	3014      	adds	r0, #20
 8002c2e:	4282      	cmp	r2, r0
 8002c30:	bf08      	it	eq
 8002c32:	f043 0301 	orreq.w	r3, r3, #1
 8002c36:	3014      	adds	r0, #20
 8002c38:	4282      	cmp	r2, r0
 8002c3a:	bf08      	it	eq
 8002c3c:	f043 0301 	orreq.w	r3, r3, #1
 8002c40:	3014      	adds	r0, #20
 8002c42:	4282      	cmp	r2, r0
 8002c44:	bf08      	it	eq
 8002c46:	f043 0301 	orreq.w	r3, r3, #1
 8002c4a:	3014      	adds	r0, #20
 8002c4c:	4282      	cmp	r2, r0
 8002c4e:	bf08      	it	eq
 8002c50:	f043 0301 	orreq.w	r3, r3, #1
 8002c54:	3014      	adds	r0, #20
 8002c56:	4282      	cmp	r2, r0
 8002c58:	bf08      	it	eq
 8002c5a:	f043 0301 	orreq.w	r3, r3, #1
 8002c5e:	3014      	adds	r0, #20
 8002c60:	4282      	cmp	r2, r0
 8002c62:	bf08      	it	eq
 8002c64:	f043 0301 	orreq.w	r3, r3, #1
 8002c68:	b913      	cbnz	r3, 8002c70 <HAL_DMA_Abort_IT+0x278>
 8002c6a:	4b1c      	ldr	r3, [pc, #112]	@ (8002cdc <HAL_DMA_Abort_IT+0x2e4>)
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d117      	bne.n	8002ca0 <HAL_DMA_Abort_IT+0x2a8>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002c70:	6e0a      	ldr	r2, [r1, #96]	@ 0x60
 8002c72:	6813      	ldr	r3, [r2, #0]
 8002c74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c78:	6013      	str	r3, [r2, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c7a:	6d88      	ldr	r0, [r1, #88]	@ 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002c7c:	6dcb      	ldr	r3, [r1, #92]	@ 0x5c
 8002c7e:	f003 021f 	and.w	r2, r3, #31
 8002c82:	2301      	movs	r3, #1
 8002c84:	4093      	lsls	r3, r2
 8002c86:	6043      	str	r3, [r0, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c88:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8002c8a:	6e8a      	ldr	r2, [r1, #104]	@ 0x68
 8002c8c:	605a      	str	r2, [r3, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8002c8e:	6ecb      	ldr	r3, [r1, #108]	@ 0x6c
 8002c90:	b133      	cbz	r3, 8002ca0 <HAL_DMA_Abort_IT+0x2a8>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c98:	601a      	str	r2, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c9a:	6f0b      	ldr	r3, [r1, #112]	@ 0x70
 8002c9c:	6f4a      	ldr	r2, [r1, #116]	@ 0x74
 8002c9e:	605a      	str	r2, [r3, #4]
      hdma->State = HAL_DMA_STATE_READY;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	f881 3035 	strb.w	r3, [r1, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	f881 3034 	strb.w	r3, [r1, #52]	@ 0x34
      if(hdma->XferAbortCallback != NULL)
 8002cac:	6d0b      	ldr	r3, [r1, #80]	@ 0x50
 8002cae:	b153      	cbz	r3, 8002cc6 <HAL_DMA_Abort_IT+0x2ce>
        hdma->XferAbortCallback(hdma);
 8002cb0:	4608      	mov	r0, r1
 8002cb2:	4798      	blx	r3
  return HAL_OK;
 8002cb4:	2000      	movs	r0, #0
 8002cb6:	e6ac      	b.n	8002a12 <HAL_DMA_Abort_IT+0x1a>
      __HAL_DMA_DISABLE(hdma);
 8002cb8:	6813      	ldr	r3, [r2, #0]
 8002cba:	f023 0301 	bic.w	r3, r3, #1
 8002cbe:	6013      	str	r3, [r2, #0]
 8002cc0:	e75f      	b.n	8002b82 <HAL_DMA_Abort_IT+0x18a>
    return HAL_ERROR;
 8002cc2:	2001      	movs	r0, #1
}
 8002cc4:	4770      	bx	lr
  return HAL_OK;
 8002cc6:	2000      	movs	r0, #0
 8002cc8:	e6a3      	b.n	8002a12 <HAL_DMA_Abort_IT+0x1a>
 8002cca:	bf00      	nop
 8002ccc:	40020010 	.word	0x40020010
 8002cd0:	400204b8 	.word	0x400204b8
 8002cd4:	40020028 	.word	0x40020028
 8002cd8:	58025408 	.word	0x58025408
 8002cdc:	58025494 	.word	0x58025494

08002ce0 <HAL_DMA_IRQHandler>:
{
 8002ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002cea:	4b94      	ldr	r3, [pc, #592]	@ (8002f3c <HAL_DMA_IRQHandler+0x25c>)
 8002cec:	681f      	ldr	r7, [r3, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cee:	6d86      	ldr	r6, [r0, #88]	@ 0x58
  tmpisr_dma  = regs_dma->ISR;
 8002cf0:	6835      	ldr	r5, [r6, #0]
  tmpisr_bdma = regs_bdma->ISR;
 8002cf2:	6831      	ldr	r1, [r6, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002cf4:	6802      	ldr	r2, [r0, #0]
 8002cf6:	4b92      	ldr	r3, [pc, #584]	@ (8002f40 <HAL_DMA_IRQHandler+0x260>)
 8002cf8:	4892      	ldr	r0, [pc, #584]	@ (8002f44 <HAL_DMA_IRQHandler+0x264>)
 8002cfa:	4282      	cmp	r2, r0
 8002cfc:	bf18      	it	ne
 8002cfe:	429a      	cmpne	r2, r3
 8002d00:	bf0c      	ite	eq
 8002d02:	2301      	moveq	r3, #1
 8002d04:	2300      	movne	r3, #0
 8002d06:	3018      	adds	r0, #24
 8002d08:	4282      	cmp	r2, r0
 8002d0a:	bf08      	it	eq
 8002d0c:	f043 0301 	orreq.w	r3, r3, #1
 8002d10:	3018      	adds	r0, #24
 8002d12:	4282      	cmp	r2, r0
 8002d14:	bf08      	it	eq
 8002d16:	f043 0301 	orreq.w	r3, r3, #1
 8002d1a:	3018      	adds	r0, #24
 8002d1c:	4282      	cmp	r2, r0
 8002d1e:	bf08      	it	eq
 8002d20:	f043 0301 	orreq.w	r3, r3, #1
 8002d24:	3018      	adds	r0, #24
 8002d26:	4282      	cmp	r2, r0
 8002d28:	bf08      	it	eq
 8002d2a:	f043 0301 	orreq.w	r3, r3, #1
 8002d2e:	3018      	adds	r0, #24
 8002d30:	4282      	cmp	r2, r0
 8002d32:	bf08      	it	eq
 8002d34:	f043 0301 	orreq.w	r3, r3, #1
 8002d38:	3018      	adds	r0, #24
 8002d3a:	4282      	cmp	r2, r0
 8002d3c:	bf08      	it	eq
 8002d3e:	f043 0301 	orreq.w	r3, r3, #1
 8002d42:	f500 7056 	add.w	r0, r0, #856	@ 0x358
 8002d46:	4282      	cmp	r2, r0
 8002d48:	bf08      	it	eq
 8002d4a:	f043 0301 	orreq.w	r3, r3, #1
 8002d4e:	3018      	adds	r0, #24
 8002d50:	4282      	cmp	r2, r0
 8002d52:	bf08      	it	eq
 8002d54:	f043 0301 	orreq.w	r3, r3, #1
 8002d58:	3018      	adds	r0, #24
 8002d5a:	4282      	cmp	r2, r0
 8002d5c:	bf08      	it	eq
 8002d5e:	f043 0301 	orreq.w	r3, r3, #1
 8002d62:	3018      	adds	r0, #24
 8002d64:	4282      	cmp	r2, r0
 8002d66:	bf08      	it	eq
 8002d68:	f043 0301 	orreq.w	r3, r3, #1
 8002d6c:	3018      	adds	r0, #24
 8002d6e:	4282      	cmp	r2, r0
 8002d70:	bf08      	it	eq
 8002d72:	f043 0301 	orreq.w	r3, r3, #1
 8002d76:	3018      	adds	r0, #24
 8002d78:	4282      	cmp	r2, r0
 8002d7a:	bf08      	it	eq
 8002d7c:	f043 0301 	orreq.w	r3, r3, #1
 8002d80:	3018      	adds	r0, #24
 8002d82:	4282      	cmp	r2, r0
 8002d84:	bf08      	it	eq
 8002d86:	f043 0301 	orreq.w	r3, r3, #1
 8002d8a:	b91b      	cbnz	r3, 8002d94 <HAL_DMA_IRQHandler+0xb4>
 8002d8c:	4b6e      	ldr	r3, [pc, #440]	@ (8002f48 <HAL_DMA_IRQHandler+0x268>)
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	f040 8081 	bne.w	8002e96 <HAL_DMA_IRQHandler+0x1b6>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002d94:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002d96:	f003 031f 	and.w	r3, r3, #31
 8002d9a:	2108      	movs	r1, #8
 8002d9c:	4099      	lsls	r1, r3
 8002d9e:	4229      	tst	r1, r5
 8002da0:	f000 83b8 	beq.w	8003514 <HAL_DMA_IRQHandler+0x834>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002da4:	6811      	ldr	r1, [r2, #0]
 8002da6:	f011 0f04 	tst.w	r1, #4
 8002daa:	f000 83b3 	beq.w	8003514 <HAL_DMA_IRQHandler+0x834>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002dae:	6813      	ldr	r3, [r2, #0]
 8002db0:	f023 0304 	bic.w	r3, r3, #4
 8002db4:	6013      	str	r3, [r2, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002db6:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002db8:	f003 021f 	and.w	r2, r3, #31
 8002dbc:	2308      	movs	r3, #8
 8002dbe:	4093      	lsls	r3, r2
 8002dc0:	60b3      	str	r3, [r6, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002dc2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002dc4:	f043 0301 	orr.w	r3, r3, #1
 8002dc8:	6563      	str	r3, [r4, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002dca:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002dcc:	f003 031f 	and.w	r3, r3, #31
 8002dd0:	fa25 f203 	lsr.w	r2, r5, r3
 8002dd4:	f012 0f01 	tst.w	r2, #1
 8002dd8:	f000 80c6 	beq.w	8002f68 <HAL_DMA_IRQHandler+0x288>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002ddc:	6822      	ldr	r2, [r4, #0]
 8002dde:	4958      	ldr	r1, [pc, #352]	@ (8002f40 <HAL_DMA_IRQHandler+0x260>)
 8002de0:	4858      	ldr	r0, [pc, #352]	@ (8002f44 <HAL_DMA_IRQHandler+0x264>)
 8002de2:	4282      	cmp	r2, r0
 8002de4:	bf18      	it	ne
 8002de6:	428a      	cmpne	r2, r1
 8002de8:	bf0c      	ite	eq
 8002dea:	2101      	moveq	r1, #1
 8002dec:	2100      	movne	r1, #0
 8002dee:	3018      	adds	r0, #24
 8002df0:	4282      	cmp	r2, r0
 8002df2:	bf08      	it	eq
 8002df4:	f041 0101 	orreq.w	r1, r1, #1
 8002df8:	3018      	adds	r0, #24
 8002dfa:	4282      	cmp	r2, r0
 8002dfc:	bf08      	it	eq
 8002dfe:	f041 0101 	orreq.w	r1, r1, #1
 8002e02:	3018      	adds	r0, #24
 8002e04:	4282      	cmp	r2, r0
 8002e06:	bf08      	it	eq
 8002e08:	f041 0101 	orreq.w	r1, r1, #1
 8002e0c:	3018      	adds	r0, #24
 8002e0e:	4282      	cmp	r2, r0
 8002e10:	bf08      	it	eq
 8002e12:	f041 0101 	orreq.w	r1, r1, #1
 8002e16:	3018      	adds	r0, #24
 8002e18:	4282      	cmp	r2, r0
 8002e1a:	bf08      	it	eq
 8002e1c:	f041 0101 	orreq.w	r1, r1, #1
 8002e20:	3018      	adds	r0, #24
 8002e22:	4282      	cmp	r2, r0
 8002e24:	bf08      	it	eq
 8002e26:	f041 0101 	orreq.w	r1, r1, #1
 8002e2a:	f500 7056 	add.w	r0, r0, #856	@ 0x358
 8002e2e:	4282      	cmp	r2, r0
 8002e30:	bf08      	it	eq
 8002e32:	f041 0101 	orreq.w	r1, r1, #1
 8002e36:	3018      	adds	r0, #24
 8002e38:	4282      	cmp	r2, r0
 8002e3a:	bf08      	it	eq
 8002e3c:	f041 0101 	orreq.w	r1, r1, #1
 8002e40:	3018      	adds	r0, #24
 8002e42:	4282      	cmp	r2, r0
 8002e44:	bf08      	it	eq
 8002e46:	f041 0101 	orreq.w	r1, r1, #1
 8002e4a:	3018      	adds	r0, #24
 8002e4c:	4282      	cmp	r2, r0
 8002e4e:	bf08      	it	eq
 8002e50:	f041 0101 	orreq.w	r1, r1, #1
 8002e54:	3018      	adds	r0, #24
 8002e56:	4282      	cmp	r2, r0
 8002e58:	bf08      	it	eq
 8002e5a:	f041 0101 	orreq.w	r1, r1, #1
 8002e5e:	3018      	adds	r0, #24
 8002e60:	4282      	cmp	r2, r0
 8002e62:	bf08      	it	eq
 8002e64:	f041 0101 	orreq.w	r1, r1, #1
 8002e68:	3018      	adds	r0, #24
 8002e6a:	4282      	cmp	r2, r0
 8002e6c:	bf08      	it	eq
 8002e6e:	f041 0101 	orreq.w	r1, r1, #1
 8002e72:	b911      	cbnz	r1, 8002e7a <HAL_DMA_IRQHandler+0x19a>
 8002e74:	4934      	ldr	r1, [pc, #208]	@ (8002f48 <HAL_DMA_IRQHandler+0x268>)
 8002e76:	428a      	cmp	r2, r1
 8002e78:	d150      	bne.n	8002f1c <HAL_DMA_IRQHandler+0x23c>
 8002e7a:	6952      	ldr	r2, [r2, #20]
 8002e7c:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8002e80:	d16a      	bne.n	8002f58 <HAL_DMA_IRQHandler+0x278>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002e82:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002e84:	f003 031f 	and.w	r3, r3, #31
 8002e88:	2104      	movs	r1, #4
 8002e8a:	4099      	lsls	r1, r3
 8002e8c:	420d      	tst	r5, r1
 8002e8e:	f000 80d7 	beq.w	8003040 <HAL_DMA_IRQHandler+0x360>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002e92:	6822      	ldr	r2, [r4, #0]
 8002e94:	e34d      	b.n	8003532 <HAL_DMA_IRQHandler+0x852>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002e96:	4b2d      	ldr	r3, [pc, #180]	@ (8002f4c <HAL_DMA_IRQHandler+0x26c>)
 8002e98:	482d      	ldr	r0, [pc, #180]	@ (8002f50 <HAL_DMA_IRQHandler+0x270>)
 8002e9a:	4282      	cmp	r2, r0
 8002e9c:	bf18      	it	ne
 8002e9e:	429a      	cmpne	r2, r3
 8002ea0:	bf0c      	ite	eq
 8002ea2:	2301      	moveq	r3, #1
 8002ea4:	2300      	movne	r3, #0
 8002ea6:	3014      	adds	r0, #20
 8002ea8:	4282      	cmp	r2, r0
 8002eaa:	bf08      	it	eq
 8002eac:	f043 0301 	orreq.w	r3, r3, #1
 8002eb0:	3014      	adds	r0, #20
 8002eb2:	4282      	cmp	r2, r0
 8002eb4:	bf08      	it	eq
 8002eb6:	f043 0301 	orreq.w	r3, r3, #1
 8002eba:	3014      	adds	r0, #20
 8002ebc:	4282      	cmp	r2, r0
 8002ebe:	bf08      	it	eq
 8002ec0:	f043 0301 	orreq.w	r3, r3, #1
 8002ec4:	3014      	adds	r0, #20
 8002ec6:	4282      	cmp	r2, r0
 8002ec8:	bf08      	it	eq
 8002eca:	f043 0301 	orreq.w	r3, r3, #1
 8002ece:	3014      	adds	r0, #20
 8002ed0:	4282      	cmp	r2, r0
 8002ed2:	bf08      	it	eq
 8002ed4:	f043 0301 	orreq.w	r3, r3, #1
 8002ed8:	b91b      	cbnz	r3, 8002ee2 <HAL_DMA_IRQHandler+0x202>
 8002eda:	4b1e      	ldr	r3, [pc, #120]	@ (8002f54 <HAL_DMA_IRQHandler+0x274>)
 8002edc:	429a      	cmp	r2, r3
 8002ede:	f040 81f8 	bne.w	80032d2 <HAL_DMA_IRQHandler+0x5f2>
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002ee2:	6813      	ldr	r3, [r2, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002ee4:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8002ee6:	f000 001f 	and.w	r0, r0, #31
 8002eea:	2504      	movs	r5, #4
 8002eec:	4085      	lsls	r5, r0
 8002eee:	420d      	tst	r5, r1
 8002ef0:	f000 825d 	beq.w	80033ae <HAL_DMA_IRQHandler+0x6ce>
 8002ef4:	f013 0f04 	tst.w	r3, #4
 8002ef8:	f000 8259 	beq.w	80033ae <HAL_DMA_IRQHandler+0x6ce>
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002efc:	6075      	str	r5, [r6, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002efe:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8002f02:	f000 81f3 	beq.w	80032ec <HAL_DMA_IRQHandler+0x60c>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002f06:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8002f0a:	f040 81e9 	bne.w	80032e0 <HAL_DMA_IRQHandler+0x600>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f0e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	f000 81de 	beq.w	80032d2 <HAL_DMA_IRQHandler+0x5f2>
            hdma->XferM1HalfCpltCallback(hdma);
 8002f16:	4620      	mov	r0, r4
 8002f18:	4798      	blx	r3
 8002f1a:	e1da      	b.n	80032d2 <HAL_DMA_IRQHandler+0x5f2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002f1c:	6811      	ldr	r1, [r2, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002f1e:	2104      	movs	r1, #4
 8002f20:	fa01 f303 	lsl.w	r3, r1, r3
 8002f24:	422b      	tst	r3, r5
 8002f26:	d178      	bne.n	800301a <HAL_DMA_IRQHandler+0x33a>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002f28:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002f2a:	f003 031f 	and.w	r3, r3, #31
 8002f2e:	2110      	movs	r1, #16
 8002f30:	4099      	lsls	r1, r3
 8002f32:	420d      	tst	r5, r1
 8002f34:	f000 8309 	beq.w	800354a <HAL_DMA_IRQHandler+0x86a>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002f38:	6822      	ldr	r2, [r4, #0]
 8002f3a:	e078      	b.n	800302e <HAL_DMA_IRQHandler+0x34e>
 8002f3c:	20000004 	.word	0x20000004
 8002f40:	40020010 	.word	0x40020010
 8002f44:	40020028 	.word	0x40020028
 8002f48:	400204b8 	.word	0x400204b8
 8002f4c:	58025408 	.word	0x58025408
 8002f50:	5802541c 	.word	0x5802541c
 8002f54:	58025494 	.word	0x58025494
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002f58:	2201      	movs	r2, #1
 8002f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5e:	60b3      	str	r3, [r6, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f60:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002f62:	f043 0302 	orr.w	r3, r3, #2
 8002f66:	6563      	str	r3, [r4, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002f68:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002f6a:	f003 031f 	and.w	r3, r3, #31
 8002f6e:	2104      	movs	r1, #4
 8002f70:	4099      	lsls	r1, r3
 8002f72:	4229      	tst	r1, r5
 8002f74:	d064      	beq.n	8003040 <HAL_DMA_IRQHandler+0x360>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002f76:	6822      	ldr	r2, [r4, #0]
 8002f78:	4b8c      	ldr	r3, [pc, #560]	@ (80031ac <HAL_DMA_IRQHandler+0x4cc>)
 8002f7a:	488d      	ldr	r0, [pc, #564]	@ (80031b0 <HAL_DMA_IRQHandler+0x4d0>)
 8002f7c:	4282      	cmp	r2, r0
 8002f7e:	bf18      	it	ne
 8002f80:	429a      	cmpne	r2, r3
 8002f82:	bf0c      	ite	eq
 8002f84:	2301      	moveq	r3, #1
 8002f86:	2300      	movne	r3, #0
 8002f88:	3018      	adds	r0, #24
 8002f8a:	4282      	cmp	r2, r0
 8002f8c:	bf08      	it	eq
 8002f8e:	f043 0301 	orreq.w	r3, r3, #1
 8002f92:	3018      	adds	r0, #24
 8002f94:	4282      	cmp	r2, r0
 8002f96:	bf08      	it	eq
 8002f98:	f043 0301 	orreq.w	r3, r3, #1
 8002f9c:	3018      	adds	r0, #24
 8002f9e:	4282      	cmp	r2, r0
 8002fa0:	bf08      	it	eq
 8002fa2:	f043 0301 	orreq.w	r3, r3, #1
 8002fa6:	3018      	adds	r0, #24
 8002fa8:	4282      	cmp	r2, r0
 8002faa:	bf08      	it	eq
 8002fac:	f043 0301 	orreq.w	r3, r3, #1
 8002fb0:	3018      	adds	r0, #24
 8002fb2:	4282      	cmp	r2, r0
 8002fb4:	bf08      	it	eq
 8002fb6:	f043 0301 	orreq.w	r3, r3, #1
 8002fba:	3018      	adds	r0, #24
 8002fbc:	4282      	cmp	r2, r0
 8002fbe:	bf08      	it	eq
 8002fc0:	f043 0301 	orreq.w	r3, r3, #1
 8002fc4:	f500 7056 	add.w	r0, r0, #856	@ 0x358
 8002fc8:	4282      	cmp	r2, r0
 8002fca:	bf08      	it	eq
 8002fcc:	f043 0301 	orreq.w	r3, r3, #1
 8002fd0:	3018      	adds	r0, #24
 8002fd2:	4282      	cmp	r2, r0
 8002fd4:	bf08      	it	eq
 8002fd6:	f043 0301 	orreq.w	r3, r3, #1
 8002fda:	3018      	adds	r0, #24
 8002fdc:	4282      	cmp	r2, r0
 8002fde:	bf08      	it	eq
 8002fe0:	f043 0301 	orreq.w	r3, r3, #1
 8002fe4:	3018      	adds	r0, #24
 8002fe6:	4282      	cmp	r2, r0
 8002fe8:	bf08      	it	eq
 8002fea:	f043 0301 	orreq.w	r3, r3, #1
 8002fee:	3018      	adds	r0, #24
 8002ff0:	4282      	cmp	r2, r0
 8002ff2:	bf08      	it	eq
 8002ff4:	f043 0301 	orreq.w	r3, r3, #1
 8002ff8:	3018      	adds	r0, #24
 8002ffa:	4282      	cmp	r2, r0
 8002ffc:	bf08      	it	eq
 8002ffe:	f043 0301 	orreq.w	r3, r3, #1
 8003002:	3018      	adds	r0, #24
 8003004:	4282      	cmp	r2, r0
 8003006:	bf08      	it	eq
 8003008:	f043 0301 	orreq.w	r3, r3, #1
 800300c:	2b00      	cmp	r3, #0
 800300e:	f040 8290 	bne.w	8003532 <HAL_DMA_IRQHandler+0x852>
 8003012:	4b68      	ldr	r3, [pc, #416]	@ (80031b4 <HAL_DMA_IRQHandler+0x4d4>)
 8003014:	429a      	cmp	r2, r3
 8003016:	f000 828c 	beq.w	8003532 <HAL_DMA_IRQHandler+0x852>
 800301a:	6813      	ldr	r3, [r2, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800301c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800301e:	f003 031f 	and.w	r3, r3, #31
 8003022:	2110      	movs	r1, #16
 8003024:	4099      	lsls	r1, r3
 8003026:	420d      	tst	r5, r1
 8003028:	f000 828f 	beq.w	800354a <HAL_DMA_IRQHandler+0x86a>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800302c:	6822      	ldr	r2, [r4, #0]
 800302e:	6813      	ldr	r3, [r2, #0]
 8003030:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003034:	e05e      	b.n	80030f4 <HAL_DMA_IRQHandler+0x414>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003036:	60b1      	str	r1, [r6, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003038:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800303a:	f043 0304 	orr.w	r3, r3, #4
 800303e:	6563      	str	r3, [r4, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003040:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003042:	f003 031f 	and.w	r3, r3, #31
 8003046:	2110      	movs	r1, #16
 8003048:	4099      	lsls	r1, r3
 800304a:	4229      	tst	r1, r5
 800304c:	f000 827d 	beq.w	800354a <HAL_DMA_IRQHandler+0x86a>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003050:	6822      	ldr	r2, [r4, #0]
 8003052:	4b56      	ldr	r3, [pc, #344]	@ (80031ac <HAL_DMA_IRQHandler+0x4cc>)
 8003054:	4856      	ldr	r0, [pc, #344]	@ (80031b0 <HAL_DMA_IRQHandler+0x4d0>)
 8003056:	4282      	cmp	r2, r0
 8003058:	bf18      	it	ne
 800305a:	429a      	cmpne	r2, r3
 800305c:	bf0c      	ite	eq
 800305e:	2301      	moveq	r3, #1
 8003060:	2300      	movne	r3, #0
 8003062:	3018      	adds	r0, #24
 8003064:	4282      	cmp	r2, r0
 8003066:	bf08      	it	eq
 8003068:	f043 0301 	orreq.w	r3, r3, #1
 800306c:	3018      	adds	r0, #24
 800306e:	4282      	cmp	r2, r0
 8003070:	bf08      	it	eq
 8003072:	f043 0301 	orreq.w	r3, r3, #1
 8003076:	3018      	adds	r0, #24
 8003078:	4282      	cmp	r2, r0
 800307a:	bf08      	it	eq
 800307c:	f043 0301 	orreq.w	r3, r3, #1
 8003080:	3018      	adds	r0, #24
 8003082:	4282      	cmp	r2, r0
 8003084:	bf08      	it	eq
 8003086:	f043 0301 	orreq.w	r3, r3, #1
 800308a:	3018      	adds	r0, #24
 800308c:	4282      	cmp	r2, r0
 800308e:	bf08      	it	eq
 8003090:	f043 0301 	orreq.w	r3, r3, #1
 8003094:	3018      	adds	r0, #24
 8003096:	4282      	cmp	r2, r0
 8003098:	bf08      	it	eq
 800309a:	f043 0301 	orreq.w	r3, r3, #1
 800309e:	f500 7056 	add.w	r0, r0, #856	@ 0x358
 80030a2:	4282      	cmp	r2, r0
 80030a4:	bf08      	it	eq
 80030a6:	f043 0301 	orreq.w	r3, r3, #1
 80030aa:	3018      	adds	r0, #24
 80030ac:	4282      	cmp	r2, r0
 80030ae:	bf08      	it	eq
 80030b0:	f043 0301 	orreq.w	r3, r3, #1
 80030b4:	3018      	adds	r0, #24
 80030b6:	4282      	cmp	r2, r0
 80030b8:	bf08      	it	eq
 80030ba:	f043 0301 	orreq.w	r3, r3, #1
 80030be:	3018      	adds	r0, #24
 80030c0:	4282      	cmp	r2, r0
 80030c2:	bf08      	it	eq
 80030c4:	f043 0301 	orreq.w	r3, r3, #1
 80030c8:	3018      	adds	r0, #24
 80030ca:	4282      	cmp	r2, r0
 80030cc:	bf08      	it	eq
 80030ce:	f043 0301 	orreq.w	r3, r3, #1
 80030d2:	3018      	adds	r0, #24
 80030d4:	4282      	cmp	r2, r0
 80030d6:	bf08      	it	eq
 80030d8:	f043 0301 	orreq.w	r3, r3, #1
 80030dc:	3018      	adds	r0, #24
 80030de:	4282      	cmp	r2, r0
 80030e0:	bf08      	it	eq
 80030e2:	f043 0301 	orreq.w	r3, r3, #1
 80030e6:	b913      	cbnz	r3, 80030ee <HAL_DMA_IRQHandler+0x40e>
 80030e8:	4b32      	ldr	r3, [pc, #200]	@ (80031b4 <HAL_DMA_IRQHandler+0x4d4>)
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d19f      	bne.n	800302e <HAL_DMA_IRQHandler+0x34e>
 80030ee:	6813      	ldr	r3, [r2, #0]
 80030f0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f000 8228 	beq.w	800354a <HAL_DMA_IRQHandler+0x86a>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80030fa:	60b1      	str	r1, [r6, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80030fc:	6823      	ldr	r3, [r4, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8003104:	d011      	beq.n	800312a <HAL_DMA_IRQHandler+0x44a>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 800310c:	d106      	bne.n	800311c <HAL_DMA_IRQHandler+0x43c>
            if(hdma->XferHalfCpltCallback != NULL)
 800310e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003110:	2b00      	cmp	r3, #0
 8003112:	f000 821a 	beq.w	800354a <HAL_DMA_IRQHandler+0x86a>
              hdma->XferHalfCpltCallback(hdma);
 8003116:	4620      	mov	r0, r4
 8003118:	4798      	blx	r3
 800311a:	e216      	b.n	800354a <HAL_DMA_IRQHandler+0x86a>
            if(hdma->XferM1HalfCpltCallback != NULL)
 800311c:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800311e:	2b00      	cmp	r3, #0
 8003120:	f000 8213 	beq.w	800354a <HAL_DMA_IRQHandler+0x86a>
              hdma->XferM1HalfCpltCallback(hdma);
 8003124:	4620      	mov	r0, r4
 8003126:	4798      	blx	r3
 8003128:	e20f      	b.n	800354a <HAL_DMA_IRQHandler+0x86a>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8003130:	d103      	bne.n	800313a <HAL_DMA_IRQHandler+0x45a>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	f022 0208 	bic.w	r2, r2, #8
 8003138:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 800313a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800313c:	2b00      	cmp	r3, #0
 800313e:	f000 8204 	beq.w	800354a <HAL_DMA_IRQHandler+0x86a>
            hdma->XferHalfCpltCallback(hdma);
 8003142:	4620      	mov	r0, r4
 8003144:	4798      	blx	r3
 8003146:	e200      	b.n	800354a <HAL_DMA_IRQHandler+0x86a>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003148:	680b      	ldr	r3, [r1, #0]
 800314a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800314e:	e257      	b.n	8003600 <HAL_DMA_IRQHandler+0x920>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003150:	6822      	ldr	r2, [r4, #0]
 8003152:	6813      	ldr	r3, [r2, #0]
 8003154:	f023 0316 	bic.w	r3, r3, #22
 8003158:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800315a:	6822      	ldr	r2, [r4, #0]
 800315c:	6953      	ldr	r3, [r2, #20]
 800315e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003162:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003164:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003166:	b1bb      	cbz	r3, 8003198 <HAL_DMA_IRQHandler+0x4b8>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003168:	6822      	ldr	r2, [r4, #0]
 800316a:	6813      	ldr	r3, [r2, #0]
 800316c:	f023 0308 	bic.w	r3, r3, #8
 8003170:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003172:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003174:	f003 021f 	and.w	r2, r3, #31
 8003178:	233f      	movs	r3, #63	@ 0x3f
 800317a:	4093      	lsls	r3, r2
 800317c:	60b3      	str	r3, [r6, #8]
          hdma->State = HAL_DMA_STATE_READY;
 800317e:	2301      	movs	r3, #1
 8003180:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8003184:	2300      	movs	r3, #0
 8003186:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
          if(hdma->XferAbortCallback != NULL)
 800318a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800318c:	2b00      	cmp	r3, #0
 800318e:	f000 80a0 	beq.w	80032d2 <HAL_DMA_IRQHandler+0x5f2>
            hdma->XferAbortCallback(hdma);
 8003192:	4620      	mov	r0, r4
 8003194:	4798      	blx	r3
 8003196:	e09c      	b.n	80032d2 <HAL_DMA_IRQHandler+0x5f2>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003198:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1e4      	bne.n	8003168 <HAL_DMA_IRQHandler+0x488>
 800319e:	e7e8      	b.n	8003172 <HAL_DMA_IRQHandler+0x492>
            if(hdma->XferCpltCallback != NULL)
 80031a0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80031a2:	b1db      	cbz	r3, 80031dc <HAL_DMA_IRQHandler+0x4fc>
              hdma->XferCpltCallback(hdma);
 80031a4:	4620      	mov	r0, r4
 80031a6:	4798      	blx	r3
 80031a8:	e018      	b.n	80031dc <HAL_DMA_IRQHandler+0x4fc>
 80031aa:	bf00      	nop
 80031ac:	40020010 	.word	0x40020010
 80031b0:	40020028 	.word	0x40020028
 80031b4:	400204b8 	.word	0x400204b8
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	f412 7f80 	tst.w	r2, #256	@ 0x100
 80031be:	d109      	bne.n	80031d4 <HAL_DMA_IRQHandler+0x4f4>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	f022 0210 	bic.w	r2, r2, #16
 80031c6:	601a      	str	r2, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
 80031c8:	2301      	movs	r3, #1
 80031ca:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
            __HAL_UNLOCK(hdma);
 80031ce:	2300      	movs	r3, #0
 80031d0:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
          if(hdma->XferCpltCallback != NULL)
 80031d4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80031d6:	b10b      	cbz	r3, 80031dc <HAL_DMA_IRQHandler+0x4fc>
            hdma->XferCpltCallback(hdma);
 80031d8:	4620      	mov	r0, r4
 80031da:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80031dc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d077      	beq.n	80032d2 <HAL_DMA_IRQHandler+0x5f2>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80031e2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80031e4:	f013 0f01 	tst.w	r3, #1
 80031e8:	d06f      	beq.n	80032ca <HAL_DMA_IRQHandler+0x5ea>
        hdma->State = HAL_DMA_STATE_ABORT;
 80031ea:	2304      	movs	r3, #4
 80031ec:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_DMA_DISABLE(hdma);
 80031f0:	6822      	ldr	r2, [r4, #0]
 80031f2:	4b7e      	ldr	r3, [pc, #504]	@ (80033ec <HAL_DMA_IRQHandler+0x70c>)
 80031f4:	497e      	ldr	r1, [pc, #504]	@ (80033f0 <HAL_DMA_IRQHandler+0x710>)
 80031f6:	428a      	cmp	r2, r1
 80031f8:	bf18      	it	ne
 80031fa:	429a      	cmpne	r2, r3
 80031fc:	bf0c      	ite	eq
 80031fe:	2301      	moveq	r3, #1
 8003200:	2300      	movne	r3, #0
 8003202:	3118      	adds	r1, #24
 8003204:	428a      	cmp	r2, r1
 8003206:	bf08      	it	eq
 8003208:	f043 0301 	orreq.w	r3, r3, #1
 800320c:	3118      	adds	r1, #24
 800320e:	428a      	cmp	r2, r1
 8003210:	bf08      	it	eq
 8003212:	f043 0301 	orreq.w	r3, r3, #1
 8003216:	3118      	adds	r1, #24
 8003218:	428a      	cmp	r2, r1
 800321a:	bf08      	it	eq
 800321c:	f043 0301 	orreq.w	r3, r3, #1
 8003220:	3118      	adds	r1, #24
 8003222:	428a      	cmp	r2, r1
 8003224:	bf08      	it	eq
 8003226:	f043 0301 	orreq.w	r3, r3, #1
 800322a:	3118      	adds	r1, #24
 800322c:	428a      	cmp	r2, r1
 800322e:	bf08      	it	eq
 8003230:	f043 0301 	orreq.w	r3, r3, #1
 8003234:	3118      	adds	r1, #24
 8003236:	428a      	cmp	r2, r1
 8003238:	bf08      	it	eq
 800323a:	f043 0301 	orreq.w	r3, r3, #1
 800323e:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 8003242:	428a      	cmp	r2, r1
 8003244:	bf08      	it	eq
 8003246:	f043 0301 	orreq.w	r3, r3, #1
 800324a:	3118      	adds	r1, #24
 800324c:	428a      	cmp	r2, r1
 800324e:	bf08      	it	eq
 8003250:	f043 0301 	orreq.w	r3, r3, #1
 8003254:	3118      	adds	r1, #24
 8003256:	428a      	cmp	r2, r1
 8003258:	bf08      	it	eq
 800325a:	f043 0301 	orreq.w	r3, r3, #1
 800325e:	3118      	adds	r1, #24
 8003260:	428a      	cmp	r2, r1
 8003262:	bf08      	it	eq
 8003264:	f043 0301 	orreq.w	r3, r3, #1
 8003268:	3118      	adds	r1, #24
 800326a:	428a      	cmp	r2, r1
 800326c:	bf08      	it	eq
 800326e:	f043 0301 	orreq.w	r3, r3, #1
 8003272:	3118      	adds	r1, #24
 8003274:	428a      	cmp	r2, r1
 8003276:	bf08      	it	eq
 8003278:	f043 0301 	orreq.w	r3, r3, #1
 800327c:	3118      	adds	r1, #24
 800327e:	428a      	cmp	r2, r1
 8003280:	bf08      	it	eq
 8003282:	f043 0301 	orreq.w	r3, r3, #1
 8003286:	b913      	cbnz	r3, 800328e <HAL_DMA_IRQHandler+0x5ae>
 8003288:	4b5a      	ldr	r3, [pc, #360]	@ (80033f4 <HAL_DMA_IRQHandler+0x714>)
 800328a:	429a      	cmp	r2, r3
 800328c:	d123      	bne.n	80032d6 <HAL_DMA_IRQHandler+0x5f6>
 800328e:	6813      	ldr	r3, [r2, #0]
 8003290:	f023 0301 	bic.w	r3, r3, #1
 8003294:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003296:	4a58      	ldr	r2, [pc, #352]	@ (80033f8 <HAL_DMA_IRQHandler+0x718>)
 8003298:	fba2 7207 	umull	r7, r2, r2, r7
 800329c:	0a92      	lsrs	r2, r2, #10
          if (++count > timeout)
 800329e:	9b01      	ldr	r3, [sp, #4]
 80032a0:	3301      	adds	r3, #1
 80032a2:	9301      	str	r3, [sp, #4]
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d804      	bhi.n	80032b2 <HAL_DMA_IRQHandler+0x5d2>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80032a8:	6823      	ldr	r3, [r4, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f013 0f01 	tst.w	r3, #1
 80032b0:	d1f5      	bne.n	800329e <HAL_DMA_IRQHandler+0x5be>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80032b2:	6823      	ldr	r3, [r4, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f013 0f01 	tst.w	r3, #1
          hdma->State = HAL_DMA_STATE_ERROR;
 80032ba:	bf14      	ite	ne
 80032bc:	2303      	movne	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 80032be:	2301      	moveq	r3, #1
 80032c0:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 80032c4:	2300      	movs	r3, #0
 80032c6:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      if(hdma->XferErrorCallback != NULL)
 80032ca:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80032cc:	b10b      	cbz	r3, 80032d2 <HAL_DMA_IRQHandler+0x5f2>
        hdma->XferErrorCallback(hdma);
 80032ce:	4620      	mov	r0, r4
 80032d0:	4798      	blx	r3
}
 80032d2:	b003      	add	sp, #12
 80032d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_DMA_DISABLE(hdma);
 80032d6:	6813      	ldr	r3, [r2, #0]
 80032d8:	f023 0301 	bic.w	r3, r3, #1
 80032dc:	6013      	str	r3, [r2, #0]
 80032de:	e7da      	b.n	8003296 <HAL_DMA_IRQHandler+0x5b6>
          if(hdma->XferHalfCpltCallback != NULL)
 80032e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d0f5      	beq.n	80032d2 <HAL_DMA_IRQHandler+0x5f2>
            hdma->XferHalfCpltCallback(hdma);
 80032e6:	4620      	mov	r0, r4
 80032e8:	4798      	blx	r3
 80032ea:	e7f2      	b.n	80032d2 <HAL_DMA_IRQHandler+0x5f2>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80032ec:	f013 0f20 	tst.w	r3, #32
 80032f0:	d152      	bne.n	8003398 <HAL_DMA_IRQHandler+0x6b8>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80032f2:	6822      	ldr	r2, [r4, #0]
 80032f4:	4b3d      	ldr	r3, [pc, #244]	@ (80033ec <HAL_DMA_IRQHandler+0x70c>)
 80032f6:	493e      	ldr	r1, [pc, #248]	@ (80033f0 <HAL_DMA_IRQHandler+0x710>)
 80032f8:	428a      	cmp	r2, r1
 80032fa:	bf18      	it	ne
 80032fc:	429a      	cmpne	r2, r3
 80032fe:	bf0c      	ite	eq
 8003300:	2301      	moveq	r3, #1
 8003302:	2300      	movne	r3, #0
 8003304:	3118      	adds	r1, #24
 8003306:	428a      	cmp	r2, r1
 8003308:	bf08      	it	eq
 800330a:	f043 0301 	orreq.w	r3, r3, #1
 800330e:	3118      	adds	r1, #24
 8003310:	428a      	cmp	r2, r1
 8003312:	bf08      	it	eq
 8003314:	f043 0301 	orreq.w	r3, r3, #1
 8003318:	3118      	adds	r1, #24
 800331a:	428a      	cmp	r2, r1
 800331c:	bf08      	it	eq
 800331e:	f043 0301 	orreq.w	r3, r3, #1
 8003322:	3118      	adds	r1, #24
 8003324:	428a      	cmp	r2, r1
 8003326:	bf08      	it	eq
 8003328:	f043 0301 	orreq.w	r3, r3, #1
 800332c:	3118      	adds	r1, #24
 800332e:	428a      	cmp	r2, r1
 8003330:	bf08      	it	eq
 8003332:	f043 0301 	orreq.w	r3, r3, #1
 8003336:	3118      	adds	r1, #24
 8003338:	428a      	cmp	r2, r1
 800333a:	bf08      	it	eq
 800333c:	f043 0301 	orreq.w	r3, r3, #1
 8003340:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 8003344:	428a      	cmp	r2, r1
 8003346:	bf08      	it	eq
 8003348:	f043 0301 	orreq.w	r3, r3, #1
 800334c:	3118      	adds	r1, #24
 800334e:	428a      	cmp	r2, r1
 8003350:	bf08      	it	eq
 8003352:	f043 0301 	orreq.w	r3, r3, #1
 8003356:	3118      	adds	r1, #24
 8003358:	428a      	cmp	r2, r1
 800335a:	bf08      	it	eq
 800335c:	f043 0301 	orreq.w	r3, r3, #1
 8003360:	3118      	adds	r1, #24
 8003362:	428a      	cmp	r2, r1
 8003364:	bf08      	it	eq
 8003366:	f043 0301 	orreq.w	r3, r3, #1
 800336a:	3118      	adds	r1, #24
 800336c:	428a      	cmp	r2, r1
 800336e:	bf08      	it	eq
 8003370:	f043 0301 	orreq.w	r3, r3, #1
 8003374:	3118      	adds	r1, #24
 8003376:	428a      	cmp	r2, r1
 8003378:	bf08      	it	eq
 800337a:	f043 0301 	orreq.w	r3, r3, #1
 800337e:	3118      	adds	r1, #24
 8003380:	428a      	cmp	r2, r1
 8003382:	bf08      	it	eq
 8003384:	f043 0301 	orreq.w	r3, r3, #1
 8003388:	b913      	cbnz	r3, 8003390 <HAL_DMA_IRQHandler+0x6b0>
 800338a:	4b1a      	ldr	r3, [pc, #104]	@ (80033f4 <HAL_DMA_IRQHandler+0x714>)
 800338c:	429a      	cmp	r2, r3
 800338e:	d109      	bne.n	80033a4 <HAL_DMA_IRQHandler+0x6c4>
 8003390:	6813      	ldr	r3, [r2, #0]
 8003392:	f023 0308 	bic.w	r3, r3, #8
 8003396:	6013      	str	r3, [r2, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8003398:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800339a:	2b00      	cmp	r3, #0
 800339c:	d099      	beq.n	80032d2 <HAL_DMA_IRQHandler+0x5f2>
          hdma->XferHalfCpltCallback(hdma);
 800339e:	4620      	mov	r0, r4
 80033a0:	4798      	blx	r3
 80033a2:	e796      	b.n	80032d2 <HAL_DMA_IRQHandler+0x5f2>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80033a4:	6813      	ldr	r3, [r2, #0]
 80033a6:	f023 0304 	bic.w	r3, r3, #4
 80033aa:	6013      	str	r3, [r2, #0]
 80033ac:	e7f4      	b.n	8003398 <HAL_DMA_IRQHandler+0x6b8>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80033ae:	2502      	movs	r5, #2
 80033b0:	4085      	lsls	r5, r0
 80033b2:	420d      	tst	r5, r1
 80033b4:	f000 808a 	beq.w	80034cc <HAL_DMA_IRQHandler+0x7ec>
 80033b8:	f013 0f02 	tst.w	r3, #2
 80033bc:	f000 8086 	beq.w	80034cc <HAL_DMA_IRQHandler+0x7ec>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80033c0:	6075      	str	r5, [r6, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80033c2:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 80033c6:	d019      	beq.n	80033fc <HAL_DMA_IRQHandler+0x71c>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80033c8:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80033cc:	d106      	bne.n	80033dc <HAL_DMA_IRQHandler+0x6fc>
          if(hdma->XferM1CpltCallback != NULL)
 80033ce:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	f43f af7e 	beq.w	80032d2 <HAL_DMA_IRQHandler+0x5f2>
            hdma->XferM1CpltCallback(hdma);
 80033d6:	4620      	mov	r0, r4
 80033d8:	4798      	blx	r3
 80033da:	e77a      	b.n	80032d2 <HAL_DMA_IRQHandler+0x5f2>
          if(hdma->XferCpltCallback != NULL)
 80033dc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80033de:	2b00      	cmp	r3, #0
 80033e0:	f43f af77 	beq.w	80032d2 <HAL_DMA_IRQHandler+0x5f2>
            hdma->XferCpltCallback(hdma);
 80033e4:	4620      	mov	r0, r4
 80033e6:	4798      	blx	r3
 80033e8:	e773      	b.n	80032d2 <HAL_DMA_IRQHandler+0x5f2>
 80033ea:	bf00      	nop
 80033ec:	40020010 	.word	0x40020010
 80033f0:	40020028 	.word	0x40020028
 80033f4:	400204b8 	.word	0x400204b8
 80033f8:	1b4e81b5 	.word	0x1b4e81b5
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80033fc:	f013 0f20 	tst.w	r3, #32
 8003400:	d158      	bne.n	80034b4 <HAL_DMA_IRQHandler+0x7d4>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003402:	6822      	ldr	r2, [r4, #0]
 8003404:	4b8c      	ldr	r3, [pc, #560]	@ (8003638 <HAL_DMA_IRQHandler+0x958>)
 8003406:	498d      	ldr	r1, [pc, #564]	@ (800363c <HAL_DMA_IRQHandler+0x95c>)
 8003408:	428a      	cmp	r2, r1
 800340a:	bf18      	it	ne
 800340c:	429a      	cmpne	r2, r3
 800340e:	bf0c      	ite	eq
 8003410:	2301      	moveq	r3, #1
 8003412:	2300      	movne	r3, #0
 8003414:	3118      	adds	r1, #24
 8003416:	428a      	cmp	r2, r1
 8003418:	bf08      	it	eq
 800341a:	f043 0301 	orreq.w	r3, r3, #1
 800341e:	3118      	adds	r1, #24
 8003420:	428a      	cmp	r2, r1
 8003422:	bf08      	it	eq
 8003424:	f043 0301 	orreq.w	r3, r3, #1
 8003428:	3118      	adds	r1, #24
 800342a:	428a      	cmp	r2, r1
 800342c:	bf08      	it	eq
 800342e:	f043 0301 	orreq.w	r3, r3, #1
 8003432:	3118      	adds	r1, #24
 8003434:	428a      	cmp	r2, r1
 8003436:	bf08      	it	eq
 8003438:	f043 0301 	orreq.w	r3, r3, #1
 800343c:	3118      	adds	r1, #24
 800343e:	428a      	cmp	r2, r1
 8003440:	bf08      	it	eq
 8003442:	f043 0301 	orreq.w	r3, r3, #1
 8003446:	3118      	adds	r1, #24
 8003448:	428a      	cmp	r2, r1
 800344a:	bf08      	it	eq
 800344c:	f043 0301 	orreq.w	r3, r3, #1
 8003450:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 8003454:	428a      	cmp	r2, r1
 8003456:	bf08      	it	eq
 8003458:	f043 0301 	orreq.w	r3, r3, #1
 800345c:	3118      	adds	r1, #24
 800345e:	428a      	cmp	r2, r1
 8003460:	bf08      	it	eq
 8003462:	f043 0301 	orreq.w	r3, r3, #1
 8003466:	3118      	adds	r1, #24
 8003468:	428a      	cmp	r2, r1
 800346a:	bf08      	it	eq
 800346c:	f043 0301 	orreq.w	r3, r3, #1
 8003470:	3118      	adds	r1, #24
 8003472:	428a      	cmp	r2, r1
 8003474:	bf08      	it	eq
 8003476:	f043 0301 	orreq.w	r3, r3, #1
 800347a:	3118      	adds	r1, #24
 800347c:	428a      	cmp	r2, r1
 800347e:	bf08      	it	eq
 8003480:	f043 0301 	orreq.w	r3, r3, #1
 8003484:	3118      	adds	r1, #24
 8003486:	428a      	cmp	r2, r1
 8003488:	bf08      	it	eq
 800348a:	f043 0301 	orreq.w	r3, r3, #1
 800348e:	3118      	adds	r1, #24
 8003490:	428a      	cmp	r2, r1
 8003492:	bf08      	it	eq
 8003494:	f043 0301 	orreq.w	r3, r3, #1
 8003498:	b913      	cbnz	r3, 80034a0 <HAL_DMA_IRQHandler+0x7c0>
 800349a:	4b69      	ldr	r3, [pc, #420]	@ (8003640 <HAL_DMA_IRQHandler+0x960>)
 800349c:	429a      	cmp	r2, r3
 800349e:	d110      	bne.n	80034c2 <HAL_DMA_IRQHandler+0x7e2>
 80034a0:	6813      	ldr	r3, [r2, #0]
 80034a2:	f023 0314 	bic.w	r3, r3, #20
 80034a6:	6013      	str	r3, [r2, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80034a8:	2301      	movs	r3, #1
 80034aa:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 80034ae:	2300      	movs	r3, #0
 80034b0:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 80034b4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	f43f af0b 	beq.w	80032d2 <HAL_DMA_IRQHandler+0x5f2>
          hdma->XferCpltCallback(hdma);
 80034bc:	4620      	mov	r0, r4
 80034be:	4798      	blx	r3
 80034c0:	e707      	b.n	80032d2 <HAL_DMA_IRQHandler+0x5f2>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80034c2:	6813      	ldr	r3, [r2, #0]
 80034c4:	f023 030a 	bic.w	r3, r3, #10
 80034c8:	6013      	str	r3, [r2, #0]
 80034ca:	e7ed      	b.n	80034a8 <HAL_DMA_IRQHandler+0x7c8>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80034cc:	2508      	movs	r5, #8
 80034ce:	fa05 f000 	lsl.w	r0, r5, r0
 80034d2:	4208      	tst	r0, r1
 80034d4:	f43f aefd 	beq.w	80032d2 <HAL_DMA_IRQHandler+0x5f2>
 80034d8:	f013 0f08 	tst.w	r3, #8
 80034dc:	f43f aef9 	beq.w	80032d2 <HAL_DMA_IRQHandler+0x5f2>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034e0:	6813      	ldr	r3, [r2, #0]
 80034e2:	f023 030e 	bic.w	r3, r3, #14
 80034e6:	6013      	str	r3, [r2, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80034e8:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80034ea:	f003 031f 	and.w	r3, r3, #31
 80034ee:	2201      	movs	r2, #1
 80034f0:	fa02 f303 	lsl.w	r3, r2, r3
 80034f4:	6073      	str	r3, [r6, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80034f6:	6562      	str	r2, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_READY;
 80034f8:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 80034fc:	2300      	movs	r3, #0
 80034fe:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      if (hdma->XferErrorCallback != NULL)
 8003502:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8003504:	2b00      	cmp	r3, #0
 8003506:	f43f aee4 	beq.w	80032d2 <HAL_DMA_IRQHandler+0x5f2>
        hdma->XferErrorCallback(hdma);
 800350a:	4620      	mov	r0, r4
 800350c:	4798      	blx	r3
  }
 800350e:	e6e0      	b.n	80032d2 <HAL_DMA_IRQHandler+0x5f2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003510:	6822      	ldr	r2, [r4, #0]
 8003512:	e5ec      	b.n	80030ee <HAL_DMA_IRQHandler+0x40e>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003514:	fa25 f103 	lsr.w	r1, r5, r3
 8003518:	f011 0f01 	tst.w	r1, #1
 800351c:	f47f acad 	bne.w	8002e7a <HAL_DMA_IRQHandler+0x19a>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003520:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003522:	f003 031f 	and.w	r3, r3, #31
 8003526:	2104      	movs	r1, #4
 8003528:	4099      	lsls	r1, r3
 800352a:	420d      	tst	r5, r1
 800352c:	f43f ad88 	beq.w	8003040 <HAL_DMA_IRQHandler+0x360>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003530:	6822      	ldr	r2, [r4, #0]
 8003532:	6813      	ldr	r3, [r2, #0]
 8003534:	f013 0f02 	tst.w	r3, #2
 8003538:	f47f ad7d 	bne.w	8003036 <HAL_DMA_IRQHandler+0x356>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800353c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800353e:	f003 031f 	and.w	r3, r3, #31
 8003542:	2110      	movs	r1, #16
 8003544:	4099      	lsls	r1, r3
 8003546:	420d      	tst	r5, r1
 8003548:	d1e2      	bne.n	8003510 <HAL_DMA_IRQHandler+0x830>
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800354a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800354c:	f003 031f 	and.w	r3, r3, #31
 8003550:	2220      	movs	r2, #32
 8003552:	409a      	lsls	r2, r3
 8003554:	422a      	tst	r2, r5
 8003556:	f43f ae41 	beq.w	80031dc <HAL_DMA_IRQHandler+0x4fc>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800355a:	6821      	ldr	r1, [r4, #0]
 800355c:	4b36      	ldr	r3, [pc, #216]	@ (8003638 <HAL_DMA_IRQHandler+0x958>)
 800355e:	4837      	ldr	r0, [pc, #220]	@ (800363c <HAL_DMA_IRQHandler+0x95c>)
 8003560:	4281      	cmp	r1, r0
 8003562:	bf18      	it	ne
 8003564:	4299      	cmpne	r1, r3
 8003566:	bf0c      	ite	eq
 8003568:	2301      	moveq	r3, #1
 800356a:	2300      	movne	r3, #0
 800356c:	3018      	adds	r0, #24
 800356e:	4281      	cmp	r1, r0
 8003570:	bf08      	it	eq
 8003572:	f043 0301 	orreq.w	r3, r3, #1
 8003576:	3018      	adds	r0, #24
 8003578:	4281      	cmp	r1, r0
 800357a:	bf08      	it	eq
 800357c:	f043 0301 	orreq.w	r3, r3, #1
 8003580:	3018      	adds	r0, #24
 8003582:	4281      	cmp	r1, r0
 8003584:	bf08      	it	eq
 8003586:	f043 0301 	orreq.w	r3, r3, #1
 800358a:	3018      	adds	r0, #24
 800358c:	4281      	cmp	r1, r0
 800358e:	bf08      	it	eq
 8003590:	f043 0301 	orreq.w	r3, r3, #1
 8003594:	3018      	adds	r0, #24
 8003596:	4281      	cmp	r1, r0
 8003598:	bf08      	it	eq
 800359a:	f043 0301 	orreq.w	r3, r3, #1
 800359e:	3018      	adds	r0, #24
 80035a0:	4281      	cmp	r1, r0
 80035a2:	bf08      	it	eq
 80035a4:	f043 0301 	orreq.w	r3, r3, #1
 80035a8:	f500 7056 	add.w	r0, r0, #856	@ 0x358
 80035ac:	4281      	cmp	r1, r0
 80035ae:	bf08      	it	eq
 80035b0:	f043 0301 	orreq.w	r3, r3, #1
 80035b4:	3018      	adds	r0, #24
 80035b6:	4281      	cmp	r1, r0
 80035b8:	bf08      	it	eq
 80035ba:	f043 0301 	orreq.w	r3, r3, #1
 80035be:	3018      	adds	r0, #24
 80035c0:	4281      	cmp	r1, r0
 80035c2:	bf08      	it	eq
 80035c4:	f043 0301 	orreq.w	r3, r3, #1
 80035c8:	3018      	adds	r0, #24
 80035ca:	4281      	cmp	r1, r0
 80035cc:	bf08      	it	eq
 80035ce:	f043 0301 	orreq.w	r3, r3, #1
 80035d2:	3018      	adds	r0, #24
 80035d4:	4281      	cmp	r1, r0
 80035d6:	bf08      	it	eq
 80035d8:	f043 0301 	orreq.w	r3, r3, #1
 80035dc:	3018      	adds	r0, #24
 80035de:	4281      	cmp	r1, r0
 80035e0:	bf08      	it	eq
 80035e2:	f043 0301 	orreq.w	r3, r3, #1
 80035e6:	3018      	adds	r0, #24
 80035e8:	4281      	cmp	r1, r0
 80035ea:	bf08      	it	eq
 80035ec:	f043 0301 	orreq.w	r3, r3, #1
 80035f0:	b91b      	cbnz	r3, 80035fa <HAL_DMA_IRQHandler+0x91a>
 80035f2:	4b13      	ldr	r3, [pc, #76]	@ (8003640 <HAL_DMA_IRQHandler+0x960>)
 80035f4:	4299      	cmp	r1, r3
 80035f6:	f47f ada7 	bne.w	8003148 <HAL_DMA_IRQHandler+0x468>
 80035fa:	680b      	ldr	r3, [r1, #0]
 80035fc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003600:	2b00      	cmp	r3, #0
 8003602:	f43f adeb 	beq.w	80031dc <HAL_DMA_IRQHandler+0x4fc>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003606:	60b2      	str	r2, [r6, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003608:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b04      	cmp	r3, #4
 8003610:	f43f ad9e 	beq.w	8003150 <HAL_DMA_IRQHandler+0x470>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003614:	6823      	ldr	r3, [r4, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 800361c:	f43f adcc 	beq.w	80031b8 <HAL_DMA_IRQHandler+0x4d8>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8003626:	f47f adbb 	bne.w	80031a0 <HAL_DMA_IRQHandler+0x4c0>
            if(hdma->XferM1CpltCallback != NULL)
 800362a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800362c:	2b00      	cmp	r3, #0
 800362e:	f43f add5 	beq.w	80031dc <HAL_DMA_IRQHandler+0x4fc>
              hdma->XferM1CpltCallback(hdma);
 8003632:	4620      	mov	r0, r4
 8003634:	4798      	blx	r3
 8003636:	e5d1      	b.n	80031dc <HAL_DMA_IRQHandler+0x4fc>
 8003638:	40020010 	.word	0x40020010
 800363c:	40020028 	.word	0x40020028
 8003640:	400204b8 	.word	0x400204b8

08003644 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003644:	b530      	push	{r4, r5, lr}
 8003646:	b095      	sub	sp, #84	@ 0x54
 8003648:	4604      	mov	r4, r0
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 800364a:	224c      	movs	r2, #76	@ 0x4c
 800364c:	494f      	ldr	r1, [pc, #316]	@ (800378c <HAL_FDCAN_Init+0x148>)
 800364e:	a801      	add	r0, sp, #4
 8003650:	f004 fdc7 	bl	80081e2 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003654:	2c00      	cmp	r4, #0
 8003656:	f000 8215 	beq.w	8003a84 <HAL_FDCAN_Init+0x440>
  {
    return HAL_ERROR;
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800365a:	6822      	ldr	r2, [r4, #0]
 800365c:	4b4c      	ldr	r3, [pc, #304]	@ (8003790 <HAL_FDCAN_Init+0x14c>)
 800365e:	429a      	cmp	r2, r3
 8003660:	d020      	beq.n	80036a4 <HAL_FDCAN_Init+0x60>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003662:	f894 3098 	ldrb.w	r3, [r4, #152]	@ 0x98
 8003666:	b30b      	cbz	r3, 80036ac <HAL_FDCAN_Init+0x68>
    HAL_FDCAN_MspInit(hfdcan);
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003668:	6822      	ldr	r2, [r4, #0]
 800366a:	6993      	ldr	r3, [r2, #24]
 800366c:	f023 0310 	bic.w	r3, r3, #16
 8003670:	6193      	str	r3, [r2, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003672:	f7fe fb7d 	bl	8001d70 <HAL_GetTick>
 8003676:	4605      	mov	r5, r0

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003678:	6823      	ldr	r3, [r4, #0]
 800367a:	699a      	ldr	r2, [r3, #24]
 800367c:	f012 0f08 	tst.w	r2, #8
 8003680:	d01a      	beq.n	80036b8 <HAL_FDCAN_Init+0x74>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003682:	f7fe fb75 	bl	8001d70 <HAL_GetTick>
 8003686:	1b40      	subs	r0, r0, r5
 8003688:	280a      	cmp	r0, #10
 800368a:	d9f5      	bls.n	8003678 <HAL_FDCAN_Init+0x34>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800368c:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8003690:	f043 0301 	orr.w	r3, r3, #1
 8003694:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003698:	2303      	movs	r3, #3
 800369a:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98

      return HAL_ERROR;
 800369e:	2001      	movs	r0, #1
  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);

  /* Return function status */
  return status;
}
 80036a0:	b015      	add	sp, #84	@ 0x54
 80036a2:	bd30      	pop	{r4, r5, pc}
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80036a4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80036a8:	6063      	str	r3, [r4, #4]
 80036aa:	e7da      	b.n	8003662 <HAL_FDCAN_Init+0x1e>
    hfdcan->Lock = HAL_UNLOCKED;
 80036ac:	f884 3099 	strb.w	r3, [r4, #153]	@ 0x99
    HAL_FDCAN_MspInit(hfdcan);
 80036b0:	4620      	mov	r0, r4
 80036b2:	f7fd f8a7 	bl	8000804 <HAL_FDCAN_MspInit>
 80036b6:	e7d7      	b.n	8003668 <HAL_FDCAN_Init+0x24>
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80036b8:	699a      	ldr	r2, [r3, #24]
 80036ba:	f042 0201 	orr.w	r2, r2, #1
 80036be:	619a      	str	r2, [r3, #24]
  tickstart = HAL_GetTick();
 80036c0:	f7fe fb56 	bl	8001d70 <HAL_GetTick>
 80036c4:	4605      	mov	r5, r0
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80036c6:	6823      	ldr	r3, [r4, #0]
 80036c8:	699a      	ldr	r2, [r3, #24]
 80036ca:	f012 0f01 	tst.w	r2, #1
 80036ce:	d10f      	bne.n	80036f0 <HAL_FDCAN_Init+0xac>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80036d0:	f7fe fb4e 	bl	8001d70 <HAL_GetTick>
 80036d4:	1b40      	subs	r0, r0, r5
 80036d6:	280a      	cmp	r0, #10
 80036d8:	d9f5      	bls.n	80036c6 <HAL_FDCAN_Init+0x82>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80036da:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 80036de:	f043 0301 	orr.w	r3, r3, #1
 80036e2:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80036e6:	2303      	movs	r3, #3
 80036e8:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
      return HAL_ERROR;
 80036ec:	2001      	movs	r0, #1
 80036ee:	e7d7      	b.n	80036a0 <HAL_FDCAN_Init+0x5c>
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80036f0:	699a      	ldr	r2, [r3, #24]
 80036f2:	f042 0202 	orr.w	r2, r2, #2
 80036f6:	619a      	str	r2, [r3, #24]
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80036f8:	7c23      	ldrb	r3, [r4, #16]
 80036fa:	2b01      	cmp	r3, #1
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80036fc:	6822      	ldr	r2, [r4, #0]
 80036fe:	6993      	ldr	r3, [r2, #24]
 8003700:	bf0c      	ite	eq
 8003702:	f023 0340 	biceq.w	r3, r3, #64	@ 0x40
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003706:	f043 0340 	orrne.w	r3, r3, #64	@ 0x40
 800370a:	6193      	str	r3, [r2, #24]
  if (hfdcan->Init.TransmitPause == ENABLE)
 800370c:	7c63      	ldrb	r3, [r4, #17]
 800370e:	2b01      	cmp	r3, #1
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003710:	6822      	ldr	r2, [r4, #0]
 8003712:	6993      	ldr	r3, [r2, #24]
 8003714:	bf0c      	ite	eq
 8003716:	f443 4380 	orreq.w	r3, r3, #16384	@ 0x4000
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800371a:	f423 4380 	bicne.w	r3, r3, #16384	@ 0x4000
 800371e:	6193      	str	r3, [r2, #24]
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003720:	7ca3      	ldrb	r3, [r4, #18]
 8003722:	2b01      	cmp	r3, #1
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003724:	6822      	ldr	r2, [r4, #0]
 8003726:	6993      	ldr	r3, [r2, #24]
 8003728:	bf0c      	ite	eq
 800372a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800372e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003732:	6193      	str	r3, [r2, #24]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003734:	6822      	ldr	r2, [r4, #0]
 8003736:	6993      	ldr	r3, [r2, #24]
 8003738:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800373c:	68a1      	ldr	r1, [r4, #8]
 800373e:	430b      	orrs	r3, r1
 8003740:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003742:	6822      	ldr	r2, [r4, #0]
 8003744:	6993      	ldr	r3, [r2, #24]
 8003746:	f023 03a4 	bic.w	r3, r3, #164	@ 0xa4
 800374a:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800374c:	6822      	ldr	r2, [r4, #0]
 800374e:	6913      	ldr	r3, [r2, #16]
 8003750:	f023 0310 	bic.w	r3, r3, #16
 8003754:	6113      	str	r3, [r2, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003756:	68e3      	ldr	r3, [r4, #12]
 8003758:	2b01      	cmp	r3, #1
 800375a:	d01b      	beq.n	8003794 <HAL_FDCAN_Init+0x150>
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800375c:	b1fb      	cbz	r3, 800379e <HAL_FDCAN_Init+0x15a>
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800375e:	2b02      	cmp	r3, #2
 8003760:	f000 8166 	beq.w	8003a30 <HAL_FDCAN_Init+0x3ec>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003764:	6822      	ldr	r2, [r4, #0]
 8003766:	6993      	ldr	r3, [r2, #24]
 8003768:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800376c:	6193      	str	r3, [r2, #24]
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800376e:	6822      	ldr	r2, [r4, #0]
 8003770:	6913      	ldr	r3, [r2, #16]
 8003772:	f043 0310 	orr.w	r3, r3, #16
 8003776:	6113      	str	r3, [r2, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003778:	68e3      	ldr	r3, [r4, #12]
 800377a:	2b03      	cmp	r3, #3
 800377c:	d10f      	bne.n	800379e <HAL_FDCAN_Init+0x15a>
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800377e:	6822      	ldr	r2, [r4, #0]
 8003780:	6993      	ldr	r3, [r2, #24]
 8003782:	f043 0320 	orr.w	r3, r3, #32
 8003786:	6193      	str	r3, [r2, #24]
 8003788:	e009      	b.n	800379e <HAL_FDCAN_Init+0x15a>
 800378a:	bf00      	nop
 800378c:	08009d40 	.word	0x08009d40
 8003790:	4000a000 	.word	0x4000a000
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003794:	6822      	ldr	r2, [r4, #0]
 8003796:	6993      	ldr	r3, [r2, #24]
 8003798:	f043 0304 	orr.w	r3, r3, #4
 800379c:	6193      	str	r3, [r2, #24]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800379e:	6822      	ldr	r2, [r4, #0]
 80037a0:	69a3      	ldr	r3, [r4, #24]
 80037a2:	1e59      	subs	r1, r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80037a4:	69e3      	ldr	r3, [r4, #28]
 80037a6:	3b01      	subs	r3, #1
 80037a8:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80037aa:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80037ae:	6a21      	ldr	r1, [r4, #32]
 80037b0:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80037b2:	430b      	orrs	r3, r1
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80037b4:	6961      	ldr	r1, [r4, #20]
 80037b6:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80037b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80037bc:	61d3      	str	r3, [r2, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80037be:	68a3      	ldr	r3, [r4, #8]
 80037c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80037c4:	f000 813a 	beq.w	8003a3c <HAL_FDCAN_Init+0x3f8>
  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80037c8:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80037ca:	b133      	cbz	r3, 80037da <HAL_FDCAN_Init+0x196>
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80037cc:	6822      	ldr	r2, [r4, #0]
 80037ce:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 80037d2:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 80037d4:	430b      	orrs	r3, r1
 80037d6:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80037da:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80037dc:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80037de:	42d3      	cmn	r3, r2
 80037e0:	d00d      	beq.n	80037fe <HAL_FDCAN_Init+0x1ba>
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80037e2:	6821      	ldr	r1, [r4, #0]
 80037e4:	f8d1 30c8 	ldr.w	r3, [r1, #200]	@ 0xc8
 80037e8:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 80037ea:	a814      	add	r0, sp, #80	@ 0x50
 80037ec:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80037f0:	f023 0307 	bic.w	r3, r3, #7
 80037f4:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	f8c1 30c8 	str.w	r3, [r1, #200]	@ 0xc8
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80037fe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003800:	b16b      	cbz	r3, 800381e <HAL_FDCAN_Init+0x1da>
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8003802:	6821      	ldr	r1, [r4, #0]
 8003804:	f8d1 30bc 	ldr.w	r3, [r1, #188]	@ 0xbc
 8003808:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800380a:	a814      	add	r0, sp, #80	@ 0x50
 800380c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003810:	f023 0307 	bic.w	r3, r3, #7
 8003814:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8003818:	4313      	orrs	r3, r2
 800381a:	f8c1 30bc 	str.w	r3, [r1, #188]	@ 0xbc
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800381e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8003820:	b173      	cbz	r3, 8003840 <HAL_FDCAN_Init+0x1fc>
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8003822:	6821      	ldr	r1, [r4, #0]
 8003824:	f8d1 30bc 	ldr.w	r3, [r1, #188]	@ 0xbc
 8003828:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 800382a:	a814      	add	r0, sp, #80	@ 0x50
 800382c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003830:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8003834:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003838:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800383c:	f8c1 30bc 	str.w	r3, [r1, #188]	@ 0xbc
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8003840:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8003842:	b173      	cbz	r3, 8003862 <HAL_FDCAN_Init+0x21e>
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8003844:	6821      	ldr	r1, [r4, #0]
 8003846:	f8d1 30bc 	ldr.w	r3, [r1, #188]	@ 0xbc
 800384a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800384c:	a814      	add	r0, sp, #80	@ 0x50
 800384e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003852:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8003856:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800385a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800385e:	f8c1 30bc 	str.w	r3, [r1, #188]	@ 0xbc
  if (hfdcan->Instance == FDCAN1)
 8003862:	6822      	ldr	r2, [r4, #0]
 8003864:	4b88      	ldr	r3, [pc, #544]	@ (8003a88 <HAL_FDCAN_Init+0x444>)
 8003866:	429a      	cmp	r2, r3
 8003868:	f000 80f9 	beq.w	8003a5e <HAL_FDCAN_Init+0x41a>
  hfdcan->LatestTxFifoQRequest = 0U;
 800386c:	2300      	movs	r3, #0
 800386e:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003872:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003876:	2301      	movs	r3, #1
 8003878:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800387c:	6b63      	ldr	r3, [r4, #52]	@ 0x34

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800387e:	6820      	ldr	r0, [r4, #0]
 8003880:	f8d0 1084 	ldr.w	r1, [r0, #132]	@ 0x84
 8003884:	4a81      	ldr	r2, [pc, #516]	@ (8003a8c <HAL_FDCAN_Init+0x448>)
 8003886:	4011      	ands	r1, r2
 8003888:	ea41 0183 	orr.w	r1, r1, r3, lsl #2
 800388c:	f8c0 1084 	str.w	r1, [r0, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8003890:	6820      	ldr	r0, [r4, #0]
 8003892:	f8d0 1084 	ldr.w	r1, [r0, #132]	@ 0x84
 8003896:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 8003898:	f421 017f 	bic.w	r1, r1, #16711680	@ 0xff0000
 800389c:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80038a0:	f8c0 1084 	str.w	r1, [r0, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80038a4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80038a6:	440b      	add	r3, r1
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80038a8:	6820      	ldr	r0, [r4, #0]
 80038aa:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
 80038ae:	4011      	ands	r1, r2
 80038b0:	ea41 0183 	orr.w	r1, r1, r3, lsl #2
 80038b4:	f8c0 1088 	str.w	r1, [r0, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80038b8:	6820      	ldr	r0, [r4, #0]
 80038ba:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
 80038be:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 80038c0:	f421 01fe 	bic.w	r1, r1, #8323072	@ 0x7f0000
 80038c4:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80038c8:	f8c0 1088 	str.w	r1, [r0, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80038cc:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80038ce:	eb03 0341 	add.w	r3, r3, r1, lsl #1
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80038d2:	6820      	ldr	r0, [r4, #0]
 80038d4:	f8d0 10a0 	ldr.w	r1, [r0, #160]	@ 0xa0
 80038d8:	4011      	ands	r1, r2
 80038da:	ea41 0183 	orr.w	r1, r1, r3, lsl #2
 80038de:	f8c0 10a0 	str.w	r1, [r0, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80038e2:	6820      	ldr	r0, [r4, #0]
 80038e4:	f8d0 10a0 	ldr.w	r1, [r0, #160]	@ 0xa0
 80038e8:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 80038ea:	f421 01fe 	bic.w	r1, r1, #8323072	@ 0x7f0000
 80038ee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80038f2:	f8c0 10a0 	str.w	r1, [r0, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80038f6:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 80038f8:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 80038fa:	fb00 3301 	mla	r3, r0, r1, r3
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80038fe:	6820      	ldr	r0, [r4, #0]
 8003900:	f8d0 10b0 	ldr.w	r1, [r0, #176]	@ 0xb0
 8003904:	4011      	ands	r1, r2
 8003906:	ea41 0183 	orr.w	r1, r1, r3, lsl #2
 800390a:	f8c0 10b0 	str.w	r1, [r0, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800390e:	6820      	ldr	r0, [r4, #0]
 8003910:	f8d0 10b0 	ldr.w	r1, [r0, #176]	@ 0xb0
 8003914:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 8003916:	f421 01fe 	bic.w	r1, r1, #8323072	@ 0x7f0000
 800391a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800391e:	f8c0 10b0 	str.w	r1, [r0, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8003922:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8003924:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8003926:	fb00 3301 	mla	r3, r0, r1, r3
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800392a:	6820      	ldr	r0, [r4, #0]
 800392c:	f8d0 10ac 	ldr.w	r1, [r0, #172]	@ 0xac
 8003930:	4011      	ands	r1, r2
 8003932:	ea41 0183 	orr.w	r1, r1, r3, lsl #2
 8003936:	f8c0 10ac 	str.w	r1, [r0, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800393a:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 800393c:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 800393e:	fb00 3301 	mla	r3, r0, r1, r3
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8003942:	6820      	ldr	r0, [r4, #0]
 8003944:	f8d0 10f0 	ldr.w	r1, [r0, #240]	@ 0xf0
 8003948:	4011      	ands	r1, r2
 800394a:	ea41 0183 	orr.w	r1, r1, r3, lsl #2
 800394e:	f8c0 10f0 	str.w	r1, [r0, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8003952:	6820      	ldr	r0, [r4, #0]
 8003954:	f8d0 10f0 	ldr.w	r1, [r0, #240]	@ 0xf0
 8003958:	6da5      	ldr	r5, [r4, #88]	@ 0x58
 800395a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
 800395e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8003962:	f8c0 10f0 	str.w	r1, [r0, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8003966:	6825      	ldr	r5, [r4, #0]
 8003968:	f8d5 10c0 	ldr.w	r1, [r5, #192]	@ 0xc0
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800396c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800396e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8003972:	ea01 0302 	and.w	r3, r1, r2
 8003976:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
 800397a:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 800397e:	6822      	ldr	r2, [r4, #0]
 8003980:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 8003984:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8003986:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 800398a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800398e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8003992:	6822      	ldr	r2, [r4, #0]
 8003994:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 8003998:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 800399a:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 800399e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80039a2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80039a6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80039a8:	4a39      	ldr	r2, [pc, #228]	@ (8003a90 <HAL_FDCAN_Init+0x44c>)
 80039aa:	441a      	add	r2, r3
 80039ac:	0092      	lsls	r2, r2, #2
 80039ae:	66e2      	str	r2, [r4, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80039b0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80039b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80039b6:	6723      	str	r3, [r4, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80039b8:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80039ba:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80039be:	6763      	str	r3, [r4, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80039c0:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 80039c2:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 80039c4:	fb00 f101 	mul.w	r1, r0, r1
 80039c8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80039cc:	67a3      	str	r3, [r4, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80039ce:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80039d0:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 80039d2:	fb00 f101 	mul.w	r1, r0, r1
 80039d6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80039da:	67e3      	str	r3, [r4, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80039dc:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 80039de:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 80039e0:	fb00 f101 	mul.w	r1, r0, r1
 80039e4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80039e8:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80039ec:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 80039ee:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80039f2:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80039f6:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 80039f8:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 80039fa:	fb01 f000 	mul.w	r0, r1, r0
 80039fe:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8003a02:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8003a06:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8003a08:	fb00 f101 	mul.w	r1, r0, r1
 8003a0c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8003a10:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8003a14:	491f      	ldr	r1, [pc, #124]	@ (8003a94 <HAL_FDCAN_Init+0x450>)
 8003a16:	428b      	cmp	r3, r1
 8003a18:	d829      	bhi.n	8003a6e <HAL_FDCAN_Init+0x42a>
    return HAL_ERROR;
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d225      	bcs.n	8003a6a <HAL_FDCAN_Init+0x426>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8003a1e:	2100      	movs	r1, #0
 8003a20:	f842 1b04 	str.w	r1, [r2], #4
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003a24:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d3f9      	bcc.n	8003a20 <HAL_FDCAN_Init+0x3dc>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003a2c:	2000      	movs	r0, #0
 8003a2e:	e637      	b.n	80036a0 <HAL_FDCAN_Init+0x5c>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003a30:	6822      	ldr	r2, [r4, #0]
 8003a32:	6993      	ldr	r3, [r2, #24]
 8003a34:	f043 0320 	orr.w	r3, r3, #32
 8003a38:	6193      	str	r3, [r2, #24]
 8003a3a:	e6b0      	b.n	800379e <HAL_FDCAN_Init+0x15a>
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003a3c:	6822      	ldr	r2, [r4, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8003a3e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003a40:	1e59      	subs	r1, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8003a42:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003a44:	3b01      	subs	r3, #1
 8003a46:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8003a48:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003a4c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8003a4e:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8003a50:	430b      	orrs	r3, r1
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003a52:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003a54:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8003a56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003a5a:	60d3      	str	r3, [r2, #12]
 8003a5c:	e6b4      	b.n	80037c8 <HAL_FDCAN_Init+0x184>
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8003a5e:	6862      	ldr	r2, [r4, #4]
 8003a60:	6893      	ldr	r3, [r2, #8]
 8003a62:	f023 0303 	bic.w	r3, r3, #3
 8003a66:	6093      	str	r3, [r2, #8]
 8003a68:	e700      	b.n	800386c <HAL_FDCAN_Init+0x228>
  return HAL_OK;
 8003a6a:	2000      	movs	r0, #0
 8003a6c:	e618      	b.n	80036a0 <HAL_FDCAN_Init+0x5c>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003a6e:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8003a72:	f043 0320 	orr.w	r3, r3, #32
 8003a76:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
    return HAL_ERROR;
 8003a80:	2001      	movs	r0, #1
 8003a82:	e60d      	b.n	80036a0 <HAL_FDCAN_Init+0x5c>
    return HAL_ERROR;
 8003a84:	2001      	movs	r0, #1
 8003a86:	e60b      	b.n	80036a0 <HAL_FDCAN_Init+0x5c>
 8003a88:	4000a000 	.word	0x4000a000
 8003a8c:	ffff0003 	.word	0xffff0003
 8003a90:	10002b00 	.word	0x10002b00
 8003a94:	4000d3fc 	.word	0x4000d3fc

08003a98 <HAL_FDCAN_ConfigFilter>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003a98:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003a9c:	3b01      	subs	r3, #1
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d907      	bls.n	8003ab4 <HAL_FDCAN_ConfigFilter+0x1c>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003aa4:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8003aa8:	f043 0302 	orr.w	r3, r3, #2
 8003aac:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
    return HAL_ERROR;
 8003ab0:	2001      	movs	r0, #1
}
 8003ab2:	4770      	bx	lr
    if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8003ab4:	68cb      	ldr	r3, [r1, #12]
    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8003ab6:	680a      	ldr	r2, [r1, #0]
 8003ab8:	b9d2      	cbnz	r2, 8003af0 <HAL_FDCAN_ConfigFilter+0x58>
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8003aba:	2b07      	cmp	r3, #7
 8003abc:	d00e      	beq.n	8003adc <HAL_FDCAN_ConfigFilter+0x44>
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003abe:	688a      	ldr	r2, [r1, #8]
                           (sFilterConfig->FilterConfig << 27U) |
 8003ac0:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003ac2:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8003ac6:	694a      	ldr	r2, [r1, #20]
 8003ac8:	4313      	orrs	r3, r2
                           (sFilterConfig->FilterID1 << 16U)    |
 8003aca:	690a      	ldr	r2, [r1, #16]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003acc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8003ad0:	6849      	ldr	r1, [r1, #4]
      *FilterAddress = FilterElementW1;
 8003ad2:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
 8003ad4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    return HAL_OK;
 8003ad8:	2000      	movs	r0, #0
 8003ada:	4770      	bx	lr
                           (sFilterConfig->FilterID1 << 16U)       |
 8003adc:	690a      	ldr	r2, [r1, #16]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8003ade:	69cb      	ldr	r3, [r1, #28]
 8003ae0:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8003ae2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8003ae6:	698a      	ldr	r2, [r1, #24]
 8003ae8:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8003aea:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 8003aee:	e7ef      	b.n	8003ad0 <HAL_FDCAN_ConfigFilter+0x38>
{
 8003af0:	b410      	push	{r4}
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8003af2:	690a      	ldr	r2, [r1, #16]
 8003af4:	ea42 7243 	orr.w	r2, r2, r3, lsl #29
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8003af8:	2b07      	cmp	r3, #7
 8003afa:	d00e      	beq.n	8003b1a <HAL_FDCAN_ConfigFilter+0x82>
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8003afc:	688c      	ldr	r4, [r1, #8]
 8003afe:	694b      	ldr	r3, [r1, #20]
 8003b00:	ea43 7384 	orr.w	r3, r3, r4, lsl #30
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8003b04:	684c      	ldr	r4, [r1, #4]
 8003b06:	6f01      	ldr	r1, [r0, #112]	@ 0x70
 8003b08:	eb01 00c4 	add.w	r0, r1, r4, lsl #3
      *FilterAddress = FilterElementW1;
 8003b0c:	f841 2034 	str.w	r2, [r1, r4, lsl #3]
      *FilterAddress = FilterElementW2;
 8003b10:	6043      	str	r3, [r0, #4]
    return HAL_OK;
 8003b12:	2000      	movs	r0, #0
}
 8003b14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b18:	4770      	bx	lr
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8003b1a:	698b      	ldr	r3, [r1, #24]
 8003b1c:	e7f2      	b.n	8003b04 <HAL_FDCAN_ConfigFilter+0x6c>

08003b1e <HAL_FDCAN_Start>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003b1e:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d007      	beq.n	8003b38 <HAL_FDCAN_Start+0x1a>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003b28:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8003b2c:	f043 0304 	orr.w	r3, r3, #4
 8003b30:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
    return HAL_ERROR;
 8003b34:	2001      	movs	r0, #1
}
 8003b36:	4770      	bx	lr
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8003b38:	2302      	movs	r3, #2
 8003b3a:	f880 3098 	strb.w	r3, [r0, #152]	@ 0x98
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003b3e:	6802      	ldr	r2, [r0, #0]
 8003b40:	6993      	ldr	r3, [r2, #24]
 8003b42:	f023 0301 	bic.w	r3, r3, #1
 8003b46:	6193      	str	r3, [r2, #24]
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
    return HAL_OK;
 8003b4e:	4618      	mov	r0, r3
 8003b50:	4770      	bx	lr
	...

08003b54 <HAL_FDCAN_GetRxMessage>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003b54:	f890 c098 	ldrb.w	ip, [r0, #152]	@ 0x98
 8003b58:	fa5f fc8c 	uxtb.w	ip, ip
  if (state == HAL_FDCAN_STATE_BUSY)
 8003b5c:	f1bc 0f02 	cmp.w	ip, #2
 8003b60:	f040 80d1 	bne.w	8003d06 <HAL_FDCAN_GetRxMessage+0x1b2>
{
 8003b64:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003b66:	2940      	cmp	r1, #64	@ 0x40
 8003b68:	d00c      	beq.n	8003b84 <HAL_FDCAN_GetRxMessage+0x30>
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8003b6a:	2941      	cmp	r1, #65	@ 0x41
 8003b6c:	d037      	beq.n	8003bde <HAL_FDCAN_GetRxMessage+0x8a>
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8003b6e:	6d04      	ldr	r4, [r0, #80]	@ 0x50
 8003b70:	428c      	cmp	r4, r1
 8003b72:	d861      	bhi.n	8003c38 <HAL_FDCAN_GetRxMessage+0xe4>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003b74:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8003b78:	f043 0320 	orr.w	r3, r3, #32
 8003b7c:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
        return HAL_ERROR;
 8003b80:	2001      	movs	r0, #1
}
 8003b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8003b84:	6804      	ldr	r4, [r0, #0]
 8003b86:	f8d4 50a0 	ldr.w	r5, [r4, #160]	@ 0xa0
 8003b8a:	f415 0ffe 	tst.w	r5, #8323072	@ 0x7f0000
 8003b8e:	d00c      	beq.n	8003baa <HAL_FDCAN_GetRxMessage+0x56>
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8003b90:	f8d4 50a4 	ldr.w	r5, [r4, #164]	@ 0xa4
 8003b94:	f015 0f7f 	tst.w	r5, #127	@ 0x7f
 8003b98:	d10f      	bne.n	8003bba <HAL_FDCAN_GetRxMessage+0x66>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003b9a:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8003b9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ba2:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
        return HAL_ERROR;
 8003ba6:	2001      	movs	r0, #1
 8003ba8:	e7eb      	b.n	8003b82 <HAL_FDCAN_GetRxMessage+0x2e>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003baa:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8003bae:	f043 0320 	orr.w	r3, r3, #32
 8003bb2:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
        return HAL_ERROR;
 8003bb6:	2001      	movs	r0, #1
 8003bb8:	e7e3      	b.n	8003b82 <HAL_FDCAN_GetRxMessage+0x2e>
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8003bba:	f8d4 50a4 	ldr.w	r5, [r4, #164]	@ 0xa4
 8003bbe:	f015 7f80 	tst.w	r5, #16777216	@ 0x1000000
 8003bc2:	d001      	beq.n	8003bc8 <HAL_FDCAN_GetRxMessage+0x74>
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003bc4:	f8d4 50a0 	ldr.w	r5, [r4, #160]	@ 0xa0
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8003bc8:	f8d4 60a4 	ldr.w	r6, [r4, #164]	@ 0xa4
 8003bcc:	f3c6 2605 	ubfx	r6, r6, #8, #6
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8003bd0:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8003bd2:	fb06 f404 	mul.w	r4, r6, r4
 8003bd6:	6f45      	ldr	r5, [r0, #116]	@ 0x74
 8003bd8:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 8003bdc:	e033      	b.n	8003c46 <HAL_FDCAN_GetRxMessage+0xf2>
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8003bde:	6804      	ldr	r4, [r0, #0]
 8003be0:	f8d4 50b0 	ldr.w	r5, [r4, #176]	@ 0xb0
 8003be4:	f415 0ffe 	tst.w	r5, #8323072	@ 0x7f0000
 8003be8:	d00c      	beq.n	8003c04 <HAL_FDCAN_GetRxMessage+0xb0>
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8003bea:	f8d4 50b4 	ldr.w	r5, [r4, #180]	@ 0xb4
 8003bee:	f015 0f7f 	tst.w	r5, #127	@ 0x7f
 8003bf2:	d10f      	bne.n	8003c14 <HAL_FDCAN_GetRxMessage+0xc0>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003bf4:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8003bf8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bfc:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
        return HAL_ERROR;
 8003c00:	2001      	movs	r0, #1
 8003c02:	e7be      	b.n	8003b82 <HAL_FDCAN_GetRxMessage+0x2e>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003c04:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8003c08:	f043 0320 	orr.w	r3, r3, #32
 8003c0c:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
        return HAL_ERROR;
 8003c10:	2001      	movs	r0, #1
 8003c12:	e7b6      	b.n	8003b82 <HAL_FDCAN_GetRxMessage+0x2e>
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8003c14:	f8d4 50b4 	ldr.w	r5, [r4, #180]	@ 0xb4
 8003c18:	f015 7f80 	tst.w	r5, #16777216	@ 0x1000000
 8003c1c:	d001      	beq.n	8003c22 <HAL_FDCAN_GetRxMessage+0xce>
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003c1e:	f8d4 50b0 	ldr.w	r5, [r4, #176]	@ 0xb0
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8003c22:	f8d4 60b4 	ldr.w	r6, [r4, #180]	@ 0xb4
 8003c26:	f3c6 2605 	ubfx	r6, r6, #8, #6
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8003c2a:	6cc4      	ldr	r4, [r0, #76]	@ 0x4c
 8003c2c:	fb06 f404 	mul.w	r4, r6, r4
 8003c30:	6f85      	ldr	r5, [r0, #120]	@ 0x78
 8003c32:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 8003c36:	e006      	b.n	8003c46 <HAL_FDCAN_GetRxMessage+0xf2>
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8003c38:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 8003c3a:	fb01 f404 	mul.w	r4, r1, r4
 8003c3e:	6fc5      	ldr	r5, [r0, #124]	@ 0x7c
 8003c40:	eb05 0584 	add.w	r5, r5, r4, lsl #2
  uint32_t GetIndex = 0;
 8003c44:	2600      	movs	r6, #0
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8003c46:	682c      	ldr	r4, [r5, #0]
 8003c48:	f004 4480 	and.w	r4, r4, #1073741824	@ 0x40000000
 8003c4c:	6054      	str	r4, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8003c4e:	2c00      	cmp	r4, #0
 8003c50:	d142      	bne.n	8003cd8 <HAL_FDCAN_GetRxMessage+0x184>
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8003c52:	682c      	ldr	r4, [r5, #0]
 8003c54:	f3c4 448a 	ubfx	r4, r4, #18, #11
 8003c58:	6014      	str	r4, [r2, #0]
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8003c5a:	682c      	ldr	r4, [r5, #0]
 8003c5c:	f004 5400 	and.w	r4, r4, #536870912	@ 0x20000000
 8003c60:	6094      	str	r4, [r2, #8]
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8003c62:	682c      	ldr	r4, [r5, #0]
 8003c64:	f004 4400 	and.w	r4, r4, #2147483648	@ 0x80000000
 8003c68:	6114      	str	r4, [r2, #16]
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8003c6a:	88ac      	ldrh	r4, [r5, #4]
 8003c6c:	61d4      	str	r4, [r2, #28]
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8003c6e:	686c      	ldr	r4, [r5, #4]
 8003c70:	f404 2470 	and.w	r4, r4, #983040	@ 0xf0000
 8003c74:	60d4      	str	r4, [r2, #12]
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8003c76:	686f      	ldr	r7, [r5, #4]
 8003c78:	f407 1780 	and.w	r7, r7, #1048576	@ 0x100000
 8003c7c:	6157      	str	r7, [r2, #20]
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8003c7e:	686f      	ldr	r7, [r5, #4]
 8003c80:	f407 1700 	and.w	r7, r7, #2097152	@ 0x200000
 8003c84:	6197      	str	r7, [r2, #24]
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8003c86:	79ef      	ldrb	r7, [r5, #7]
 8003c88:	f007 077f 	and.w	r7, r7, #127	@ 0x7f
 8003c8c:	6217      	str	r7, [r2, #32]
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8003c8e:	686f      	ldr	r7, [r5, #4]
 8003c90:	0fff      	lsrs	r7, r7, #31
 8003c92:	6257      	str	r7, [r2, #36]	@ 0x24
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8003c94:	0c24      	lsrs	r4, r4, #16
 8003c96:	4f20      	ldr	r7, [pc, #128]	@ (8003d18 <HAL_FDCAN_GetRxMessage+0x1c4>)
 8003c98:	5d3c      	ldrb	r4, [r7, r4]
 8003c9a:	b184      	cbz	r4, 8003cbe <HAL_FDCAN_GetRxMessage+0x16a>
 8003c9c:	1dec      	adds	r4, r5, #7
 8003c9e:	3b01      	subs	r3, #1
      pRxData[ByteCounter] = pData[ByteCounter];
 8003ca0:	46a4      	mov	ip, r4
 8003ca2:	f814 ef01 	ldrb.w	lr, [r4, #1]!
 8003ca6:	f803 ef01 	strb.w	lr, [r3, #1]!
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8003caa:	f8b2 e00e 	ldrh.w	lr, [r2, #14]
 8003cae:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8003cb2:	f1ac 0c06 	sub.w	ip, ip, #6
 8003cb6:	ebac 0c05 	sub.w	ip, ip, r5
 8003cba:	45e6      	cmp	lr, ip
 8003cbc:	d8f0      	bhi.n	8003ca0 <HAL_FDCAN_GetRxMessage+0x14c>
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003cbe:	2940      	cmp	r1, #64	@ 0x40
 8003cc0:	d00e      	beq.n	8003ce0 <HAL_FDCAN_GetRxMessage+0x18c>
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8003cc2:	2941      	cmp	r1, #65	@ 0x41
 8003cc4:	d011      	beq.n	8003cea <HAL_FDCAN_GetRxMessage+0x196>
      if (RxLocation < FDCAN_RX_BUFFER32)
 8003cc6:	291f      	cmp	r1, #31
 8003cc8:	d814      	bhi.n	8003cf4 <HAL_FDCAN_GetRxMessage+0x1a0>
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8003cca:	6802      	ldr	r2, [r0, #0]
 8003ccc:	2301      	movs	r3, #1
 8003cce:	408b      	lsls	r3, r1
 8003cd0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
    return HAL_OK;
 8003cd4:	2000      	movs	r0, #0
 8003cd6:	e754      	b.n	8003b82 <HAL_FDCAN_GetRxMessage+0x2e>
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8003cd8:	682c      	ldr	r4, [r5, #0]
 8003cda:	f024 4460 	bic.w	r4, r4, #3758096384	@ 0xe0000000
 8003cde:	e7bb      	b.n	8003c58 <HAL_FDCAN_GetRxMessage+0x104>
      hfdcan->Instance->RXF0A = GetIndex;
 8003ce0:	6803      	ldr	r3, [r0, #0]
 8003ce2:	f8c3 60a8 	str.w	r6, [r3, #168]	@ 0xa8
    return HAL_OK;
 8003ce6:	2000      	movs	r0, #0
 8003ce8:	e74b      	b.n	8003b82 <HAL_FDCAN_GetRxMessage+0x2e>
      hfdcan->Instance->RXF1A = GetIndex;
 8003cea:	6803      	ldr	r3, [r0, #0]
 8003cec:	f8c3 60b8 	str.w	r6, [r3, #184]	@ 0xb8
    return HAL_OK;
 8003cf0:	2000      	movs	r0, #0
 8003cf2:	e746      	b.n	8003b82 <HAL_FDCAN_GetRxMessage+0x2e>
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8003cf4:	6802      	ldr	r2, [r0, #0]
 8003cf6:	f001 011f 	and.w	r1, r1, #31
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	408b      	lsls	r3, r1
 8003cfe:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
    return HAL_OK;
 8003d02:	2000      	movs	r0, #0
 8003d04:	e73d      	b.n	8003b82 <HAL_FDCAN_GetRxMessage+0x2e>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003d06:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8003d0a:	f043 0308 	orr.w	r3, r3, #8
 8003d0e:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
    return HAL_ERROR;
 8003d12:	2001      	movs	r0, #1
}
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	08009e88 	.word	0x08009e88

08003d1c <HAL_FDCAN_ActivateNotification>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003d1c:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003d20:	3b01      	subs	r3, #1
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d907      	bls.n	8003d38 <HAL_FDCAN_ActivateNotification+0x1c>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003d28:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8003d2c:	f043 0302 	orr.w	r3, r3, #2
 8003d30:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
    return HAL_ERROR;
 8003d34:	2001      	movs	r0, #1
}
 8003d36:	4770      	bx	lr
{
 8003d38:	b410      	push	{r4}
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8003d3a:	6803      	ldr	r3, [r0, #0]
 8003d3c:	6d9c      	ldr	r4, [r3, #88]	@ 0x58
 8003d3e:	420c      	tst	r4, r1
 8003d40:	d124      	bne.n	8003d8c <HAL_FDCAN_ActivateNotification+0x70>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8003d42:	6ddc      	ldr	r4, [r3, #92]	@ 0x5c
 8003d44:	f044 0401 	orr.w	r4, r4, #1
 8003d48:	65dc      	str	r4, [r3, #92]	@ 0x5c
    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8003d4a:	f411 7f00 	tst.w	r1, #512	@ 0x200
 8003d4e:	d005      	beq.n	8003d5c <HAL_FDCAN_ActivateNotification+0x40>
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8003d50:	6804      	ldr	r4, [r0, #0]
 8003d52:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8003d56:	4313      	orrs	r3, r2
 8003d58:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003d5c:	f411 6f80 	tst.w	r1, #1024	@ 0x400
 8003d60:	d005      	beq.n	8003d6e <HAL_FDCAN_ActivateNotification+0x52>
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8003d62:	6804      	ldr	r4, [r0, #0]
 8003d64:	f8d4 30e4 	ldr.w	r3, [r4, #228]	@ 0xe4
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	f8c4 30e4 	str.w	r3, [r4, #228]	@ 0xe4
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8003d6e:	6802      	ldr	r2, [r0, #0]
 8003d70:	6d50      	ldr	r0, [r2, #84]	@ 0x54
 8003d72:	4b0c      	ldr	r3, [pc, #48]	@ (8003da4 <HAL_FDCAN_ActivateNotification+0x88>)
 8003d74:	400b      	ands	r3, r1
 8003d76:	4303      	orrs	r3, r0
 8003d78:	6553      	str	r3, [r2, #84]	@ 0x54
 8003d7a:	4a0b      	ldr	r2, [pc, #44]	@ (8003da8 <HAL_FDCAN_ActivateNotification+0x8c>)
 8003d7c:	6953      	ldr	r3, [r2, #20]
 8003d7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d82:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 8003d84:	2000      	movs	r0, #0
}
 8003d86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d8a:	4770      	bx	lr
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8003d8c:	6d9c      	ldr	r4, [r3, #88]	@ 0x58
 8003d8e:	ea31 0404 	bics.w	r4, r1, r4
 8003d92:	d002      	beq.n	8003d9a <HAL_FDCAN_ActivateNotification+0x7e>
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8003d94:	2403      	movs	r4, #3
 8003d96:	65dc      	str	r4, [r3, #92]	@ 0x5c
 8003d98:	e7d7      	b.n	8003d4a <HAL_FDCAN_ActivateNotification+0x2e>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8003d9a:	6ddc      	ldr	r4, [r3, #92]	@ 0x5c
 8003d9c:	f044 0402 	orr.w	r4, r4, #2
 8003da0:	65dc      	str	r4, [r3, #92]	@ 0x5c
 8003da2:	e7d2      	b.n	8003d4a <HAL_FDCAN_ActivateNotification+0x2e>
 8003da4:	3fcfffff 	.word	0x3fcfffff
 8003da8:	4000a800 	.word	0x4000a800

08003dac <HAL_FDCAN_ClockCalibrationCallback>:
}
 8003dac:	4770      	bx	lr

08003dae <HAL_FDCAN_TxEventFifoCallback>:
}
 8003dae:	4770      	bx	lr

08003db0 <HAL_FDCAN_RxFifo0Callback>:
}
 8003db0:	4770      	bx	lr

08003db2 <HAL_FDCAN_TxFifoEmptyCallback>:
}
 8003db2:	4770      	bx	lr

08003db4 <HAL_FDCAN_TxBufferCompleteCallback>:
}
 8003db4:	4770      	bx	lr

08003db6 <HAL_FDCAN_TxBufferAbortCallback>:
}
 8003db6:	4770      	bx	lr

08003db8 <HAL_FDCAN_RxBufferNewMessageCallback>:
}
 8003db8:	4770      	bx	lr

08003dba <HAL_FDCAN_TimestampWraparoundCallback>:
}
 8003dba:	4770      	bx	lr

08003dbc <HAL_FDCAN_TimeoutOccurredCallback>:
}
 8003dbc:	4770      	bx	lr

08003dbe <HAL_FDCAN_HighPriorityMessageCallback>:
}
 8003dbe:	4770      	bx	lr

08003dc0 <HAL_FDCAN_ErrorCallback>:
}
 8003dc0:	4770      	bx	lr

08003dc2 <HAL_FDCAN_ErrorStatusCallback>:
}
 8003dc2:	4770      	bx	lr

08003dc4 <HAL_FDCAN_TT_ScheduleSyncCallback>:
}
 8003dc4:	4770      	bx	lr

08003dc6 <HAL_FDCAN_TT_TimeMarkCallback>:
}
 8003dc6:	4770      	bx	lr

08003dc8 <HAL_FDCAN_TT_StopWatchCallback>:
}
 8003dc8:	4770      	bx	lr

08003dca <HAL_FDCAN_TT_GlobalTimeCallback>:
}
 8003dca:	4770      	bx	lr

08003dcc <HAL_FDCAN_IRQHandler>:
{
 8003dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dd0:	b083      	sub	sp, #12
 8003dd2:	4604      	mov	r4, r0
  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8003dd4:	4baf      	ldr	r3, [pc, #700]	@ (8004094 <HAL_FDCAN_IRQHandler+0x2c8>)
 8003dd6:	691a      	ldr	r2, [r3, #16]
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8003dd8:	695b      	ldr	r3, [r3, #20]
 8003dda:	ea4f 7a83 	mov.w	sl, r3, lsl #30
 8003dde:	ea0a 7a82 	and.w	sl, sl, r2, lsl #30
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8003de2:	6803      	ldr	r3, [r0, #0]
 8003de4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8003de6:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003de8:	ea02 0901 	and.w	r9, r2, r1
 8003dec:	f409 4970 	and.w	r9, r9, #61440	@ 0xf000
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8003df0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
 8003df2:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003df4:	ea02 0801 	and.w	r8, r2, r1
 8003df8:	f008 080f 	and.w	r8, r8, #15
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8003dfc:	6d1f      	ldr	r7, [r3, #80]	@ 0x50
  RxFifo1ITs &= hfdcan->Instance->IE;
 8003dfe:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003e00:	4017      	ands	r7, r2
 8003e02:	f007 07f0 	and.w	r7, r7, #240	@ 0xf0
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8003e06:	6d1e      	ldr	r6, [r3, #80]	@ 0x50
  Errors &= hfdcan->Instance->IE;
 8003e08:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003e0a:	4016      	ands	r6, r2
 8003e0c:	f006 5671 	and.w	r6, r6, #1010827264	@ 0x3c400000
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8003e10:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
  ErrorStatusITs &= hfdcan->Instance->IE;
 8003e12:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003e14:	400a      	ands	r2, r1
 8003e16:	f002 7260 	and.w	r2, r2, #58720256	@ 0x3800000
 8003e1a:	9201      	str	r2, [sp, #4]
  itsourceIE = hfdcan->Instance->IE;
 8003e1c:	6d5d      	ldr	r5, [r3, #84]	@ 0x54
  itflagIR = hfdcan->Instance->IR;
 8003e1e:	f8d3 b050 	ldr.w	fp, [r3, #80]	@ 0x50
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8003e22:	f415 7f80 	tst.w	r5, #256	@ 0x100
 8003e26:	d002      	beq.n	8003e2e <HAL_FDCAN_IRQHandler+0x62>
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8003e28:	f41b 7f80 	tst.w	fp, #256	@ 0x100
 8003e2c:	d164      	bne.n	8003ef8 <HAL_FDCAN_IRQHandler+0x12c>
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8003e2e:	f415 6f80 	tst.w	r5, #1024	@ 0x400
 8003e32:	d002      	beq.n	8003e3a <HAL_FDCAN_IRQHandler+0x6e>
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8003e34:	f41b 6f80 	tst.w	fp, #1024	@ 0x400
 8003e38:	d167      	bne.n	8003f0a <HAL_FDCAN_IRQHandler+0x13e>
  if (ClkCalibrationITs != 0U)
 8003e3a:	f1ba 0f00 	cmp.w	sl, #0
 8003e3e:	d174      	bne.n	8003f2a <HAL_FDCAN_IRQHandler+0x15e>
  if (TxEventFifoITs != 0U)
 8003e40:	f1b9 0f00 	cmp.w	r9, #0
 8003e44:	d17d      	bne.n	8003f42 <HAL_FDCAN_IRQHandler+0x176>
  if (RxFifo0ITs != 0U)
 8003e46:	f1b8 0f00 	cmp.w	r8, #0
 8003e4a:	f040 8085 	bne.w	8003f58 <HAL_FDCAN_IRQHandler+0x18c>
  if (RxFifo1ITs != 0U)
 8003e4e:	2f00      	cmp	r7, #0
 8003e50:	f040 808d 	bne.w	8003f6e <HAL_FDCAN_IRQHandler+0x1a2>
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8003e54:	f415 6f00 	tst.w	r5, #2048	@ 0x800
 8003e58:	d003      	beq.n	8003e62 <HAL_FDCAN_IRQHandler+0x96>
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8003e5a:	f41b 6f00 	tst.w	fp, #2048	@ 0x800
 8003e5e:	f040 8090 	bne.w	8003f82 <HAL_FDCAN_IRQHandler+0x1b6>
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8003e62:	f415 7f00 	tst.w	r5, #512	@ 0x200
 8003e66:	d003      	beq.n	8003e70 <HAL_FDCAN_IRQHandler+0xa4>
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8003e68:	f41b 7f00 	tst.w	fp, #512	@ 0x200
 8003e6c:	f040 8094 	bne.w	8003f98 <HAL_FDCAN_IRQHandler+0x1cc>
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8003e70:	f415 2f00 	tst.w	r5, #524288	@ 0x80000
 8003e74:	d003      	beq.n	8003e7e <HAL_FDCAN_IRQHandler+0xb2>
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8003e76:	f41b 2f00 	tst.w	fp, #524288	@ 0x80000
 8003e7a:	f040 809d 	bne.w	8003fb8 <HAL_FDCAN_IRQHandler+0x1ec>
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8003e7e:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8003e82:	d003      	beq.n	8003e8c <HAL_FDCAN_IRQHandler+0xc0>
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8003e84:	f41b 3f80 	tst.w	fp, #65536	@ 0x10000
 8003e88:	f040 80a1 	bne.w	8003fce <HAL_FDCAN_IRQHandler+0x202>
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8003e8c:	f415 2f80 	tst.w	r5, #262144	@ 0x40000
 8003e90:	d003      	beq.n	8003e9a <HAL_FDCAN_IRQHandler+0xce>
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8003e92:	f41b 2f80 	tst.w	fp, #262144	@ 0x40000
 8003e96:	f040 80a5 	bne.w	8003fe4 <HAL_FDCAN_IRQHandler+0x218>
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8003e9a:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
 8003e9e:	d00f      	beq.n	8003ec0 <HAL_FDCAN_IRQHandler+0xf4>
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8003ea0:	f41b 3f00 	tst.w	fp, #131072	@ 0x20000
 8003ea4:	d00c      	beq.n	8003ec0 <HAL_FDCAN_IRQHandler+0xf4>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8003ea6:	6823      	ldr	r3, [r4, #0]
 8003ea8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003eac:	651a      	str	r2, [r3, #80]	@ 0x50
 8003eae:	4b79      	ldr	r3, [pc, #484]	@ (8004094 <HAL_FDCAN_IRQHandler+0x2c8>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	611a      	str	r2, [r3, #16]
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8003eb4:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8003eb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ebc:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
  if (ErrorStatusITs != 0U)
 8003ec0:	9b01      	ldr	r3, [sp, #4]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	f040 8099 	bne.w	8003ffa <HAL_FDCAN_IRQHandler+0x22e>
  if (Errors != 0U)
 8003ec8:	b14e      	cbz	r6, 8003ede <HAL_FDCAN_IRQHandler+0x112>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8003eca:	6823      	ldr	r3, [r4, #0]
 8003ecc:	651e      	str	r6, [r3, #80]	@ 0x50
 8003ece:	4b71      	ldr	r3, [pc, #452]	@ (8004094 <HAL_FDCAN_IRQHandler+0x2c8>)
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	611a      	str	r2, [r3, #16]
    hfdcan->ErrorCode |= Errors;
 8003ed4:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8003ed8:	4333      	orrs	r3, r6
 8003eda:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
  if (hfdcan->Instance == FDCAN1)
 8003ede:	6822      	ldr	r2, [r4, #0]
 8003ee0:	4b6d      	ldr	r3, [pc, #436]	@ (8004098 <HAL_FDCAN_IRQHandler+0x2cc>)
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	f000 8093 	beq.w	800400e <HAL_FDCAN_IRQHandler+0x242>
  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8003ee8:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	f040 80f5 	bne.w	80040dc <HAL_FDCAN_IRQHandler+0x310>
}
 8003ef2:	b003      	add	sp, #12
 8003ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8003ef8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003efc:	651a      	str	r2, [r3, #80]	@ 0x50
 8003efe:	4b65      	ldr	r3, [pc, #404]	@ (8004094 <HAL_FDCAN_IRQHandler+0x2c8>)
 8003f00:	2200      	movs	r2, #0
 8003f02:	611a      	str	r2, [r3, #16]
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8003f04:	f7ff ff5b 	bl	8003dbe <HAL_FDCAN_HighPriorityMessageCallback>
 8003f08:	e791      	b.n	8003e2e <HAL_FDCAN_IRQHandler+0x62>
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8003f0a:	6823      	ldr	r3, [r4, #0]
 8003f0c:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8003f10:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8003f14:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003f18:	6518      	str	r0, [r3, #80]	@ 0x50
 8003f1a:	4b5e      	ldr	r3, [pc, #376]	@ (8004094 <HAL_FDCAN_IRQHandler+0x2c8>)
 8003f1c:	2000      	movs	r0, #0
 8003f1e:	6118      	str	r0, [r3, #16]
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8003f20:	4011      	ands	r1, r2
 8003f22:	4620      	mov	r0, r4
 8003f24:	f7ff ff47 	bl	8003db6 <HAL_FDCAN_TxBufferAbortCallback>
 8003f28:	e787      	b.n	8003e3a <HAL_FDCAN_IRQHandler+0x6e>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8003f2a:	6823      	ldr	r3, [r4, #0]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	651a      	str	r2, [r3, #80]	@ 0x50
 8003f30:	ea4f 729a 	mov.w	r2, sl, lsr #30
 8003f34:	4b57      	ldr	r3, [pc, #348]	@ (8004094 <HAL_FDCAN_IRQHandler+0x2c8>)
 8003f36:	611a      	str	r2, [r3, #16]
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8003f38:	4651      	mov	r1, sl
 8003f3a:	4620      	mov	r0, r4
 8003f3c:	f7ff ff36 	bl	8003dac <HAL_FDCAN_ClockCalibrationCallback>
 8003f40:	e77e      	b.n	8003e40 <HAL_FDCAN_IRQHandler+0x74>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8003f42:	6823      	ldr	r3, [r4, #0]
 8003f44:	f8c3 9050 	str.w	r9, [r3, #80]	@ 0x50
 8003f48:	4b52      	ldr	r3, [pc, #328]	@ (8004094 <HAL_FDCAN_IRQHandler+0x2c8>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	611a      	str	r2, [r3, #16]
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8003f4e:	4649      	mov	r1, r9
 8003f50:	4620      	mov	r0, r4
 8003f52:	f7ff ff2c 	bl	8003dae <HAL_FDCAN_TxEventFifoCallback>
 8003f56:	e776      	b.n	8003e46 <HAL_FDCAN_IRQHandler+0x7a>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8003f58:	6823      	ldr	r3, [r4, #0]
 8003f5a:	f8c3 8050 	str.w	r8, [r3, #80]	@ 0x50
 8003f5e:	4b4d      	ldr	r3, [pc, #308]	@ (8004094 <HAL_FDCAN_IRQHandler+0x2c8>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	611a      	str	r2, [r3, #16]
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8003f64:	4641      	mov	r1, r8
 8003f66:	4620      	mov	r0, r4
 8003f68:	f7ff ff22 	bl	8003db0 <HAL_FDCAN_RxFifo0Callback>
 8003f6c:	e76f      	b.n	8003e4e <HAL_FDCAN_IRQHandler+0x82>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8003f6e:	6823      	ldr	r3, [r4, #0]
 8003f70:	651f      	str	r7, [r3, #80]	@ 0x50
 8003f72:	4b48      	ldr	r3, [pc, #288]	@ (8004094 <HAL_FDCAN_IRQHandler+0x2c8>)
 8003f74:	2200      	movs	r2, #0
 8003f76:	611a      	str	r2, [r3, #16]
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8003f78:	4639      	mov	r1, r7
 8003f7a:	4620      	mov	r0, r4
 8003f7c:	f7fc feea 	bl	8000d54 <HAL_FDCAN_RxFifo1Callback>
 8003f80:	e768      	b.n	8003e54 <HAL_FDCAN_IRQHandler+0x88>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8003f82:	6823      	ldr	r3, [r4, #0]
 8003f84:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003f88:	651a      	str	r2, [r3, #80]	@ 0x50
 8003f8a:	4b42      	ldr	r3, [pc, #264]	@ (8004094 <HAL_FDCAN_IRQHandler+0x2c8>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	611a      	str	r2, [r3, #16]
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8003f90:	4620      	mov	r0, r4
 8003f92:	f7ff ff0e 	bl	8003db2 <HAL_FDCAN_TxFifoEmptyCallback>
 8003f96:	e764      	b.n	8003e62 <HAL_FDCAN_IRQHandler+0x96>
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8003f98:	6823      	ldr	r3, [r4, #0]
 8003f9a:	f8d3 10d8 	ldr.w	r1, [r3, #216]	@ 0xd8
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8003f9e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8003fa2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003fa6:	6518      	str	r0, [r3, #80]	@ 0x50
 8003fa8:	4b3a      	ldr	r3, [pc, #232]	@ (8004094 <HAL_FDCAN_IRQHandler+0x2c8>)
 8003faa:	2000      	movs	r0, #0
 8003fac:	6118      	str	r0, [r3, #16]
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8003fae:	4011      	ands	r1, r2
 8003fb0:	4620      	mov	r0, r4
 8003fb2:	f7ff feff 	bl	8003db4 <HAL_FDCAN_TxBufferCompleteCallback>
 8003fb6:	e75b      	b.n	8003e70 <HAL_FDCAN_IRQHandler+0xa4>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8003fb8:	6823      	ldr	r3, [r4, #0]
 8003fba:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003fbe:	651a      	str	r2, [r3, #80]	@ 0x50
 8003fc0:	4b34      	ldr	r3, [pc, #208]	@ (8004094 <HAL_FDCAN_IRQHandler+0x2c8>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	611a      	str	r2, [r3, #16]
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8003fc6:	4620      	mov	r0, r4
 8003fc8:	f7ff fef6 	bl	8003db8 <HAL_FDCAN_RxBufferNewMessageCallback>
 8003fcc:	e757      	b.n	8003e7e <HAL_FDCAN_IRQHandler+0xb2>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8003fce:	6823      	ldr	r3, [r4, #0]
 8003fd0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003fd4:	651a      	str	r2, [r3, #80]	@ 0x50
 8003fd6:	4b2f      	ldr	r3, [pc, #188]	@ (8004094 <HAL_FDCAN_IRQHandler+0x2c8>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	611a      	str	r2, [r3, #16]
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8003fdc:	4620      	mov	r0, r4
 8003fde:	f7ff feec 	bl	8003dba <HAL_FDCAN_TimestampWraparoundCallback>
 8003fe2:	e753      	b.n	8003e8c <HAL_FDCAN_IRQHandler+0xc0>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8003fe4:	6823      	ldr	r3, [r4, #0]
 8003fe6:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8003fea:	651a      	str	r2, [r3, #80]	@ 0x50
 8003fec:	4b29      	ldr	r3, [pc, #164]	@ (8004094 <HAL_FDCAN_IRQHandler+0x2c8>)
 8003fee:	2200      	movs	r2, #0
 8003ff0:	611a      	str	r2, [r3, #16]
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8003ff2:	4620      	mov	r0, r4
 8003ff4:	f7ff fee2 	bl	8003dbc <HAL_FDCAN_TimeoutOccurredCallback>
 8003ff8:	e74f      	b.n	8003e9a <HAL_FDCAN_IRQHandler+0xce>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8003ffa:	6823      	ldr	r3, [r4, #0]
 8003ffc:	9901      	ldr	r1, [sp, #4]
 8003ffe:	6519      	str	r1, [r3, #80]	@ 0x50
 8004000:	4b24      	ldr	r3, [pc, #144]	@ (8004094 <HAL_FDCAN_IRQHandler+0x2c8>)
 8004002:	2200      	movs	r2, #0
 8004004:	611a      	str	r2, [r3, #16]
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8004006:	4620      	mov	r0, r4
 8004008:	f7ff fedb 	bl	8003dc2 <HAL_FDCAN_ErrorStatusCallback>
 800400c:	e75c      	b.n	8003ec8 <HAL_FDCAN_IRQHandler+0xfc>
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 800400e:	6863      	ldr	r3, [r4, #4]
 8004010:	689a      	ldr	r2, [r3, #8]
 8004012:	f012 0f03 	tst.w	r2, #3
 8004016:	f43f af67 	beq.w	8003ee8 <HAL_FDCAN_IRQHandler+0x11c>
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 800401a:	6a19      	ldr	r1, [r3, #32]
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 800401c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800401e:	4011      	ands	r1, r2
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8004020:	6a1a      	ldr	r2, [r3, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8004022:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8004024:	ea02 0800 	and.w	r8, r2, r0
 8004028:	f008 0830 	and.w	r8, r8, #48	@ 0x30
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 800402c:	6a1f      	ldr	r7, [r3, #32]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 800402e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004030:	4017      	ands	r7, r2
 8004032:	f407 77c0 	and.w	r7, r7, #384	@ 0x180
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8004036:	6a1e      	ldr	r6, [r3, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8004038:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800403a:	4016      	ands	r6, r2
 800403c:	f406 46fc 	and.w	r6, r6, #32256	@ 0x7e00
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8004040:	6a1d      	ldr	r5, [r3, #32]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8004042:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004044:	4015      	ands	r5, r2
 8004046:	f405 25f0 	and.w	r5, r5, #491520	@ 0x78000
      itsourceTTIE = hfdcan->ttcan->TTIE;
 800404a:	f8d3 9024 	ldr.w	r9, [r3, #36]	@ 0x24
      itflagTTIR = hfdcan->ttcan->TTIR;
 800404e:	f8d3 a020 	ldr.w	sl, [r3, #32]
      if (TTSchedSyncITs != 0U)
 8004052:	f011 010f 	ands.w	r1, r1, #15
 8004056:	d121      	bne.n	800409c <HAL_FDCAN_IRQHandler+0x2d0>
      if (TTTimeMarkITs != 0U)
 8004058:	f1b8 0f00 	cmp.w	r8, #0
 800405c:	d123      	bne.n	80040a6 <HAL_FDCAN_IRQHandler+0x2da>
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 800405e:	f019 0f40 	tst.w	r9, #64	@ 0x40
 8004062:	d002      	beq.n	800406a <HAL_FDCAN_IRQHandler+0x29e>
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8004064:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 8004068:	d125      	bne.n	80040b6 <HAL_FDCAN_IRQHandler+0x2ea>
      if (TTGlobTimeITs != 0U)
 800406a:	bb87      	cbnz	r7, 80040ce <HAL_FDCAN_IRQHandler+0x302>
      if (TTDistErrors != 0U)
 800406c:	b136      	cbz	r6, 800407c <HAL_FDCAN_IRQHandler+0x2b0>
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 800406e:	6863      	ldr	r3, [r4, #4]
 8004070:	621e      	str	r6, [r3, #32]
        hfdcan->ErrorCode |= TTDistErrors;
 8004072:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8004076:	4333      	orrs	r3, r6
 8004078:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
      if (TTFatalErrors != 0U)
 800407c:	2d00      	cmp	r5, #0
 800407e:	f43f af33 	beq.w	8003ee8 <HAL_FDCAN_IRQHandler+0x11c>
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8004082:	6863      	ldr	r3, [r4, #4]
 8004084:	621d      	str	r5, [r3, #32]
        hfdcan->ErrorCode |= TTFatalErrors;
 8004086:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 800408a:	432b      	orrs	r3, r5
 800408c:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 8004090:	e72a      	b.n	8003ee8 <HAL_FDCAN_IRQHandler+0x11c>
 8004092:	bf00      	nop
 8004094:	4000a800 	.word	0x4000a800
 8004098:	4000a000 	.word	0x4000a000
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 800409c:	6219      	str	r1, [r3, #32]
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 800409e:	4620      	mov	r0, r4
 80040a0:	f7ff fe90 	bl	8003dc4 <HAL_FDCAN_TT_ScheduleSyncCallback>
 80040a4:	e7d8      	b.n	8004058 <HAL_FDCAN_IRQHandler+0x28c>
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 80040a6:	6863      	ldr	r3, [r4, #4]
 80040a8:	f8c3 8020 	str.w	r8, [r3, #32]
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 80040ac:	4641      	mov	r1, r8
 80040ae:	4620      	mov	r0, r4
 80040b0:	f7ff fe89 	bl	8003dc6 <HAL_FDCAN_TT_TimeMarkCallback>
 80040b4:	e7d3      	b.n	800405e <HAL_FDCAN_IRQHandler+0x292>
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 80040b6:	6863      	ldr	r3, [r4, #4]
 80040b8:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 80040ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 80040bc:	2040      	movs	r0, #64	@ 0x40
 80040be:	6218      	str	r0, [r3, #32]
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 80040c0:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80040c4:	0c09      	lsrs	r1, r1, #16
 80040c6:	4620      	mov	r0, r4
 80040c8:	f7ff fe7e 	bl	8003dc8 <HAL_FDCAN_TT_StopWatchCallback>
 80040cc:	e7cd      	b.n	800406a <HAL_FDCAN_IRQHandler+0x29e>
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 80040ce:	6863      	ldr	r3, [r4, #4]
 80040d0:	621f      	str	r7, [r3, #32]
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 80040d2:	4639      	mov	r1, r7
 80040d4:	4620      	mov	r0, r4
 80040d6:	f7ff fe78 	bl	8003dca <HAL_FDCAN_TT_GlobalTimeCallback>
 80040da:	e7c7      	b.n	800406c <HAL_FDCAN_IRQHandler+0x2a0>
    HAL_FDCAN_ErrorCallback(hfdcan);
 80040dc:	4620      	mov	r0, r4
 80040de:	f7ff fe6f 	bl	8003dc0 <HAL_FDCAN_ErrorCallback>
}
 80040e2:	e706      	b.n	8003ef2 <HAL_FDCAN_IRQHandler+0x126>

080040e4 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80040e4:	680b      	ldr	r3, [r1, #0]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	f000 80f9 	beq.w	80042de <HAL_GPIO_Init+0x1fa>
{
 80040ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040f0:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80040f2:	f04f 0c00 	mov.w	ip, #0
  uint32_t position = 0x00U;
 80040f6:	4662      	mov	r2, ip
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80040f8:	2501      	movs	r5, #1
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80040fa:	2403      	movs	r4, #3
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80040fc:	f04f 080f 	mov.w	r8, #15
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004100:	f04f 4eb0 	mov.w	lr, #1476395008	@ 0x58000000
 8004104:	e050      	b.n	80041a8 <HAL_GPIO_Init+0xc4>
        temp = GPIOx->OSPEEDR;
 8004106:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004108:	fa04 fa0c 	lsl.w	sl, r4, ip
 800410c:	ea23 0a0a 	bic.w	sl, r3, sl
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004110:	68cb      	ldr	r3, [r1, #12]
 8004112:	fa03 f30c 	lsl.w	r3, r3, ip
 8004116:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->OSPEEDR = temp;
 800411a:	6083      	str	r3, [r0, #8]
        temp = GPIOx->OTYPER;
 800411c:	6843      	ldr	r3, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800411e:	ea23 0707 	bic.w	r7, r3, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004122:	684b      	ldr	r3, [r1, #4]
 8004124:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004128:	4093      	lsls	r3, r2
 800412a:	433b      	orrs	r3, r7
        GPIOx->OTYPER = temp;
 800412c:	6043      	str	r3, [r0, #4]
 800412e:	e046      	b.n	80041be <HAL_GPIO_Init+0xda>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004130:	2300      	movs	r3, #0
 8004132:	fa03 f30b 	lsl.w	r3, r3, fp
 8004136:	ea43 030a 	orr.w	r3, r3, sl
        SYSCFG->EXTICR[position >> 2U] = temp;
 800413a:	60bb      	str	r3, [r7, #8]
        temp = EXTI->RTSR1;
 800413c:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~(iocurrent);
 8004140:	ea6f 0709 	mvn.w	r7, r9
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004144:	684e      	ldr	r6, [r1, #4]
 8004146:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp &= ~(iocurrent);
 800414a:	bf0c      	ite	eq
 800414c:	403b      	andeq	r3, r7
        {
          temp |= iocurrent;
 800414e:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->RTSR1 = temp;
 8004152:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->FTSR1;
 8004156:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800415a:	684e      	ldr	r6, [r1, #4]
 800415c:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        temp &= ~(iocurrent);
 8004160:	bf0c      	ite	eq
 8004162:	403b      	andeq	r3, r7
        {
          temp |= iocurrent;
 8004164:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->FTSR1 = temp;
 8004168:	f8ce 3004 	str.w	r3, [lr, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800416c:	f8de 3084 	ldr.w	r3, [lr, #132]	@ 0x84
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004170:	684e      	ldr	r6, [r1, #4]
 8004172:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        temp &= ~(iocurrent);
 8004176:	bf0c      	ite	eq
 8004178:	403b      	andeq	r3, r7
        {
          temp |= iocurrent;
 800417a:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800417e:	f8ce 3084 	str.w	r3, [lr, #132]	@ 0x84

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004182:	f8de 3080 	ldr.w	r3, [lr, #128]	@ 0x80
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004186:	684e      	ldr	r6, [r1, #4]
 8004188:	f416 3f80 	tst.w	r6, #65536	@ 0x10000
        temp &= ~(iocurrent);
 800418c:	bf0c      	ite	eq
 800418e:	401f      	andeq	r7, r3
        {
          temp |= iocurrent;
 8004190:	ea49 0703 	orrne.w	r7, r9, r3
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004194:	f8ce 7080 	str.w	r7, [lr, #128]	@ 0x80
      }
    }

    position++;
 8004198:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800419a:	680b      	ldr	r3, [r1, #0]
 800419c:	f10c 0c02 	add.w	ip, ip, #2
 80041a0:	fa33 f702 	lsrs.w	r7, r3, r2
 80041a4:	f000 8098 	beq.w	80042d8 <HAL_GPIO_Init+0x1f4>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80041a8:	fa05 f702 	lsl.w	r7, r5, r2
    if (iocurrent != 0x00U)
 80041ac:	ea17 0903 	ands.w	r9, r7, r3
 80041b0:	d0f2      	beq.n	8004198 <HAL_GPIO_Init+0xb4>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80041b2:	684b      	ldr	r3, [r1, #4]
 80041b4:	f003 0303 	and.w	r3, r3, #3
 80041b8:	3b01      	subs	r3, #1
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d9a3      	bls.n	8004106 <HAL_GPIO_Init+0x22>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041be:	684b      	ldr	r3, [r1, #4]
 80041c0:	f003 0303 	and.w	r3, r3, #3
 80041c4:	2b03      	cmp	r3, #3
 80041c6:	d020      	beq.n	800420a <HAL_GPIO_Init+0x126>
      temp = GPIOx->PUPDR;
 80041c8:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80041ca:	fa04 f30c 	lsl.w	r3, r4, ip
 80041ce:	ea27 0703 	bic.w	r7, r7, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041d2:	688b      	ldr	r3, [r1, #8]
 80041d4:	fa03 f30c 	lsl.w	r3, r3, ip
 80041d8:	433b      	orrs	r3, r7
      GPIOx->PUPDR = temp;
 80041da:	60c3      	str	r3, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041dc:	684b      	ldr	r3, [r1, #4]
 80041de:	f003 0303 	and.w	r3, r3, #3
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d111      	bne.n	800420a <HAL_GPIO_Init+0x126>
        temp = GPIOx->AFR[position >> 3U];
 80041e6:	08d7      	lsrs	r7, r2, #3
 80041e8:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 80041ec:	6a3b      	ldr	r3, [r7, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80041ee:	f002 0b07 	and.w	fp, r2, #7
 80041f2:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80041f6:	fa08 fa0b 	lsl.w	sl, r8, fp
 80041fa:	ea23 0a0a 	bic.w	sl, r3, sl
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80041fe:	690b      	ldr	r3, [r1, #16]
 8004200:	fa03 f30b 	lsl.w	r3, r3, fp
 8004204:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3U] = temp;
 8004208:	623b      	str	r3, [r7, #32]
      temp = GPIOx->MODER;
 800420a:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800420c:	fa04 f30c 	lsl.w	r3, r4, ip
 8004210:	ea27 0703 	bic.w	r7, r7, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004214:	684b      	ldr	r3, [r1, #4]
 8004216:	f003 0303 	and.w	r3, r3, #3
 800421a:	fa03 f30c 	lsl.w	r3, r3, ip
 800421e:	433b      	orrs	r3, r7
      GPIOx->MODER = temp;
 8004220:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004222:	684b      	ldr	r3, [r1, #4]
 8004224:	f413 3f40 	tst.w	r3, #196608	@ 0x30000
 8004228:	d0b6      	beq.n	8004198 <HAL_GPIO_Init+0xb4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800422a:	4e2d      	ldr	r6, [pc, #180]	@ (80042e0 <HAL_GPIO_Init+0x1fc>)
 800422c:	f8d6 30f4 	ldr.w	r3, [r6, #244]	@ 0xf4
 8004230:	f043 0302 	orr.w	r3, r3, #2
 8004234:	f8c6 30f4 	str.w	r3, [r6, #244]	@ 0xf4
 8004238:	f8d6 30f4 	ldr.w	r3, [r6, #244]	@ 0xf4
 800423c:	f003 0302 	and.w	r3, r3, #2
 8004240:	9301      	str	r3, [sp, #4]
 8004242:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8004244:	f022 0703 	bic.w	r7, r2, #3
 8004248:	f107 47b0 	add.w	r7, r7, #1476395008	@ 0x58000000
 800424c:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8004250:	68bb      	ldr	r3, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004252:	f002 0b03 	and.w	fp, r2, #3
 8004256:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800425a:	fa08 fa0b 	lsl.w	sl, r8, fp
 800425e:	ea23 0a0a 	bic.w	sl, r3, sl
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004262:	4b20      	ldr	r3, [pc, #128]	@ (80042e4 <HAL_GPIO_Init+0x200>)
 8004264:	4298      	cmp	r0, r3
 8004266:	f43f af63 	beq.w	8004130 <HAL_GPIO_Init+0x4c>
 800426a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800426e:	4298      	cmp	r0, r3
 8004270:	d022      	beq.n	80042b8 <HAL_GPIO_Init+0x1d4>
 8004272:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004276:	4298      	cmp	r0, r3
 8004278:	d020      	beq.n	80042bc <HAL_GPIO_Init+0x1d8>
 800427a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800427e:	4298      	cmp	r0, r3
 8004280:	d01e      	beq.n	80042c0 <HAL_GPIO_Init+0x1dc>
 8004282:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004286:	4298      	cmp	r0, r3
 8004288:	d01c      	beq.n	80042c4 <HAL_GPIO_Init+0x1e0>
 800428a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800428e:	4298      	cmp	r0, r3
 8004290:	d01a      	beq.n	80042c8 <HAL_GPIO_Init+0x1e4>
 8004292:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004296:	4298      	cmp	r0, r3
 8004298:	d018      	beq.n	80042cc <HAL_GPIO_Init+0x1e8>
 800429a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800429e:	4298      	cmp	r0, r3
 80042a0:	d016      	beq.n	80042d0 <HAL_GPIO_Init+0x1ec>
 80042a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80042a6:	4298      	cmp	r0, r3
 80042a8:	d014      	beq.n	80042d4 <HAL_GPIO_Init+0x1f0>
 80042aa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80042ae:	4298      	cmp	r0, r3
 80042b0:	bf14      	ite	ne
 80042b2:	230a      	movne	r3, #10
 80042b4:	2309      	moveq	r3, #9
 80042b6:	e73c      	b.n	8004132 <HAL_GPIO_Init+0x4e>
 80042b8:	2301      	movs	r3, #1
 80042ba:	e73a      	b.n	8004132 <HAL_GPIO_Init+0x4e>
 80042bc:	2302      	movs	r3, #2
 80042be:	e738      	b.n	8004132 <HAL_GPIO_Init+0x4e>
 80042c0:	2303      	movs	r3, #3
 80042c2:	e736      	b.n	8004132 <HAL_GPIO_Init+0x4e>
 80042c4:	2304      	movs	r3, #4
 80042c6:	e734      	b.n	8004132 <HAL_GPIO_Init+0x4e>
 80042c8:	2305      	movs	r3, #5
 80042ca:	e732      	b.n	8004132 <HAL_GPIO_Init+0x4e>
 80042cc:	2306      	movs	r3, #6
 80042ce:	e730      	b.n	8004132 <HAL_GPIO_Init+0x4e>
 80042d0:	2307      	movs	r3, #7
 80042d2:	e72e      	b.n	8004132 <HAL_GPIO_Init+0x4e>
 80042d4:	2308      	movs	r3, #8
 80042d6:	e72c      	b.n	8004132 <HAL_GPIO_Init+0x4e>
  }
}
 80042d8:	b003      	add	sp, #12
 80042da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042de:	4770      	bx	lr
 80042e0:	58024400 	.word	0x58024400
 80042e4:	58020000 	.word	0x58020000

080042e8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80042e8:	b10a      	cbz	r2, 80042ee <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80042ea:	6181      	str	r1, [r0, #24]
 80042ec:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80042ee:	0409      	lsls	r1, r1, #16
 80042f0:	6181      	str	r1, [r0, #24]
  }
}
 80042f2:	4770      	bx	lr

080042f4 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80042f4:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80042f6:	ea01 0203 	and.w	r2, r1, r3
 80042fa:	ea21 0103 	bic.w	r1, r1, r3
 80042fe:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004302:	6181      	str	r1, [r0, #24]
}
 8004304:	4770      	bx	lr
	...

08004308 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004308:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800430a:	4b12      	ldr	r3, [pc, #72]	@ (8004354 <HAL_PWREx_ConfigSupply+0x4c>)
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	f013 0f04 	tst.w	r3, #4
 8004312:	d107      	bne.n	8004324 <HAL_PWREx_ConfigSupply+0x1c>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004314:	4b0f      	ldr	r3, [pc, #60]	@ (8004354 <HAL_PWREx_ConfigSupply+0x4c>)
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	f003 0307 	and.w	r3, r3, #7
 800431c:	1a18      	subs	r0, r3, r0
 800431e:	bf18      	it	ne
 8004320:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8004322:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004324:	4a0b      	ldr	r2, [pc, #44]	@ (8004354 <HAL_PWREx_ConfigSupply+0x4c>)
 8004326:	68d3      	ldr	r3, [r2, #12]
 8004328:	f023 0307 	bic.w	r3, r3, #7
 800432c:	4303      	orrs	r3, r0
 800432e:	60d3      	str	r3, [r2, #12]
  tickstart = HAL_GetTick ();
 8004330:	f7fd fd1e 	bl	8001d70 <HAL_GetTick>
 8004334:	4604      	mov	r4, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004336:	4d07      	ldr	r5, [pc, #28]	@ (8004354 <HAL_PWREx_ConfigSupply+0x4c>)
 8004338:	686b      	ldr	r3, [r5, #4]
 800433a:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 800433e:	d107      	bne.n	8004350 <HAL_PWREx_ConfigSupply+0x48>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004340:	f7fd fd16 	bl	8001d70 <HAL_GetTick>
 8004344:	1b00      	subs	r0, r0, r4
 8004346:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800434a:	d9f5      	bls.n	8004338 <HAL_PWREx_ConfigSupply+0x30>
      return HAL_ERROR;
 800434c:	2001      	movs	r0, #1
 800434e:	e7e8      	b.n	8004322 <HAL_PWREx_ConfigSupply+0x1a>
  return HAL_OK;
 8004350:	2000      	movs	r0, #0
 8004352:	e7e6      	b.n	8004322 <HAL_PWREx_ConfigSupply+0x1a>
 8004354:	58024800 	.word	0x58024800

08004358 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004358:	2800      	cmp	r0, #0
 800435a:	f000 8339 	beq.w	80049d0 <HAL_RCC_OscConfig+0x678>
{
 800435e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004360:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004362:	6803      	ldr	r3, [r0, #0]
 8004364:	f013 0f01 	tst.w	r3, #1
 8004368:	d025      	beq.n	80043b6 <HAL_RCC_OscConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800436a:	4a94      	ldr	r2, [pc, #592]	@ (80045bc <HAL_RCC_OscConfig+0x264>)
 800436c:	6913      	ldr	r3, [r2, #16]
 800436e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004372:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004374:	2b10      	cmp	r3, #16
 8004376:	d015      	beq.n	80043a4 <HAL_RCC_OscConfig+0x4c>
 8004378:	2b18      	cmp	r3, #24
 800437a:	d00f      	beq.n	800439c <HAL_RCC_OscConfig+0x44>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800437c:	6863      	ldr	r3, [r4, #4]
 800437e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004382:	d03f      	beq.n	8004404 <HAL_RCC_OscConfig+0xac>
 8004384:	2b00      	cmp	r3, #0
 8004386:	d153      	bne.n	8004430 <HAL_RCC_OscConfig+0xd8>
 8004388:	4b8c      	ldr	r3, [pc, #560]	@ (80045bc <HAL_RCC_OscConfig+0x264>)
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004390:	601a      	str	r2, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004398:	601a      	str	r2, [r3, #0]
 800439a:	e038      	b.n	800440e <HAL_RCC_OscConfig+0xb6>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800439c:	f002 0203 	and.w	r2, r2, #3
 80043a0:	2a02      	cmp	r2, #2
 80043a2:	d1eb      	bne.n	800437c <HAL_RCC_OscConfig+0x24>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043a4:	4b85      	ldr	r3, [pc, #532]	@ (80045bc <HAL_RCC_OscConfig+0x264>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80043ac:	d003      	beq.n	80043b6 <HAL_RCC_OscConfig+0x5e>
 80043ae:	6863      	ldr	r3, [r4, #4]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f000 830f 	beq.w	80049d4 <HAL_RCC_OscConfig+0x67c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043b6:	6823      	ldr	r3, [r4, #0]
 80043b8:	f013 0f02 	tst.w	r3, #2
 80043bc:	f000 80a1 	beq.w	8004502 <HAL_RCC_OscConfig+0x1aa>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043c0:	4a7e      	ldr	r2, [pc, #504]	@ (80045bc <HAL_RCC_OscConfig+0x264>)
 80043c2:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80043c4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80043c6:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 80043ca:	d05a      	beq.n	8004482 <HAL_RCC_OscConfig+0x12a>
 80043cc:	2b18      	cmp	r3, #24
 80043ce:	d055      	beq.n	800447c <HAL_RCC_OscConfig+0x124>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80043d0:	68e2      	ldr	r2, [r4, #12]
 80043d2:	2a00      	cmp	r2, #0
 80043d4:	f000 80de 	beq.w	8004594 <HAL_RCC_OscConfig+0x23c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80043d8:	4978      	ldr	r1, [pc, #480]	@ (80045bc <HAL_RCC_OscConfig+0x264>)
 80043da:	680b      	ldr	r3, [r1, #0]
 80043dc:	f023 0319 	bic.w	r3, r3, #25
 80043e0:	4313      	orrs	r3, r2
 80043e2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e4:	f7fd fcc4 	bl	8001d70 <HAL_GetTick>
 80043e8:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80043ea:	4e74      	ldr	r6, [pc, #464]	@ (80045bc <HAL_RCC_OscConfig+0x264>)
 80043ec:	6833      	ldr	r3, [r6, #0]
 80043ee:	f013 0f04 	tst.w	r3, #4
 80043f2:	f040 80ad 	bne.w	8004550 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043f6:	f7fd fcbb 	bl	8001d70 <HAL_GetTick>
 80043fa:	1b40      	subs	r0, r0, r5
 80043fc:	2802      	cmp	r0, #2
 80043fe:	d9f5      	bls.n	80043ec <HAL_RCC_OscConfig+0x94>
          {
            return HAL_TIMEOUT;
 8004400:	2003      	movs	r0, #3
 8004402:	e2ee      	b.n	80049e2 <HAL_RCC_OscConfig+0x68a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004404:	4a6d      	ldr	r2, [pc, #436]	@ (80045bc <HAL_RCC_OscConfig+0x264>)
 8004406:	6813      	ldr	r3, [r2, #0]
 8004408:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800440c:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800440e:	6863      	ldr	r3, [r4, #4]
 8004410:	b32b      	cbz	r3, 800445e <HAL_RCC_OscConfig+0x106>
        tickstart = HAL_GetTick();
 8004412:	f7fd fcad 	bl	8001d70 <HAL_GetTick>
 8004416:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004418:	4e68      	ldr	r6, [pc, #416]	@ (80045bc <HAL_RCC_OscConfig+0x264>)
 800441a:	6833      	ldr	r3, [r6, #0]
 800441c:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8004420:	d1c9      	bne.n	80043b6 <HAL_RCC_OscConfig+0x5e>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004422:	f7fd fca5 	bl	8001d70 <HAL_GetTick>
 8004426:	1b40      	subs	r0, r0, r5
 8004428:	2864      	cmp	r0, #100	@ 0x64
 800442a:	d9f6      	bls.n	800441a <HAL_RCC_OscConfig+0xc2>
            return HAL_TIMEOUT;
 800442c:	2003      	movs	r0, #3
 800442e:	e2d8      	b.n	80049e2 <HAL_RCC_OscConfig+0x68a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004430:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004434:	d009      	beq.n	800444a <HAL_RCC_OscConfig+0xf2>
 8004436:	4b61      	ldr	r3, [pc, #388]	@ (80045bc <HAL_RCC_OscConfig+0x264>)
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800443e:	601a      	str	r2, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004446:	601a      	str	r2, [r3, #0]
 8004448:	e7e1      	b.n	800440e <HAL_RCC_OscConfig+0xb6>
 800444a:	4b5c      	ldr	r3, [pc, #368]	@ (80045bc <HAL_RCC_OscConfig+0x264>)
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8004452:	601a      	str	r2, [r3, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800445a:	601a      	str	r2, [r3, #0]
 800445c:	e7d7      	b.n	800440e <HAL_RCC_OscConfig+0xb6>
        tickstart = HAL_GetTick();
 800445e:	f7fd fc87 	bl	8001d70 <HAL_GetTick>
 8004462:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004464:	4e55      	ldr	r6, [pc, #340]	@ (80045bc <HAL_RCC_OscConfig+0x264>)
 8004466:	6833      	ldr	r3, [r6, #0]
 8004468:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800446c:	d0a3      	beq.n	80043b6 <HAL_RCC_OscConfig+0x5e>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800446e:	f7fd fc7f 	bl	8001d70 <HAL_GetTick>
 8004472:	1b40      	subs	r0, r0, r5
 8004474:	2864      	cmp	r0, #100	@ 0x64
 8004476:	d9f6      	bls.n	8004466 <HAL_RCC_OscConfig+0x10e>
            return HAL_TIMEOUT;
 8004478:	2003      	movs	r0, #3
 800447a:	e2b2      	b.n	80049e2 <HAL_RCC_OscConfig+0x68a>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800447c:	f012 0f03 	tst.w	r2, #3
 8004480:	d1a6      	bne.n	80043d0 <HAL_RCC_OscConfig+0x78>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004482:	4b4e      	ldr	r3, [pc, #312]	@ (80045bc <HAL_RCC_OscConfig+0x264>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f013 0f04 	tst.w	r3, #4
 800448a:	d003      	beq.n	8004494 <HAL_RCC_OscConfig+0x13c>
 800448c:	68e3      	ldr	r3, [r4, #12]
 800448e:	2b00      	cmp	r3, #0
 8004490:	f000 82a2 	beq.w	80049d8 <HAL_RCC_OscConfig+0x680>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004494:	4a49      	ldr	r2, [pc, #292]	@ (80045bc <HAL_RCC_OscConfig+0x264>)
 8004496:	6813      	ldr	r3, [r2, #0]
 8004498:	f023 0319 	bic.w	r3, r3, #25
 800449c:	68e1      	ldr	r1, [r4, #12]
 800449e:	430b      	orrs	r3, r1
 80044a0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80044a2:	f7fd fc65 	bl	8001d70 <HAL_GetTick>
 80044a6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044a8:	4e44      	ldr	r6, [pc, #272]	@ (80045bc <HAL_RCC_OscConfig+0x264>)
 80044aa:	6833      	ldr	r3, [r6, #0]
 80044ac:	f013 0f04 	tst.w	r3, #4
 80044b0:	d106      	bne.n	80044c0 <HAL_RCC_OscConfig+0x168>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044b2:	f7fd fc5d 	bl	8001d70 <HAL_GetTick>
 80044b6:	1b40      	subs	r0, r0, r5
 80044b8:	2802      	cmp	r0, #2
 80044ba:	d9f6      	bls.n	80044aa <HAL_RCC_OscConfig+0x152>
            return HAL_TIMEOUT;
 80044bc:	2003      	movs	r0, #3
 80044be:	e290      	b.n	80049e2 <HAL_RCC_OscConfig+0x68a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044c0:	f7fd fc70 	bl	8001da4 <HAL_GetREVID>
 80044c4:	f241 0303 	movw	r3, #4099	@ 0x1003
 80044c8:	4298      	cmp	r0, r3
 80044ca:	d812      	bhi.n	80044f2 <HAL_RCC_OscConfig+0x19a>
 80044cc:	6922      	ldr	r2, [r4, #16]
 80044ce:	2a40      	cmp	r2, #64	@ 0x40
 80044d0:	d007      	beq.n	80044e2 <HAL_RCC_OscConfig+0x18a>
 80044d2:	493a      	ldr	r1, [pc, #232]	@ (80045bc <HAL_RCC_OscConfig+0x264>)
 80044d4:	684b      	ldr	r3, [r1, #4]
 80044d6:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80044da:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80044de:	604b      	str	r3, [r1, #4]
 80044e0:	e00f      	b.n	8004502 <HAL_RCC_OscConfig+0x1aa>
 80044e2:	4a36      	ldr	r2, [pc, #216]	@ (80045bc <HAL_RCC_OscConfig+0x264>)
 80044e4:	6853      	ldr	r3, [r2, #4]
 80044e6:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80044ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044ee:	6053      	str	r3, [r2, #4]
 80044f0:	e007      	b.n	8004502 <HAL_RCC_OscConfig+0x1aa>
 80044f2:	4a32      	ldr	r2, [pc, #200]	@ (80045bc <HAL_RCC_OscConfig+0x264>)
 80044f4:	6853      	ldr	r3, [r2, #4]
 80044f6:	6921      	ldr	r1, [r4, #16]
 80044f8:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80044fc:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004500:	6053      	str	r3, [r2, #4]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004502:	6823      	ldr	r3, [r4, #0]
 8004504:	f013 0f10 	tst.w	r3, #16
 8004508:	f000 8088 	beq.w	800461c <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800450c:	4a2b      	ldr	r2, [pc, #172]	@ (80045bc <HAL_RCC_OscConfig+0x264>)
 800450e:	6913      	ldr	r3, [r2, #16]
 8004510:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004514:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004516:	2b08      	cmp	r3, #8
 8004518:	d056      	beq.n	80045c8 <HAL_RCC_OscConfig+0x270>
 800451a:	2b18      	cmp	r3, #24
 800451c:	d050      	beq.n	80045c0 <HAL_RCC_OscConfig+0x268>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800451e:	69e3      	ldr	r3, [r4, #28]
 8004520:	2b00      	cmp	r3, #0
 8004522:	f000 80b8 	beq.w	8004696 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004526:	4a25      	ldr	r2, [pc, #148]	@ (80045bc <HAL_RCC_OscConfig+0x264>)
 8004528:	6813      	ldr	r3, [r2, #0]
 800452a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800452e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004530:	f7fd fc1e 	bl	8001d70 <HAL_GetTick>
 8004534:	4605      	mov	r5, r0

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004536:	4e21      	ldr	r6, [pc, #132]	@ (80045bc <HAL_RCC_OscConfig+0x264>)
 8004538:	6833      	ldr	r3, [r6, #0]
 800453a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800453e:	f040 8088 	bne.w	8004652 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004542:	f7fd fc15 	bl	8001d70 <HAL_GetTick>
 8004546:	1b40      	subs	r0, r0, r5
 8004548:	2802      	cmp	r0, #2
 800454a:	d9f5      	bls.n	8004538 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800454c:	2003      	movs	r0, #3
 800454e:	e248      	b.n	80049e2 <HAL_RCC_OscConfig+0x68a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004550:	f7fd fc28 	bl	8001da4 <HAL_GetREVID>
 8004554:	f241 0303 	movw	r3, #4099	@ 0x1003
 8004558:	4298      	cmp	r0, r3
 800455a:	d812      	bhi.n	8004582 <HAL_RCC_OscConfig+0x22a>
 800455c:	6922      	ldr	r2, [r4, #16]
 800455e:	2a40      	cmp	r2, #64	@ 0x40
 8004560:	d007      	beq.n	8004572 <HAL_RCC_OscConfig+0x21a>
 8004562:	4916      	ldr	r1, [pc, #88]	@ (80045bc <HAL_RCC_OscConfig+0x264>)
 8004564:	684b      	ldr	r3, [r1, #4]
 8004566:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800456a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800456e:	604b      	str	r3, [r1, #4]
 8004570:	e7c7      	b.n	8004502 <HAL_RCC_OscConfig+0x1aa>
 8004572:	4a12      	ldr	r2, [pc, #72]	@ (80045bc <HAL_RCC_OscConfig+0x264>)
 8004574:	6853      	ldr	r3, [r2, #4]
 8004576:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800457a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800457e:	6053      	str	r3, [r2, #4]
 8004580:	e7bf      	b.n	8004502 <HAL_RCC_OscConfig+0x1aa>
 8004582:	4a0e      	ldr	r2, [pc, #56]	@ (80045bc <HAL_RCC_OscConfig+0x264>)
 8004584:	6853      	ldr	r3, [r2, #4]
 8004586:	6921      	ldr	r1, [r4, #16]
 8004588:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800458c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004590:	6053      	str	r3, [r2, #4]
 8004592:	e7b6      	b.n	8004502 <HAL_RCC_OscConfig+0x1aa>
        __HAL_RCC_HSI_DISABLE();
 8004594:	4a09      	ldr	r2, [pc, #36]	@ (80045bc <HAL_RCC_OscConfig+0x264>)
 8004596:	6813      	ldr	r3, [r2, #0]
 8004598:	f023 0301 	bic.w	r3, r3, #1
 800459c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800459e:	f7fd fbe7 	bl	8001d70 <HAL_GetTick>
 80045a2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80045a4:	4e05      	ldr	r6, [pc, #20]	@ (80045bc <HAL_RCC_OscConfig+0x264>)
 80045a6:	6833      	ldr	r3, [r6, #0]
 80045a8:	f013 0f04 	tst.w	r3, #4
 80045ac:	d0a9      	beq.n	8004502 <HAL_RCC_OscConfig+0x1aa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045ae:	f7fd fbdf 	bl	8001d70 <HAL_GetTick>
 80045b2:	1b40      	subs	r0, r0, r5
 80045b4:	2802      	cmp	r0, #2
 80045b6:	d9f6      	bls.n	80045a6 <HAL_RCC_OscConfig+0x24e>
            return HAL_TIMEOUT;
 80045b8:	2003      	movs	r0, #3
 80045ba:	e212      	b.n	80049e2 <HAL_RCC_OscConfig+0x68a>
 80045bc:	58024400 	.word	0x58024400
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80045c0:	f002 0203 	and.w	r2, r2, #3
 80045c4:	2a01      	cmp	r2, #1
 80045c6:	d1aa      	bne.n	800451e <HAL_RCC_OscConfig+0x1c6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80045c8:	4ba1      	ldr	r3, [pc, #644]	@ (8004850 <HAL_RCC_OscConfig+0x4f8>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80045d0:	d003      	beq.n	80045da <HAL_RCC_OscConfig+0x282>
 80045d2:	69e3      	ldr	r3, [r4, #28]
 80045d4:	2b80      	cmp	r3, #128	@ 0x80
 80045d6:	f040 8201 	bne.w	80049dc <HAL_RCC_OscConfig+0x684>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80045da:	f7fd fbe3 	bl	8001da4 <HAL_GetREVID>
 80045de:	f241 0303 	movw	r3, #4099	@ 0x1003
 80045e2:	4298      	cmp	r0, r3
 80045e4:	d812      	bhi.n	800460c <HAL_RCC_OscConfig+0x2b4>
 80045e6:	6a22      	ldr	r2, [r4, #32]
 80045e8:	2a20      	cmp	r2, #32
 80045ea:	d007      	beq.n	80045fc <HAL_RCC_OscConfig+0x2a4>
 80045ec:	4998      	ldr	r1, [pc, #608]	@ (8004850 <HAL_RCC_OscConfig+0x4f8>)
 80045ee:	684b      	ldr	r3, [r1, #4]
 80045f0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80045f4:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 80045f8:	604b      	str	r3, [r1, #4]
 80045fa:	e00f      	b.n	800461c <HAL_RCC_OscConfig+0x2c4>
 80045fc:	4a94      	ldr	r2, [pc, #592]	@ (8004850 <HAL_RCC_OscConfig+0x4f8>)
 80045fe:	6853      	ldr	r3, [r2, #4]
 8004600:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004604:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004608:	6053      	str	r3, [r2, #4]
 800460a:	e007      	b.n	800461c <HAL_RCC_OscConfig+0x2c4>
 800460c:	4a90      	ldr	r2, [pc, #576]	@ (8004850 <HAL_RCC_OscConfig+0x4f8>)
 800460e:	68d3      	ldr	r3, [r2, #12]
 8004610:	6a21      	ldr	r1, [r4, #32]
 8004612:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8004616:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800461a:	60d3      	str	r3, [r2, #12]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800461c:	6823      	ldr	r3, [r4, #0]
 800461e:	f013 0f08 	tst.w	r3, #8
 8004622:	d060      	beq.n	80046e6 <HAL_RCC_OscConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004624:	6963      	ldr	r3, [r4, #20]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d049      	beq.n	80046be <HAL_RCC_OscConfig+0x366>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800462a:	4a89      	ldr	r2, [pc, #548]	@ (8004850 <HAL_RCC_OscConfig+0x4f8>)
 800462c:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 800462e:	f043 0301 	orr.w	r3, r3, #1
 8004632:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004634:	f7fd fb9c 	bl	8001d70 <HAL_GetTick>
 8004638:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800463a:	4e85      	ldr	r6, [pc, #532]	@ (8004850 <HAL_RCC_OscConfig+0x4f8>)
 800463c:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 800463e:	f013 0f02 	tst.w	r3, #2
 8004642:	d150      	bne.n	80046e6 <HAL_RCC_OscConfig+0x38e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004644:	f7fd fb94 	bl	8001d70 <HAL_GetTick>
 8004648:	1b40      	subs	r0, r0, r5
 800464a:	2802      	cmp	r0, #2
 800464c:	d9f6      	bls.n	800463c <HAL_RCC_OscConfig+0x2e4>
        {
          return HAL_TIMEOUT;
 800464e:	2003      	movs	r0, #3
 8004650:	e1c7      	b.n	80049e2 <HAL_RCC_OscConfig+0x68a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004652:	f7fd fba7 	bl	8001da4 <HAL_GetREVID>
 8004656:	f241 0303 	movw	r3, #4099	@ 0x1003
 800465a:	4298      	cmp	r0, r3
 800465c:	d812      	bhi.n	8004684 <HAL_RCC_OscConfig+0x32c>
 800465e:	6a22      	ldr	r2, [r4, #32]
 8004660:	2a20      	cmp	r2, #32
 8004662:	d007      	beq.n	8004674 <HAL_RCC_OscConfig+0x31c>
 8004664:	497a      	ldr	r1, [pc, #488]	@ (8004850 <HAL_RCC_OscConfig+0x4f8>)
 8004666:	684b      	ldr	r3, [r1, #4]
 8004668:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800466c:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8004670:	604b      	str	r3, [r1, #4]
 8004672:	e7d3      	b.n	800461c <HAL_RCC_OscConfig+0x2c4>
 8004674:	4a76      	ldr	r2, [pc, #472]	@ (8004850 <HAL_RCC_OscConfig+0x4f8>)
 8004676:	6853      	ldr	r3, [r2, #4]
 8004678:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800467c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004680:	6053      	str	r3, [r2, #4]
 8004682:	e7cb      	b.n	800461c <HAL_RCC_OscConfig+0x2c4>
 8004684:	4a72      	ldr	r2, [pc, #456]	@ (8004850 <HAL_RCC_OscConfig+0x4f8>)
 8004686:	68d3      	ldr	r3, [r2, #12]
 8004688:	6a21      	ldr	r1, [r4, #32]
 800468a:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 800468e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004692:	60d3      	str	r3, [r2, #12]
 8004694:	e7c2      	b.n	800461c <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_CSI_DISABLE();
 8004696:	4a6e      	ldr	r2, [pc, #440]	@ (8004850 <HAL_RCC_OscConfig+0x4f8>)
 8004698:	6813      	ldr	r3, [r2, #0]
 800469a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800469e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80046a0:	f7fd fb66 	bl	8001d70 <HAL_GetTick>
 80046a4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80046a6:	4e6a      	ldr	r6, [pc, #424]	@ (8004850 <HAL_RCC_OscConfig+0x4f8>)
 80046a8:	6833      	ldr	r3, [r6, #0]
 80046aa:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80046ae:	d0b5      	beq.n	800461c <HAL_RCC_OscConfig+0x2c4>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80046b0:	f7fd fb5e 	bl	8001d70 <HAL_GetTick>
 80046b4:	1b40      	subs	r0, r0, r5
 80046b6:	2802      	cmp	r0, #2
 80046b8:	d9f6      	bls.n	80046a8 <HAL_RCC_OscConfig+0x350>
            return HAL_TIMEOUT;
 80046ba:	2003      	movs	r0, #3
 80046bc:	e191      	b.n	80049e2 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046be:	4a64      	ldr	r2, [pc, #400]	@ (8004850 <HAL_RCC_OscConfig+0x4f8>)
 80046c0:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 80046c2:	f023 0301 	bic.w	r3, r3, #1
 80046c6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046c8:	f7fd fb52 	bl	8001d70 <HAL_GetTick>
 80046cc:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80046ce:	4e60      	ldr	r6, [pc, #384]	@ (8004850 <HAL_RCC_OscConfig+0x4f8>)
 80046d0:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 80046d2:	f013 0f02 	tst.w	r3, #2
 80046d6:	d006      	beq.n	80046e6 <HAL_RCC_OscConfig+0x38e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046d8:	f7fd fb4a 	bl	8001d70 <HAL_GetTick>
 80046dc:	1b40      	subs	r0, r0, r5
 80046de:	2802      	cmp	r0, #2
 80046e0:	d9f6      	bls.n	80046d0 <HAL_RCC_OscConfig+0x378>
        {
          return HAL_TIMEOUT;
 80046e2:	2003      	movs	r0, #3
 80046e4:	e17d      	b.n	80049e2 <HAL_RCC_OscConfig+0x68a>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80046e6:	6823      	ldr	r3, [r4, #0]
 80046e8:	f013 0f20 	tst.w	r3, #32
 80046ec:	d029      	beq.n	8004742 <HAL_RCC_OscConfig+0x3ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80046ee:	69a3      	ldr	r3, [r4, #24]
 80046f0:	b19b      	cbz	r3, 800471a <HAL_RCC_OscConfig+0x3c2>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80046f2:	4a57      	ldr	r2, [pc, #348]	@ (8004850 <HAL_RCC_OscConfig+0x4f8>)
 80046f4:	6813      	ldr	r3, [r2, #0]
 80046f6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80046fa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80046fc:	f7fd fb38 	bl	8001d70 <HAL_GetTick>
 8004700:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004702:	4e53      	ldr	r6, [pc, #332]	@ (8004850 <HAL_RCC_OscConfig+0x4f8>)
 8004704:	6833      	ldr	r3, [r6, #0]
 8004706:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 800470a:	d11a      	bne.n	8004742 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800470c:	f7fd fb30 	bl	8001d70 <HAL_GetTick>
 8004710:	1b40      	subs	r0, r0, r5
 8004712:	2802      	cmp	r0, #2
 8004714:	d9f6      	bls.n	8004704 <HAL_RCC_OscConfig+0x3ac>
        {
          return HAL_TIMEOUT;
 8004716:	2003      	movs	r0, #3
 8004718:	e163      	b.n	80049e2 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800471a:	4a4d      	ldr	r2, [pc, #308]	@ (8004850 <HAL_RCC_OscConfig+0x4f8>)
 800471c:	6813      	ldr	r3, [r2, #0]
 800471e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004722:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004724:	f7fd fb24 	bl	8001d70 <HAL_GetTick>
 8004728:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800472a:	4e49      	ldr	r6, [pc, #292]	@ (8004850 <HAL_RCC_OscConfig+0x4f8>)
 800472c:	6833      	ldr	r3, [r6, #0]
 800472e:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8004732:	d006      	beq.n	8004742 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004734:	f7fd fb1c 	bl	8001d70 <HAL_GetTick>
 8004738:	1b40      	subs	r0, r0, r5
 800473a:	2802      	cmp	r0, #2
 800473c:	d9f6      	bls.n	800472c <HAL_RCC_OscConfig+0x3d4>
        {
          return HAL_TIMEOUT;
 800473e:	2003      	movs	r0, #3
 8004740:	e14f      	b.n	80049e2 <HAL_RCC_OscConfig+0x68a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004742:	6823      	ldr	r3, [r4, #0]
 8004744:	f013 0f04 	tst.w	r3, #4
 8004748:	d121      	bne.n	800478e <HAL_RCC_OscConfig+0x436>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800474a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800474c:	2b00      	cmp	r3, #0
 800474e:	f000 8147 	beq.w	80049e0 <HAL_RCC_OscConfig+0x688>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004752:	4a3f      	ldr	r2, [pc, #252]	@ (8004850 <HAL_RCC_OscConfig+0x4f8>)
 8004754:	6912      	ldr	r2, [r2, #16]
 8004756:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 800475a:	2a18      	cmp	r2, #24
 800475c:	f000 80ee 	beq.w	800493c <HAL_RCC_OscConfig+0x5e4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004760:	2b02      	cmp	r3, #2
 8004762:	d079      	beq.n	8004858 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004764:	4a3a      	ldr	r2, [pc, #232]	@ (8004850 <HAL_RCC_OscConfig+0x4f8>)
 8004766:	6813      	ldr	r3, [r2, #0]
 8004768:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800476c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800476e:	f7fd faff 	bl	8001d70 <HAL_GetTick>
 8004772:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004774:	4d36      	ldr	r5, [pc, #216]	@ (8004850 <HAL_RCC_OscConfig+0x4f8>)
 8004776:	682b      	ldr	r3, [r5, #0]
 8004778:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800477c:	f000 80dc 	beq.w	8004938 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004780:	f7fd faf6 	bl	8001d70 <HAL_GetTick>
 8004784:	1b00      	subs	r0, r0, r4
 8004786:	2802      	cmp	r0, #2
 8004788:	d9f5      	bls.n	8004776 <HAL_RCC_OscConfig+0x41e>
          {
            return HAL_TIMEOUT;
 800478a:	2003      	movs	r0, #3
 800478c:	e129      	b.n	80049e2 <HAL_RCC_OscConfig+0x68a>
    PWR->CR1 |= PWR_CR1_DBP;
 800478e:	4a31      	ldr	r2, [pc, #196]	@ (8004854 <HAL_RCC_OscConfig+0x4fc>)
 8004790:	6813      	ldr	r3, [r2, #0]
 8004792:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004796:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004798:	f7fd faea 	bl	8001d70 <HAL_GetTick>
 800479c:	4605      	mov	r5, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800479e:	4e2d      	ldr	r6, [pc, #180]	@ (8004854 <HAL_RCC_OscConfig+0x4fc>)
 80047a0:	6833      	ldr	r3, [r6, #0]
 80047a2:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80047a6:	d106      	bne.n	80047b6 <HAL_RCC_OscConfig+0x45e>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047a8:	f7fd fae2 	bl	8001d70 <HAL_GetTick>
 80047ac:	1b40      	subs	r0, r0, r5
 80047ae:	2864      	cmp	r0, #100	@ 0x64
 80047b0:	d9f6      	bls.n	80047a0 <HAL_RCC_OscConfig+0x448>
        return HAL_TIMEOUT;
 80047b2:	2003      	movs	r0, #3
 80047b4:	e115      	b.n	80049e2 <HAL_RCC_OscConfig+0x68a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047b6:	68a3      	ldr	r3, [r4, #8]
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d00a      	beq.n	80047d2 <HAL_RCC_OscConfig+0x47a>
 80047bc:	bb0b      	cbnz	r3, 8004802 <HAL_RCC_OscConfig+0x4aa>
 80047be:	4b24      	ldr	r3, [pc, #144]	@ (8004850 <HAL_RCC_OscConfig+0x4f8>)
 80047c0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80047c2:	f022 0201 	bic.w	r2, r2, #1
 80047c6:	671a      	str	r2, [r3, #112]	@ 0x70
 80047c8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80047ca:	f022 0204 	bic.w	r2, r2, #4
 80047ce:	671a      	str	r2, [r3, #112]	@ 0x70
 80047d0:	e004      	b.n	80047dc <HAL_RCC_OscConfig+0x484>
 80047d2:	4a1f      	ldr	r2, [pc, #124]	@ (8004850 <HAL_RCC_OscConfig+0x4f8>)
 80047d4:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 80047d6:	f043 0301 	orr.w	r3, r3, #1
 80047da:	6713      	str	r3, [r2, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047dc:	68a3      	ldr	r3, [r4, #8]
 80047de:	b333      	cbz	r3, 800482e <HAL_RCC_OscConfig+0x4d6>
      tickstart = HAL_GetTick();
 80047e0:	f7fd fac6 	bl	8001d70 <HAL_GetTick>
 80047e4:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80047e6:	4e1a      	ldr	r6, [pc, #104]	@ (8004850 <HAL_RCC_OscConfig+0x4f8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047e8:	f241 3788 	movw	r7, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80047ec:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 80047ee:	f013 0f02 	tst.w	r3, #2
 80047f2:	d1aa      	bne.n	800474a <HAL_RCC_OscConfig+0x3f2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047f4:	f7fd fabc 	bl	8001d70 <HAL_GetTick>
 80047f8:	1b40      	subs	r0, r0, r5
 80047fa:	42b8      	cmp	r0, r7
 80047fc:	d9f6      	bls.n	80047ec <HAL_RCC_OscConfig+0x494>
          return HAL_TIMEOUT;
 80047fe:	2003      	movs	r0, #3
 8004800:	e0ef      	b.n	80049e2 <HAL_RCC_OscConfig+0x68a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004802:	2b05      	cmp	r3, #5
 8004804:	d009      	beq.n	800481a <HAL_RCC_OscConfig+0x4c2>
 8004806:	4b12      	ldr	r3, [pc, #72]	@ (8004850 <HAL_RCC_OscConfig+0x4f8>)
 8004808:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800480a:	f022 0201 	bic.w	r2, r2, #1
 800480e:	671a      	str	r2, [r3, #112]	@ 0x70
 8004810:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004812:	f022 0204 	bic.w	r2, r2, #4
 8004816:	671a      	str	r2, [r3, #112]	@ 0x70
 8004818:	e7e0      	b.n	80047dc <HAL_RCC_OscConfig+0x484>
 800481a:	4b0d      	ldr	r3, [pc, #52]	@ (8004850 <HAL_RCC_OscConfig+0x4f8>)
 800481c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800481e:	f042 0204 	orr.w	r2, r2, #4
 8004822:	671a      	str	r2, [r3, #112]	@ 0x70
 8004824:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004826:	f042 0201 	orr.w	r2, r2, #1
 800482a:	671a      	str	r2, [r3, #112]	@ 0x70
 800482c:	e7d6      	b.n	80047dc <HAL_RCC_OscConfig+0x484>
      tickstart = HAL_GetTick();
 800482e:	f7fd fa9f 	bl	8001d70 <HAL_GetTick>
 8004832:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004834:	4e06      	ldr	r6, [pc, #24]	@ (8004850 <HAL_RCC_OscConfig+0x4f8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004836:	f241 3788 	movw	r7, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800483a:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 800483c:	f013 0f02 	tst.w	r3, #2
 8004840:	d083      	beq.n	800474a <HAL_RCC_OscConfig+0x3f2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004842:	f7fd fa95 	bl	8001d70 <HAL_GetTick>
 8004846:	1b40      	subs	r0, r0, r5
 8004848:	42b8      	cmp	r0, r7
 800484a:	d9f6      	bls.n	800483a <HAL_RCC_OscConfig+0x4e2>
          return HAL_TIMEOUT;
 800484c:	2003      	movs	r0, #3
 800484e:	e0c8      	b.n	80049e2 <HAL_RCC_OscConfig+0x68a>
 8004850:	58024400 	.word	0x58024400
 8004854:	58024800 	.word	0x58024800
        __HAL_RCC_PLL_DISABLE();
 8004858:	4a69      	ldr	r2, [pc, #420]	@ (8004a00 <HAL_RCC_OscConfig+0x6a8>)
 800485a:	6813      	ldr	r3, [r2, #0]
 800485c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004860:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004862:	f7fd fa85 	bl	8001d70 <HAL_GetTick>
 8004866:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004868:	4e65      	ldr	r6, [pc, #404]	@ (8004a00 <HAL_RCC_OscConfig+0x6a8>)
 800486a:	6833      	ldr	r3, [r6, #0]
 800486c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8004870:	d006      	beq.n	8004880 <HAL_RCC_OscConfig+0x528>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004872:	f7fd fa7d 	bl	8001d70 <HAL_GetTick>
 8004876:	1b40      	subs	r0, r0, r5
 8004878:	2802      	cmp	r0, #2
 800487a:	d9f6      	bls.n	800486a <HAL_RCC_OscConfig+0x512>
            return HAL_TIMEOUT;
 800487c:	2003      	movs	r0, #3
 800487e:	e0b0      	b.n	80049e2 <HAL_RCC_OscConfig+0x68a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004880:	4b5f      	ldr	r3, [pc, #380]	@ (8004a00 <HAL_RCC_OscConfig+0x6a8>)
 8004882:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8004884:	4a5f      	ldr	r2, [pc, #380]	@ (8004a04 <HAL_RCC_OscConfig+0x6ac>)
 8004886:	400a      	ands	r2, r1
 8004888:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800488a:	430a      	orrs	r2, r1
 800488c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800488e:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 8004892:	629a      	str	r2, [r3, #40]	@ 0x28
 8004894:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8004896:	3a01      	subs	r2, #1
 8004898:	0252      	lsls	r2, r2, #9
 800489a:	b292      	uxth	r2, r2
 800489c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800489e:	3901      	subs	r1, #1
 80048a0:	0409      	lsls	r1, r1, #16
 80048a2:	f401 01fe 	and.w	r1, r1, #8323072	@ 0x7f0000
 80048a6:	430a      	orrs	r2, r1
 80048a8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80048aa:	3901      	subs	r1, #1
 80048ac:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80048b0:	430a      	orrs	r2, r1
 80048b2:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80048b4:	3901      	subs	r1, #1
 80048b6:	0609      	lsls	r1, r1, #24
 80048b8:	f001 41fe 	and.w	r1, r1, #2130706432	@ 0x7f000000
 80048bc:	430a      	orrs	r2, r1
 80048be:	631a      	str	r2, [r3, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 80048c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048c2:	f022 0201 	bic.w	r2, r2, #1
 80048c6:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80048c8:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80048ca:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80048cc:	4a4e      	ldr	r2, [pc, #312]	@ (8004a08 <HAL_RCC_OscConfig+0x6b0>)
 80048ce:	4002      	ands	r2, r0
 80048d0:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80048d4:	635a      	str	r2, [r3, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80048d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048d8:	f022 020c 	bic.w	r2, r2, #12
 80048dc:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 80048de:	430a      	orrs	r2, r1
 80048e0:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80048e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048e4:	f022 0202 	bic.w	r2, r2, #2
 80048e8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80048ea:	430a      	orrs	r2, r1
 80048ec:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80048ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048f0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80048f4:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048f8:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80048fc:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80048fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004900:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8004904:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 8004906:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004908:	f042 0201 	orr.w	r2, r2, #1
 800490c:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8004914:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004916:	f7fd fa2b 	bl	8001d70 <HAL_GetTick>
 800491a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800491c:	4d38      	ldr	r5, [pc, #224]	@ (8004a00 <HAL_RCC_OscConfig+0x6a8>)
 800491e:	682b      	ldr	r3, [r5, #0]
 8004920:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8004924:	d106      	bne.n	8004934 <HAL_RCC_OscConfig+0x5dc>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004926:	f7fd fa23 	bl	8001d70 <HAL_GetTick>
 800492a:	1b00      	subs	r0, r0, r4
 800492c:	2802      	cmp	r0, #2
 800492e:	d9f6      	bls.n	800491e <HAL_RCC_OscConfig+0x5c6>
            return HAL_TIMEOUT;
 8004930:	2003      	movs	r0, #3
 8004932:	e056      	b.n	80049e2 <HAL_RCC_OscConfig+0x68a>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
 8004934:	2000      	movs	r0, #0
 8004936:	e054      	b.n	80049e2 <HAL_RCC_OscConfig+0x68a>
 8004938:	2000      	movs	r0, #0
 800493a:	e052      	b.n	80049e2 <HAL_RCC_OscConfig+0x68a>
      temp1_pllckcfg = RCC->PLLCKSELR;
 800493c:	4a30      	ldr	r2, [pc, #192]	@ (8004a00 <HAL_RCC_OscConfig+0x6a8>)
 800493e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004940:	6b10      	ldr	r0, [r2, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004942:	2b01      	cmp	r3, #1
 8004944:	d04e      	beq.n	80049e4 <HAL_RCC_OscConfig+0x68c>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004946:	f001 0303 	and.w	r3, r1, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800494a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800494c:	4293      	cmp	r3, r2
 800494e:	d14b      	bne.n	80049e8 <HAL_RCC_OscConfig+0x690>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004950:	f3c1 1105 	ubfx	r1, r1, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004954:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004956:	4299      	cmp	r1, r3
 8004958:	d148      	bne.n	80049ec <HAL_RCC_OscConfig+0x694>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800495a:	f3c0 0208 	ubfx	r2, r0, #0, #9
 800495e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004960:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004962:	429a      	cmp	r2, r3
 8004964:	d144      	bne.n	80049f0 <HAL_RCC_OscConfig+0x698>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004966:	f3c0 2246 	ubfx	r2, r0, #9, #7
 800496a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800496c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800496e:	429a      	cmp	r2, r3
 8004970:	d140      	bne.n	80049f4 <HAL_RCC_OscConfig+0x69c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004972:	f3c0 4206 	ubfx	r2, r0, #16, #7
 8004976:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004978:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800497a:	429a      	cmp	r2, r3
 800497c:	d13c      	bne.n	80049f8 <HAL_RCC_OscConfig+0x6a0>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800497e:	f3c0 6006 	ubfx	r0, r0, #24, #7
 8004982:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004984:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004986:	4298      	cmp	r0, r3
 8004988:	d138      	bne.n	80049fc <HAL_RCC_OscConfig+0x6a4>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800498a:	4b1d      	ldr	r3, [pc, #116]	@ (8004a00 <HAL_RCC_OscConfig+0x6a8>)
 800498c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800498e:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004992:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8004994:	429a      	cmp	r2, r3
 8004996:	d101      	bne.n	800499c <HAL_RCC_OscConfig+0x644>
  return HAL_OK;
 8004998:	2000      	movs	r0, #0
 800499a:	e022      	b.n	80049e2 <HAL_RCC_OscConfig+0x68a>
          __HAL_RCC_PLLFRACN_DISABLE();
 800499c:	4a18      	ldr	r2, [pc, #96]	@ (8004a00 <HAL_RCC_OscConfig+0x6a8>)
 800499e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80049a0:	f023 0301 	bic.w	r3, r3, #1
 80049a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 80049a6:	f7fd f9e3 	bl	8001d70 <HAL_GetTick>
 80049aa:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80049ac:	f7fd f9e0 	bl	8001d70 <HAL_GetTick>
 80049b0:	42a8      	cmp	r0, r5
 80049b2:	d0fb      	beq.n	80049ac <HAL_RCC_OscConfig+0x654>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80049b4:	4a12      	ldr	r2, [pc, #72]	@ (8004a00 <HAL_RCC_OscConfig+0x6a8>)
 80049b6:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 80049b8:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80049ba:	4b13      	ldr	r3, [pc, #76]	@ (8004a08 <HAL_RCC_OscConfig+0x6b0>)
 80049bc:	4003      	ands	r3, r0
 80049be:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80049c2:	6353      	str	r3, [r2, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 80049c4:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80049c6:	f043 0301 	orr.w	r3, r3, #1
 80049ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
  return HAL_OK;
 80049cc:	2000      	movs	r0, #0
 80049ce:	e008      	b.n	80049e2 <HAL_RCC_OscConfig+0x68a>
    return HAL_ERROR;
 80049d0:	2001      	movs	r0, #1
}
 80049d2:	4770      	bx	lr
        return HAL_ERROR;
 80049d4:	2001      	movs	r0, #1
 80049d6:	e004      	b.n	80049e2 <HAL_RCC_OscConfig+0x68a>
        return HAL_ERROR;
 80049d8:	2001      	movs	r0, #1
 80049da:	e002      	b.n	80049e2 <HAL_RCC_OscConfig+0x68a>
        return HAL_ERROR;
 80049dc:	2001      	movs	r0, #1
 80049de:	e000      	b.n	80049e2 <HAL_RCC_OscConfig+0x68a>
  return HAL_OK;
 80049e0:	2000      	movs	r0, #0
}
 80049e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_ERROR;
 80049e4:	2001      	movs	r0, #1
 80049e6:	e7fc      	b.n	80049e2 <HAL_RCC_OscConfig+0x68a>
 80049e8:	2001      	movs	r0, #1
 80049ea:	e7fa      	b.n	80049e2 <HAL_RCC_OscConfig+0x68a>
 80049ec:	2001      	movs	r0, #1
 80049ee:	e7f8      	b.n	80049e2 <HAL_RCC_OscConfig+0x68a>
 80049f0:	2001      	movs	r0, #1
 80049f2:	e7f6      	b.n	80049e2 <HAL_RCC_OscConfig+0x68a>
 80049f4:	2001      	movs	r0, #1
 80049f6:	e7f4      	b.n	80049e2 <HAL_RCC_OscConfig+0x68a>
 80049f8:	2001      	movs	r0, #1
 80049fa:	e7f2      	b.n	80049e2 <HAL_RCC_OscConfig+0x68a>
 80049fc:	2001      	movs	r0, #1
 80049fe:	e7f0      	b.n	80049e2 <HAL_RCC_OscConfig+0x68a>
 8004a00:	58024400 	.word	0x58024400
 8004a04:	fffffc0c 	.word	0xfffffc0c
 8004a08:	ffff0007 	.word	0xffff0007

08004a0c <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a0c:	4b74      	ldr	r3, [pc, #464]	@ (8004be0 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a14:	2b10      	cmp	r3, #16
 8004a16:	f000 80de 	beq.w	8004bd6 <HAL_RCC_GetSysClockFreq+0x1ca>
 8004a1a:	2b18      	cmp	r3, #24
 8004a1c:	d00f      	beq.n	8004a3e <HAL_RCC_GetSysClockFreq+0x32>
 8004a1e:	b10b      	cbz	r3, 8004a24 <HAL_RCC_GetSysClockFreq+0x18>
      }

      break;

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004a20:	4870      	ldr	r0, [pc, #448]	@ (8004be4 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8004a22:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a24:	4b6e      	ldr	r3, [pc, #440]	@ (8004be0 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f013 0f20 	tst.w	r3, #32
 8004a2c:	f000 80d5 	beq.w	8004bda <HAL_RCC_GetSysClockFreq+0x1ce>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a30:	4b6b      	ldr	r3, [pc, #428]	@ (8004be0 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004a38:	486b      	ldr	r0, [pc, #428]	@ (8004be8 <HAL_RCC_GetSysClockFreq+0x1dc>)
 8004a3a:	40d8      	lsrs	r0, r3
 8004a3c:	4770      	bx	lr
{
 8004a3e:	b410      	push	{r4}
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a40:	4b67      	ldr	r3, [pc, #412]	@ (8004be0 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8004a42:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004a44:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8004a46:	f3c1 1005 	ubfx	r0, r1, #4, #6
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004a4a:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004a4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34

      if (pllm != 0U)
 8004a4e:	f411 7f7c 	tst.w	r1, #1008	@ 0x3f0
 8004a52:	f000 80a0 	beq.w	8004b96 <HAL_RCC_GetSysClockFreq+0x18a>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004a56:	f3c3 03cc 	ubfx	r3, r3, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004a5a:	f004 0401 	and.w	r4, r4, #1
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004a5e:	fb04 f303 	mul.w	r3, r4, r3
 8004a62:	ee07 3a90 	vmov	s15, r3
 8004a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a6a:	f002 0203 	and.w	r2, r2, #3
 8004a6e:	2a01      	cmp	r2, #1
 8004a70:	d066      	beq.n	8004b40 <HAL_RCC_GetSysClockFreq+0x134>
 8004a72:	2a02      	cmp	r2, #2
 8004a74:	f000 8092 	beq.w	8004b9c <HAL_RCC_GetSysClockFreq+0x190>
 8004a78:	b1e2      	cbz	r2, 8004ab4 <HAL_RCC_GetSysClockFreq+0xa8>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a7a:	4b59      	ldr	r3, [pc, #356]	@ (8004be0 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8004a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a82:	ee07 3a10 	vmov	s14, r3
 8004a86:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004a8a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004bec <HAL_RCC_GetSysClockFreq+0x1e0>
 8004a8e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004a92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004a9a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004a9e:	ee07 0a10 	vmov	s14, r0
 8004aa2:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8004aa6:	ed9f 6a52 	vldr	s12, [pc, #328]	@ 8004bf0 <HAL_RCC_GetSysClockFreq+0x1e4>
 8004aaa:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8004aae:	ee67 7a87 	vmul.f32	s15, s15, s14
            break;
 8004ab2:	e061      	b.n	8004b78 <HAL_RCC_GetSysClockFreq+0x16c>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ab4:	4b4a      	ldr	r3, [pc, #296]	@ (8004be0 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f013 0f20 	tst.w	r3, #32
 8004abc:	d023      	beq.n	8004b06 <HAL_RCC_GetSysClockFreq+0xfa>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004abe:	4b48      	ldr	r3, [pc, #288]	@ (8004be0 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8004ac0:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ac4:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8004ac8:	4a47      	ldr	r2, [pc, #284]	@ (8004be8 <HAL_RCC_GetSysClockFreq+0x1dc>)
 8004aca:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004acc:	ee07 2a10 	vmov	s14, r2
 8004ad0:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8004ad4:	ee07 0a10 	vmov	s14, r0
 8004ad8:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 8004adc:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8004ae0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ae4:	ee06 3a90 	vmov	s13, r3
 8004ae8:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004aec:	ed9f 6a3f 	vldr	s12, [pc, #252]	@ 8004bec <HAL_RCC_GetSysClockFreq+0x1e0>
 8004af0:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004af4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004af8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004afc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b04:	e038      	b.n	8004b78 <HAL_RCC_GetSysClockFreq+0x16c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b06:	4b36      	ldr	r3, [pc, #216]	@ (8004be0 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8004b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b0e:	ee07 3a10 	vmov	s14, r3
 8004b12:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004b16:	eddf 6a35 	vldr	s13, [pc, #212]	@ 8004bec <HAL_RCC_GetSysClockFreq+0x1e0>
 8004b1a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004b1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b22:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b26:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004b2a:	ee07 0a10 	vmov	s14, r0
 8004b2e:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8004b32:	ed9f 6a30 	vldr	s12, [pc, #192]	@ 8004bf4 <HAL_RCC_GetSysClockFreq+0x1e8>
 8004b36:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8004b3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b3e:	e01b      	b.n	8004b78 <HAL_RCC_GetSysClockFreq+0x16c>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b40:	4b27      	ldr	r3, [pc, #156]	@ (8004be0 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8004b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b48:	ee07 3a10 	vmov	s14, r3
 8004b4c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004b50:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004bec <HAL_RCC_GetSysClockFreq+0x1e0>
 8004b54:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004b58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b5c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b60:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004b64:	ee07 0a10 	vmov	s14, r0
 8004b68:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8004b6c:	ed9f 6a20 	vldr	s12, [pc, #128]	@ 8004bf0 <HAL_RCC_GetSysClockFreq+0x1e4>
 8004b70:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8004b74:	ee67 7a87 	vmul.f32	s15, s15, s14
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004b78:	4b19      	ldr	r3, [pc, #100]	@ (8004be0 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8004b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b7c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004b80:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004b82:	ee07 3a10 	vmov	s14, r3
 8004b86:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004b8a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004b8e:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8004b92:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 8004b96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b9a:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b9c:	4b10      	ldr	r3, [pc, #64]	@ (8004be0 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8004b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ba0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ba4:	ee07 3a10 	vmov	s14, r3
 8004ba8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004bac:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8004bec <HAL_RCC_GetSysClockFreq+0x1e0>
 8004bb0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004bb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bb8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004bbc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004bc0:	ee07 0a10 	vmov	s14, r0
 8004bc4:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8004bc8:	ed9f 6a0b 	vldr	s12, [pc, #44]	@ 8004bf8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004bcc:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8004bd0:	ee67 7a87 	vmul.f32	s15, s15, s14
            break;
 8004bd4:	e7d0      	b.n	8004b78 <HAL_RCC_GetSysClockFreq+0x16c>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004bd6:	4809      	ldr	r0, [pc, #36]	@ (8004bfc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004bd8:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004bda:	4803      	ldr	r0, [pc, #12]	@ (8004be8 <HAL_RCC_GetSysClockFreq+0x1dc>)
}
 8004bdc:	4770      	bx	lr
 8004bde:	bf00      	nop
 8004be0:	58024400 	.word	0x58024400
 8004be4:	003d0900 	.word	0x003d0900
 8004be8:	03d09000 	.word	0x03d09000
 8004bec:	39000000 	.word	0x39000000
 8004bf0:	4a742400 	.word	0x4a742400
 8004bf4:	4c742400 	.word	0x4c742400
 8004bf8:	4b742400 	.word	0x4b742400
 8004bfc:	00f42400 	.word	0x00f42400

08004c00 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8004c00:	2800      	cmp	r0, #0
 8004c02:	f000 80c3 	beq.w	8004d8c <HAL_RCC_ClockConfig+0x18c>
{
 8004c06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c0a:	460d      	mov	r5, r1
 8004c0c:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c0e:	4b65      	ldr	r3, [pc, #404]	@ (8004da4 <HAL_RCC_ClockConfig+0x1a4>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 030f 	and.w	r3, r3, #15
 8004c16:	428b      	cmp	r3, r1
 8004c18:	d20b      	bcs.n	8004c32 <HAL_RCC_ClockConfig+0x32>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c1a:	4a62      	ldr	r2, [pc, #392]	@ (8004da4 <HAL_RCC_ClockConfig+0x1a4>)
 8004c1c:	6813      	ldr	r3, [r2, #0]
 8004c1e:	f023 030f 	bic.w	r3, r3, #15
 8004c22:	430b      	orrs	r3, r1
 8004c24:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c26:	6813      	ldr	r3, [r2, #0]
 8004c28:	f003 030f 	and.w	r3, r3, #15
 8004c2c:	428b      	cmp	r3, r1
 8004c2e:	f040 80af 	bne.w	8004d90 <HAL_RCC_ClockConfig+0x190>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004c32:	6823      	ldr	r3, [r4, #0]
 8004c34:	f013 0f04 	tst.w	r3, #4
 8004c38:	d00c      	beq.n	8004c54 <HAL_RCC_ClockConfig+0x54>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004c3a:	6922      	ldr	r2, [r4, #16]
 8004c3c:	4b5a      	ldr	r3, [pc, #360]	@ (8004da8 <HAL_RCC_ClockConfig+0x1a8>)
 8004c3e:	699b      	ldr	r3, [r3, #24]
 8004c40:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d905      	bls.n	8004c54 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004c48:	4957      	ldr	r1, [pc, #348]	@ (8004da8 <HAL_RCC_ClockConfig+0x1a8>)
 8004c4a:	698b      	ldr	r3, [r1, #24]
 8004c4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c50:	4313      	orrs	r3, r2
 8004c52:	618b      	str	r3, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c54:	6823      	ldr	r3, [r4, #0]
 8004c56:	f013 0f08 	tst.w	r3, #8
 8004c5a:	d00c      	beq.n	8004c76 <HAL_RCC_ClockConfig+0x76>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004c5c:	6962      	ldr	r2, [r4, #20]
 8004c5e:	4b52      	ldr	r3, [pc, #328]	@ (8004da8 <HAL_RCC_ClockConfig+0x1a8>)
 8004c60:	69db      	ldr	r3, [r3, #28]
 8004c62:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d905      	bls.n	8004c76 <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004c6a:	494f      	ldr	r1, [pc, #316]	@ (8004da8 <HAL_RCC_ClockConfig+0x1a8>)
 8004c6c:	69cb      	ldr	r3, [r1, #28]
 8004c6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c72:	4313      	orrs	r3, r2
 8004c74:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c76:	6823      	ldr	r3, [r4, #0]
 8004c78:	f013 0f10 	tst.w	r3, #16
 8004c7c:	d00c      	beq.n	8004c98 <HAL_RCC_ClockConfig+0x98>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004c7e:	69a2      	ldr	r2, [r4, #24]
 8004c80:	4b49      	ldr	r3, [pc, #292]	@ (8004da8 <HAL_RCC_ClockConfig+0x1a8>)
 8004c82:	69db      	ldr	r3, [r3, #28]
 8004c84:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d905      	bls.n	8004c98 <HAL_RCC_ClockConfig+0x98>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004c8c:	4946      	ldr	r1, [pc, #280]	@ (8004da8 <HAL_RCC_ClockConfig+0x1a8>)
 8004c8e:	69cb      	ldr	r3, [r1, #28]
 8004c90:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004c94:	4313      	orrs	r3, r2
 8004c96:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004c98:	6823      	ldr	r3, [r4, #0]
 8004c9a:	f013 0f20 	tst.w	r3, #32
 8004c9e:	d00c      	beq.n	8004cba <HAL_RCC_ClockConfig+0xba>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004ca0:	69e2      	ldr	r2, [r4, #28]
 8004ca2:	4b41      	ldr	r3, [pc, #260]	@ (8004da8 <HAL_RCC_ClockConfig+0x1a8>)
 8004ca4:	6a1b      	ldr	r3, [r3, #32]
 8004ca6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d905      	bls.n	8004cba <HAL_RCC_ClockConfig+0xba>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004cae:	493e      	ldr	r1, [pc, #248]	@ (8004da8 <HAL_RCC_ClockConfig+0x1a8>)
 8004cb0:	6a0b      	ldr	r3, [r1, #32]
 8004cb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	620b      	str	r3, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cba:	6823      	ldr	r3, [r4, #0]
 8004cbc:	f013 0f02 	tst.w	r3, #2
 8004cc0:	d074      	beq.n	8004dac <HAL_RCC_ClockConfig+0x1ac>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004cc2:	68e1      	ldr	r1, [r4, #12]
 8004cc4:	4a38      	ldr	r2, [pc, #224]	@ (8004da8 <HAL_RCC_ClockConfig+0x1a8>)
 8004cc6:	6992      	ldr	r2, [r2, #24]
 8004cc8:	f002 020f 	and.w	r2, r2, #15
 8004ccc:	4291      	cmp	r1, r2
 8004cce:	d965      	bls.n	8004d9c <HAL_RCC_ClockConfig+0x19c>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cd0:	4a35      	ldr	r2, [pc, #212]	@ (8004da8 <HAL_RCC_ClockConfig+0x1a8>)
 8004cd2:	6993      	ldr	r3, [r2, #24]
 8004cd4:	f023 030f 	bic.w	r3, r3, #15
 8004cd8:	430b      	orrs	r3, r1
 8004cda:	6193      	str	r3, [r2, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cdc:	6823      	ldr	r3, [r4, #0]
 8004cde:	f013 0f01 	tst.w	r3, #1
 8004ce2:	d041      	beq.n	8004d68 <HAL_RCC_ClockConfig+0x168>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004ce4:	4a30      	ldr	r2, [pc, #192]	@ (8004da8 <HAL_RCC_ClockConfig+0x1a8>)
 8004ce6:	6993      	ldr	r3, [r2, #24]
 8004ce8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004cec:	68a1      	ldr	r1, [r4, #8]
 8004cee:	430b      	orrs	r3, r1
 8004cf0:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cf2:	6862      	ldr	r2, [r4, #4]
 8004cf4:	2a02      	cmp	r2, #2
 8004cf6:	d00a      	beq.n	8004d0e <HAL_RCC_ClockConfig+0x10e>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cf8:	2a03      	cmp	r2, #3
 8004cfa:	d027      	beq.n	8004d4c <HAL_RCC_ClockConfig+0x14c>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004cfc:	2a01      	cmp	r2, #1
 8004cfe:	d02c      	beq.n	8004d5a <HAL_RCC_ClockConfig+0x15a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d00:	4b29      	ldr	r3, [pc, #164]	@ (8004da8 <HAL_RCC_ClockConfig+0x1a8>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f013 0f04 	tst.w	r3, #4
 8004d08:	d106      	bne.n	8004d18 <HAL_RCC_ClockConfig+0x118>
        return HAL_ERROR;
 8004d0a:	2001      	movs	r0, #1
 8004d0c:	e0c1      	b.n	8004e92 <HAL_RCC_ClockConfig+0x292>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d0e:	4b26      	ldr	r3, [pc, #152]	@ (8004da8 <HAL_RCC_ClockConfig+0x1a8>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8004d16:	d03d      	beq.n	8004d94 <HAL_RCC_ClockConfig+0x194>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d18:	4923      	ldr	r1, [pc, #140]	@ (8004da8 <HAL_RCC_ClockConfig+0x1a8>)
 8004d1a:	690b      	ldr	r3, [r1, #16]
 8004d1c:	f023 0307 	bic.w	r3, r3, #7
 8004d20:	4313      	orrs	r3, r2
 8004d22:	610b      	str	r3, [r1, #16]
    tickstart = HAL_GetTick();
 8004d24:	f7fd f824 	bl	8001d70 <HAL_GetTick>
 8004d28:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d2a:	4f1f      	ldr	r7, [pc, #124]	@ (8004da8 <HAL_RCC_ClockConfig+0x1a8>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d2c:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d36:	6862      	ldr	r2, [r4, #4]
 8004d38:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8004d3c:	d014      	beq.n	8004d68 <HAL_RCC_ClockConfig+0x168>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d3e:	f7fd f817 	bl	8001d70 <HAL_GetTick>
 8004d42:	1b80      	subs	r0, r0, r6
 8004d44:	4540      	cmp	r0, r8
 8004d46:	d9f3      	bls.n	8004d30 <HAL_RCC_ClockConfig+0x130>
        return HAL_TIMEOUT;
 8004d48:	2003      	movs	r0, #3
 8004d4a:	e0a2      	b.n	8004e92 <HAL_RCC_ClockConfig+0x292>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d4c:	4b16      	ldr	r3, [pc, #88]	@ (8004da8 <HAL_RCC_ClockConfig+0x1a8>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8004d54:	d1e0      	bne.n	8004d18 <HAL_RCC_ClockConfig+0x118>
        return HAL_ERROR;
 8004d56:	2001      	movs	r0, #1
 8004d58:	e09b      	b.n	8004e92 <HAL_RCC_ClockConfig+0x292>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d5a:	4b13      	ldr	r3, [pc, #76]	@ (8004da8 <HAL_RCC_ClockConfig+0x1a8>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8004d62:	d1d9      	bne.n	8004d18 <HAL_RCC_ClockConfig+0x118>
        return HAL_ERROR;
 8004d64:	2001      	movs	r0, #1
 8004d66:	e094      	b.n	8004e92 <HAL_RCC_ClockConfig+0x292>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d68:	6823      	ldr	r3, [r4, #0]
 8004d6a:	f013 0f02 	tst.w	r3, #2
 8004d6e:	d020      	beq.n	8004db2 <HAL_RCC_ClockConfig+0x1b2>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004d70:	68e2      	ldr	r2, [r4, #12]
 8004d72:	4b0d      	ldr	r3, [pc, #52]	@ (8004da8 <HAL_RCC_ClockConfig+0x1a8>)
 8004d74:	699b      	ldr	r3, [r3, #24]
 8004d76:	f003 030f 	and.w	r3, r3, #15
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d219      	bcs.n	8004db2 <HAL_RCC_ClockConfig+0x1b2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d7e:	490a      	ldr	r1, [pc, #40]	@ (8004da8 <HAL_RCC_ClockConfig+0x1a8>)
 8004d80:	698b      	ldr	r3, [r1, #24]
 8004d82:	f023 030f 	bic.w	r3, r3, #15
 8004d86:	4313      	orrs	r3, r2
 8004d88:	618b      	str	r3, [r1, #24]
 8004d8a:	e012      	b.n	8004db2 <HAL_RCC_ClockConfig+0x1b2>
    return HAL_ERROR;
 8004d8c:	2001      	movs	r0, #1
}
 8004d8e:	4770      	bx	lr
      return HAL_ERROR;
 8004d90:	2001      	movs	r0, #1
 8004d92:	e07e      	b.n	8004e92 <HAL_RCC_ClockConfig+0x292>
        return HAL_ERROR;
 8004d94:	2001      	movs	r0, #1
 8004d96:	e07c      	b.n	8004e92 <HAL_RCC_ClockConfig+0x292>
      return HAL_ERROR;
 8004d98:	2001      	movs	r0, #1
 8004d9a:	e07a      	b.n	8004e92 <HAL_RCC_ClockConfig+0x292>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d9c:	f013 0f01 	tst.w	r3, #1
 8004da0:	d1a0      	bne.n	8004ce4 <HAL_RCC_ClockConfig+0xe4>
 8004da2:	e7e5      	b.n	8004d70 <HAL_RCC_ClockConfig+0x170>
 8004da4:	52002000 	.word	0x52002000
 8004da8:	58024400 	.word	0x58024400
 8004dac:	f013 0f01 	tst.w	r3, #1
 8004db0:	d198      	bne.n	8004ce4 <HAL_RCC_ClockConfig+0xe4>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004db2:	4b39      	ldr	r3, [pc, #228]	@ (8004e98 <HAL_RCC_ClockConfig+0x298>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 030f 	and.w	r3, r3, #15
 8004dba:	42ab      	cmp	r3, r5
 8004dbc:	d90a      	bls.n	8004dd4 <HAL_RCC_ClockConfig+0x1d4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dbe:	4a36      	ldr	r2, [pc, #216]	@ (8004e98 <HAL_RCC_ClockConfig+0x298>)
 8004dc0:	6813      	ldr	r3, [r2, #0]
 8004dc2:	f023 030f 	bic.w	r3, r3, #15
 8004dc6:	432b      	orrs	r3, r5
 8004dc8:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dca:	6813      	ldr	r3, [r2, #0]
 8004dcc:	f003 030f 	and.w	r3, r3, #15
 8004dd0:	42ab      	cmp	r3, r5
 8004dd2:	d1e1      	bne.n	8004d98 <HAL_RCC_ClockConfig+0x198>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004dd4:	6823      	ldr	r3, [r4, #0]
 8004dd6:	f013 0f04 	tst.w	r3, #4
 8004dda:	d00c      	beq.n	8004df6 <HAL_RCC_ClockConfig+0x1f6>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004ddc:	6922      	ldr	r2, [r4, #16]
 8004dde:	4b2f      	ldr	r3, [pc, #188]	@ (8004e9c <HAL_RCC_ClockConfig+0x29c>)
 8004de0:	699b      	ldr	r3, [r3, #24]
 8004de2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d205      	bcs.n	8004df6 <HAL_RCC_ClockConfig+0x1f6>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004dea:	492c      	ldr	r1, [pc, #176]	@ (8004e9c <HAL_RCC_ClockConfig+0x29c>)
 8004dec:	698b      	ldr	r3, [r1, #24]
 8004dee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004df2:	4313      	orrs	r3, r2
 8004df4:	618b      	str	r3, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004df6:	6823      	ldr	r3, [r4, #0]
 8004df8:	f013 0f08 	tst.w	r3, #8
 8004dfc:	d00c      	beq.n	8004e18 <HAL_RCC_ClockConfig+0x218>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004dfe:	6962      	ldr	r2, [r4, #20]
 8004e00:	4b26      	ldr	r3, [pc, #152]	@ (8004e9c <HAL_RCC_ClockConfig+0x29c>)
 8004e02:	69db      	ldr	r3, [r3, #28]
 8004e04:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d205      	bcs.n	8004e18 <HAL_RCC_ClockConfig+0x218>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004e0c:	4923      	ldr	r1, [pc, #140]	@ (8004e9c <HAL_RCC_ClockConfig+0x29c>)
 8004e0e:	69cb      	ldr	r3, [r1, #28]
 8004e10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e14:	4313      	orrs	r3, r2
 8004e16:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e18:	6823      	ldr	r3, [r4, #0]
 8004e1a:	f013 0f10 	tst.w	r3, #16
 8004e1e:	d00c      	beq.n	8004e3a <HAL_RCC_ClockConfig+0x23a>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004e20:	69a2      	ldr	r2, [r4, #24]
 8004e22:	4b1e      	ldr	r3, [pc, #120]	@ (8004e9c <HAL_RCC_ClockConfig+0x29c>)
 8004e24:	69db      	ldr	r3, [r3, #28]
 8004e26:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d205      	bcs.n	8004e3a <HAL_RCC_ClockConfig+0x23a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004e2e:	491b      	ldr	r1, [pc, #108]	@ (8004e9c <HAL_RCC_ClockConfig+0x29c>)
 8004e30:	69cb      	ldr	r3, [r1, #28]
 8004e32:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004e36:	4313      	orrs	r3, r2
 8004e38:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004e3a:	6823      	ldr	r3, [r4, #0]
 8004e3c:	f013 0f20 	tst.w	r3, #32
 8004e40:	d00c      	beq.n	8004e5c <HAL_RCC_ClockConfig+0x25c>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004e42:	69e2      	ldr	r2, [r4, #28]
 8004e44:	4b15      	ldr	r3, [pc, #84]	@ (8004e9c <HAL_RCC_ClockConfig+0x29c>)
 8004e46:	6a1b      	ldr	r3, [r3, #32]
 8004e48:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d205      	bcs.n	8004e5c <HAL_RCC_ClockConfig+0x25c>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004e50:	4912      	ldr	r1, [pc, #72]	@ (8004e9c <HAL_RCC_ClockConfig+0x29c>)
 8004e52:	6a0b      	ldr	r3, [r1, #32]
 8004e54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	620b      	str	r3, [r1, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004e5c:	f7ff fdd6 	bl	8004a0c <HAL_RCC_GetSysClockFreq>
 8004e60:	490e      	ldr	r1, [pc, #56]	@ (8004e9c <HAL_RCC_ClockConfig+0x29c>)
 8004e62:	698b      	ldr	r3, [r1, #24]
 8004e64:	4a0e      	ldr	r2, [pc, #56]	@ (8004ea0 <HAL_RCC_ClockConfig+0x2a0>)
 8004e66:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8004e6a:	5cd3      	ldrb	r3, [r2, r3]
 8004e6c:	f003 031f 	and.w	r3, r3, #31
 8004e70:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004e72:	698b      	ldr	r3, [r1, #24]
 8004e74:	f003 030f 	and.w	r3, r3, #15
 8004e78:	5cd3      	ldrb	r3, [r2, r3]
 8004e7a:	f003 031f 	and.w	r3, r3, #31
 8004e7e:	fa20 f303 	lsr.w	r3, r0, r3
 8004e82:	4a08      	ldr	r2, [pc, #32]	@ (8004ea4 <HAL_RCC_ClockConfig+0x2a4>)
 8004e84:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8004e86:	4b08      	ldr	r3, [pc, #32]	@ (8004ea8 <HAL_RCC_ClockConfig+0x2a8>)
 8004e88:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 8004e8a:	4b08      	ldr	r3, [pc, #32]	@ (8004eac <HAL_RCC_ClockConfig+0x2ac>)
 8004e8c:	6818      	ldr	r0, [r3, #0]
 8004e8e:	f7fc ff0f 	bl	8001cb0 <HAL_InitTick>
}
 8004e92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e96:	bf00      	nop
 8004e98:	52002000 	.word	0x52002000
 8004e9c:	58024400 	.word	0x58024400
 8004ea0:	08009e70 	.word	0x08009e70
 8004ea4:	20000000 	.word	0x20000000
 8004ea8:	20000004 	.word	0x20000004
 8004eac:	2000000c 	.word	0x2000000c

08004eb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004eb0:	b508      	push	{r3, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004eb2:	f7ff fdab 	bl	8004a0c <HAL_RCC_GetSysClockFreq>
 8004eb6:	4a0b      	ldr	r2, [pc, #44]	@ (8004ee4 <HAL_RCC_GetHCLKFreq+0x34>)
 8004eb8:	6993      	ldr	r3, [r2, #24]
 8004eba:	490b      	ldr	r1, [pc, #44]	@ (8004ee8 <HAL_RCC_GetHCLKFreq+0x38>)
 8004ebc:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8004ec0:	5ccb      	ldrb	r3, [r1, r3]
 8004ec2:	f003 031f 	and.w	r3, r3, #31
 8004ec6:	fa20 f303 	lsr.w	r3, r0, r3
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004eca:	6992      	ldr	r2, [r2, #24]
 8004ecc:	f002 020f 	and.w	r2, r2, #15
 8004ed0:	5c88      	ldrb	r0, [r1, r2]
 8004ed2:	f000 001f 	and.w	r0, r0, #31
 8004ed6:	fa23 f000 	lsr.w	r0, r3, r0
 8004eda:	4a04      	ldr	r2, [pc, #16]	@ (8004eec <HAL_RCC_GetHCLKFreq+0x3c>)
 8004edc:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004ede:	4a04      	ldr	r2, [pc, #16]	@ (8004ef0 <HAL_RCC_GetHCLKFreq+0x40>)
 8004ee0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8004ee2:	bd08      	pop	{r3, pc}
 8004ee4:	58024400 	.word	0x58024400
 8004ee8:	08009e70 	.word	0x08009e70
 8004eec:	20000000 	.word	0x20000000
 8004ef0:	20000004 	.word	0x20000004

08004ef4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ef4:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004ef6:	f7ff ffdb 	bl	8004eb0 <HAL_RCC_GetHCLKFreq>
 8004efa:	4b05      	ldr	r3, [pc, #20]	@ (8004f10 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004efc:	69db      	ldr	r3, [r3, #28]
 8004efe:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004f02:	4a04      	ldr	r2, [pc, #16]	@ (8004f14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f04:	5cd3      	ldrb	r3, [r2, r3]
 8004f06:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004f0a:	40d8      	lsrs	r0, r3
 8004f0c:	bd08      	pop	{r3, pc}
 8004f0e:	bf00      	nop
 8004f10:	58024400 	.word	0x58024400
 8004f14:	08009e70 	.word	0x08009e70

08004f18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f18:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004f1a:	f7ff ffc9 	bl	8004eb0 <HAL_RCC_GetHCLKFreq>
 8004f1e:	4b05      	ldr	r3, [pc, #20]	@ (8004f34 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004f20:	69db      	ldr	r3, [r3, #28]
 8004f22:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004f26:	4a04      	ldr	r2, [pc, #16]	@ (8004f38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f28:	5cd3      	ldrb	r3, [r2, r3]
 8004f2a:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004f2e:	40d8      	lsrs	r0, r3
 8004f30:	bd08      	pop	{r3, pc}
 8004f32:	bf00      	nop
 8004f34:	58024400 	.word	0x58024400
 8004f38:	08009e70 	.word	0x08009e70

08004f3c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004f3e:	4b3e      	ldr	r3, [pc, #248]	@ (8005038 <RCCEx_PLL2_Config+0xfc>)
 8004f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f42:	f003 0303 	and.w	r3, r3, #3
 8004f46:	2b03      	cmp	r3, #3
 8004f48:	d074      	beq.n	8005034 <RCCEx_PLL2_Config+0xf8>
 8004f4a:	4606      	mov	r6, r0
 8004f4c:	460f      	mov	r7, r1


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004f4e:	4a3a      	ldr	r2, [pc, #232]	@ (8005038 <RCCEx_PLL2_Config+0xfc>)
 8004f50:	6813      	ldr	r3, [r2, #0]
 8004f52:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004f56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f58:	f7fc ff0a 	bl	8001d70 <HAL_GetTick>
 8004f5c:	4604      	mov	r4, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004f5e:	4d36      	ldr	r5, [pc, #216]	@ (8005038 <RCCEx_PLL2_Config+0xfc>)
 8004f60:	682b      	ldr	r3, [r5, #0]
 8004f62:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8004f66:	d006      	beq.n	8004f76 <RCCEx_PLL2_Config+0x3a>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004f68:	f7fc ff02 	bl	8001d70 <HAL_GetTick>
 8004f6c:	1b03      	subs	r3, r0, r4
 8004f6e:	2b02      	cmp	r3, #2
 8004f70:	d9f6      	bls.n	8004f60 <RCCEx_PLL2_Config+0x24>
      {
        return HAL_TIMEOUT;
 8004f72:	2003      	movs	r0, #3
 8004f74:	e05f      	b.n	8005036 <RCCEx_PLL2_Config+0xfa>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004f76:	4b30      	ldr	r3, [pc, #192]	@ (8005038 <RCCEx_PLL2_Config+0xfc>)
 8004f78:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004f7a:	6831      	ldr	r1, [r6, #0]
 8004f7c:	f422 327c 	bic.w	r2, r2, #258048	@ 0x3f000
 8004f80:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 8004f84:	629a      	str	r2, [r3, #40]	@ 0x28
 8004f86:	68b2      	ldr	r2, [r6, #8]
 8004f88:	3a01      	subs	r2, #1
 8004f8a:	0252      	lsls	r2, r2, #9
 8004f8c:	b292      	uxth	r2, r2
 8004f8e:	68f1      	ldr	r1, [r6, #12]
 8004f90:	3901      	subs	r1, #1
 8004f92:	0409      	lsls	r1, r1, #16
 8004f94:	f401 01fe 	and.w	r1, r1, #8323072	@ 0x7f0000
 8004f98:	430a      	orrs	r2, r1
 8004f9a:	6871      	ldr	r1, [r6, #4]
 8004f9c:	3901      	subs	r1, #1
 8004f9e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8004fa2:	430a      	orrs	r2, r1
 8004fa4:	6931      	ldr	r1, [r6, #16]
 8004fa6:	3901      	subs	r1, #1
 8004fa8:	0609      	lsls	r1, r1, #24
 8004faa:	f001 41fe 	and.w	r1, r1, #2130706432	@ 0x7f000000
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	639a      	str	r2, [r3, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004fb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fb4:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 8004fb8:	6971      	ldr	r1, [r6, #20]
 8004fba:	430a      	orrs	r2, r1
 8004fbc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004fbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fc0:	f022 0220 	bic.w	r2, r2, #32
 8004fc4:	69b1      	ldr	r1, [r6, #24]
 8004fc6:	430a      	orrs	r2, r1
 8004fc8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004fca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fcc:	f022 0210 	bic.w	r2, r2, #16
 8004fd0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004fd2:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004fd4:	69f1      	ldr	r1, [r6, #28]
 8004fd6:	4a19      	ldr	r2, [pc, #100]	@ (800503c <RCCEx_PLL2_Config+0x100>)
 8004fd8:	4002      	ands	r2, r0
 8004fda:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8004fde:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004fe0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fe2:	f042 0210 	orr.w	r2, r2, #16
 8004fe6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004fe8:	b9c7      	cbnz	r7, 800501c <RCCEx_PLL2_Config+0xe0>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004fea:	461a      	mov	r2, r3
 8004fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fee:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004ff2:	62d3      	str	r3, [r2, #44]	@ 0x2c
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004ff4:	4a10      	ldr	r2, [pc, #64]	@ (8005038 <RCCEx_PLL2_Config+0xfc>)
 8004ff6:	6813      	ldr	r3, [r2, #0]
 8004ff8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004ffc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ffe:	f7fc feb7 	bl	8001d70 <HAL_GetTick>
 8005002:	4604      	mov	r4, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005004:	4d0c      	ldr	r5, [pc, #48]	@ (8005038 <RCCEx_PLL2_Config+0xfc>)
 8005006:	682b      	ldr	r3, [r5, #0]
 8005008:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 800500c:	d110      	bne.n	8005030 <RCCEx_PLL2_Config+0xf4>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800500e:	f7fc feaf 	bl	8001d70 <HAL_GetTick>
 8005012:	1b00      	subs	r0, r0, r4
 8005014:	2802      	cmp	r0, #2
 8005016:	d9f6      	bls.n	8005006 <RCCEx_PLL2_Config+0xca>
      {
        return HAL_TIMEOUT;
 8005018:	2003      	movs	r0, #3
 800501a:	e00c      	b.n	8005036 <RCCEx_PLL2_Config+0xfa>
    else if (Divider == DIVIDER_Q_UPDATE)
 800501c:	2f01      	cmp	r7, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800501e:	4a06      	ldr	r2, [pc, #24]	@ (8005038 <RCCEx_PLL2_Config+0xfc>)
 8005020:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8005022:	bf0c      	ite	eq
 8005024:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005028:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 800502c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800502e:	e7e1      	b.n	8004ff4 <RCCEx_PLL2_Config+0xb8>
    }

  }


  return status;
 8005030:	2000      	movs	r0, #0
 8005032:	e000      	b.n	8005036 <RCCEx_PLL2_Config+0xfa>
    return HAL_ERROR;
 8005034:	2001      	movs	r0, #1
}
 8005036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005038:	58024400 	.word	0x58024400
 800503c:	ffff0007 	.word	0xffff0007

08005040 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005042:	4b3e      	ldr	r3, [pc, #248]	@ (800513c <RCCEx_PLL3_Config+0xfc>)
 8005044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005046:	f003 0303 	and.w	r3, r3, #3
 800504a:	2b03      	cmp	r3, #3
 800504c:	d074      	beq.n	8005138 <RCCEx_PLL3_Config+0xf8>
 800504e:	4606      	mov	r6, r0
 8005050:	460f      	mov	r7, r1


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005052:	4a3a      	ldr	r2, [pc, #232]	@ (800513c <RCCEx_PLL3_Config+0xfc>)
 8005054:	6813      	ldr	r3, [r2, #0]
 8005056:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800505a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800505c:	f7fc fe88 	bl	8001d70 <HAL_GetTick>
 8005060:	4604      	mov	r4, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005062:	4d36      	ldr	r5, [pc, #216]	@ (800513c <RCCEx_PLL3_Config+0xfc>)
 8005064:	682b      	ldr	r3, [r5, #0]
 8005066:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 800506a:	d006      	beq.n	800507a <RCCEx_PLL3_Config+0x3a>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800506c:	f7fc fe80 	bl	8001d70 <HAL_GetTick>
 8005070:	1b03      	subs	r3, r0, r4
 8005072:	2b02      	cmp	r3, #2
 8005074:	d9f6      	bls.n	8005064 <RCCEx_PLL3_Config+0x24>
      {
        return HAL_TIMEOUT;
 8005076:	2003      	movs	r0, #3
 8005078:	e05f      	b.n	800513a <RCCEx_PLL3_Config+0xfa>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800507a:	4b30      	ldr	r3, [pc, #192]	@ (800513c <RCCEx_PLL3_Config+0xfc>)
 800507c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800507e:	6831      	ldr	r1, [r6, #0]
 8005080:	f022 727c 	bic.w	r2, r2, #66060288	@ 0x3f00000
 8005084:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8005088:	629a      	str	r2, [r3, #40]	@ 0x28
 800508a:	68b2      	ldr	r2, [r6, #8]
 800508c:	3a01      	subs	r2, #1
 800508e:	0252      	lsls	r2, r2, #9
 8005090:	b292      	uxth	r2, r2
 8005092:	68f1      	ldr	r1, [r6, #12]
 8005094:	3901      	subs	r1, #1
 8005096:	0409      	lsls	r1, r1, #16
 8005098:	f401 01fe 	and.w	r1, r1, #8323072	@ 0x7f0000
 800509c:	430a      	orrs	r2, r1
 800509e:	6871      	ldr	r1, [r6, #4]
 80050a0:	3901      	subs	r1, #1
 80050a2:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80050a6:	430a      	orrs	r2, r1
 80050a8:	6931      	ldr	r1, [r6, #16]
 80050aa:	3901      	subs	r1, #1
 80050ac:	0609      	lsls	r1, r1, #24
 80050ae:	f001 41fe 	and.w	r1, r1, #2130706432	@ 0x7f000000
 80050b2:	430a      	orrs	r2, r1
 80050b4:	641a      	str	r2, [r3, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80050b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050b8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80050bc:	6971      	ldr	r1, [r6, #20]
 80050be:	430a      	orrs	r2, r1
 80050c0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80050c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050c4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80050c8:	69b1      	ldr	r1, [r6, #24]
 80050ca:	430a      	orrs	r2, r1
 80050cc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80050ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80050d4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80050d6:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80050d8:	69f1      	ldr	r1, [r6, #28]
 80050da:	4a19      	ldr	r2, [pc, #100]	@ (8005140 <RCCEx_PLL3_Config+0x100>)
 80050dc:	4002      	ands	r2, r0
 80050de:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80050e2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80050e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80050ea:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80050ec:	b9c7      	cbnz	r7, 8005120 <RCCEx_PLL3_Config+0xe0>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80050ee:	461a      	mov	r2, r3
 80050f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050f2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80050f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80050f8:	4a10      	ldr	r2, [pc, #64]	@ (800513c <RCCEx_PLL3_Config+0xfc>)
 80050fa:	6813      	ldr	r3, [r2, #0]
 80050fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005100:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005102:	f7fc fe35 	bl	8001d70 <HAL_GetTick>
 8005106:	4604      	mov	r4, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005108:	4d0c      	ldr	r5, [pc, #48]	@ (800513c <RCCEx_PLL3_Config+0xfc>)
 800510a:	682b      	ldr	r3, [r5, #0]
 800510c:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 8005110:	d110      	bne.n	8005134 <RCCEx_PLL3_Config+0xf4>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005112:	f7fc fe2d 	bl	8001d70 <HAL_GetTick>
 8005116:	1b00      	subs	r0, r0, r4
 8005118:	2802      	cmp	r0, #2
 800511a:	d9f6      	bls.n	800510a <RCCEx_PLL3_Config+0xca>
      {
        return HAL_TIMEOUT;
 800511c:	2003      	movs	r0, #3
 800511e:	e00c      	b.n	800513a <RCCEx_PLL3_Config+0xfa>
    else if (Divider == DIVIDER_Q_UPDATE)
 8005120:	2f01      	cmp	r7, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005122:	4a06      	ldr	r2, [pc, #24]	@ (800513c <RCCEx_PLL3_Config+0xfc>)
 8005124:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8005126:	bf0c      	ite	eq
 8005128:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800512c:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 8005130:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005132:	e7e1      	b.n	80050f8 <RCCEx_PLL3_Config+0xb8>
    }

  }


  return status;
 8005134:	2000      	movs	r0, #0
 8005136:	e000      	b.n	800513a <RCCEx_PLL3_Config+0xfa>
    return HAL_ERROR;
 8005138:	2001      	movs	r0, #1
}
 800513a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800513c:	58024400 	.word	0x58024400
 8005140:	ffff0007 	.word	0xffff0007

08005144 <HAL_RCCEx_PeriphCLKConfig>:
{
 8005144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005148:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800514a:	6803      	ldr	r3, [r0, #0]
 800514c:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8005150:	d02b      	beq.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x66>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8005152:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8005154:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005158:	d021      	beq.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x5a>
 800515a:	d80c      	bhi.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800515c:	b1cb      	cbz	r3, 8005192 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800515e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005162:	d106      	bne.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x2e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005164:	2102      	movs	r1, #2
 8005166:	3008      	adds	r0, #8
 8005168:	f7ff fee8 	bl	8004f3c <RCCEx_PLL2_Config>
 800516c:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 800516e:	b9ee      	cbnz	r6, 80051ac <HAL_RCCEx_PeriphCLKConfig+0x68>
 8005170:	e004      	b.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x38>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8005172:	2601      	movs	r6, #1
 8005174:	e01a      	b.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x68>
 8005176:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800517a:	d108      	bne.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x4a>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800517c:	4a99      	ldr	r2, [pc, #612]	@ (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800517e:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8005180:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005184:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8005186:	430b      	orrs	r3, r1
 8005188:	6513      	str	r3, [r2, #80]	@ 0x50
 800518a:	2600      	movs	r6, #0
 800518c:	e00e      	b.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x68>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800518e:	2601      	movs	r6, #1
 8005190:	e00c      	b.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x68>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005192:	4a94      	ldr	r2, [pc, #592]	@ (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8005194:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8005196:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800519a:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800519c:	e7ee      	b.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x38>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800519e:	2102      	movs	r1, #2
 80051a0:	3028      	adds	r0, #40	@ 0x28
 80051a2:	f7ff ff4d 	bl	8005040 <RCCEx_PLL3_Config>
 80051a6:	4606      	mov	r6, r0
        break;
 80051a8:	e7e1      	b.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x2a>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80051aa:	2600      	movs	r6, #0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80051ac:	6823      	ldr	r3, [r4, #0]
 80051ae:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80051b2:	d026      	beq.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0xbe>
    switch (PeriphClkInit->Sai1ClockSelection)
 80051b4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80051b6:	2b04      	cmp	r3, #4
 80051b8:	d836      	bhi.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 80051ba:	e8df f003 	tbb	[pc, r3]
 80051be:	0a03      	.short	0x0a03
 80051c0:	1811      	.short	0x1811
 80051c2:	18          	.byte	0x18
 80051c3:	00          	.byte	0x00
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051c4:	4a87      	ldr	r2, [pc, #540]	@ (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80051c6:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80051c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 80051ce:	4635      	mov	r5, r6
 80051d0:	e00e      	b.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0xac>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80051d2:	2100      	movs	r1, #0
 80051d4:	f104 0008 	add.w	r0, r4, #8
 80051d8:	f7ff feb0 	bl	8004f3c <RCCEx_PLL2_Config>
 80051dc:	4605      	mov	r5, r0
        break;
 80051de:	e007      	b.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0xac>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80051e0:	2100      	movs	r1, #0
 80051e2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80051e6:	f7ff ff2b 	bl	8005040 <RCCEx_PLL3_Config>
 80051ea:	4605      	mov	r5, r0
        break;
 80051ec:	e000      	b.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0xac>
    switch (PeriphClkInit->Sai1ClockSelection)
 80051ee:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 80051f0:	b9ed      	cbnz	r5, 800522e <HAL_RCCEx_PeriphCLKConfig+0xea>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80051f2:	4a7c      	ldr	r2, [pc, #496]	@ (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80051f4:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80051f6:	f023 0307 	bic.w	r3, r3, #7
 80051fa:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 80051fc:	430b      	orrs	r3, r1
 80051fe:	6513      	str	r3, [r2, #80]	@ 0x50
 8005200:	e000      	b.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8005202:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005204:	6823      	ldr	r3, [r4, #0]
 8005206:	f413 7f00 	tst.w	r3, #512	@ 0x200
 800520a:	d022      	beq.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    switch (PeriphClkInit->Sai23ClockSelection)
 800520c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800520e:	2b80      	cmp	r3, #128	@ 0x80
 8005210:	d03d      	beq.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8005212:	d811      	bhi.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005214:	b3ab      	cbz	r3, 8005282 <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8005216:	2b40      	cmp	r3, #64	@ 0x40
 8005218:	d10b      	bne.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0xee>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800521a:	2100      	movs	r1, #0
 800521c:	f104 0008 	add.w	r0, r4, #8
 8005220:	f7ff fe8c 	bl	8004f3c <RCCEx_PLL2_Config>
 8005224:	4605      	mov	r5, r0
        break;
 8005226:	e00c      	b.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    switch (PeriphClkInit->Sai1ClockSelection)
 8005228:	2601      	movs	r6, #1
 800522a:	4635      	mov	r5, r6
 800522c:	e7ea      	b.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 800522e:	462e      	mov	r6, r5
 8005230:	e7e8      	b.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    switch (PeriphClkInit->Sai23ClockSelection)
 8005232:	2601      	movs	r6, #1
 8005234:	4635      	mov	r5, r6
 8005236:	e00c      	b.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x10e>
 8005238:	2bc0      	cmp	r3, #192	@ 0xc0
 800523a:	d002      	beq.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800523c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005240:	d11c      	bne.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x138>
    if (ret == HAL_OK)
 8005242:	bb5d      	cbnz	r5, 800529c <HAL_RCCEx_PeriphCLKConfig+0x158>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005244:	4a67      	ldr	r2, [pc, #412]	@ (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8005246:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8005248:	f423 73e0 	bic.w	r3, r3, #448	@ 0x1c0
 800524c:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 800524e:	430b      	orrs	r3, r1
 8005250:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005252:	6823      	ldr	r3, [r4, #0]
 8005254:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8005258:	d046      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    switch (PeriphClkInit->Sai4AClockSelection)
 800525a:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
 800525e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005262:	d039      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x194>
 8005264:	d81f      	bhi.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x162>
 8005266:	b38b      	cbz	r3, 80052cc <HAL_RCCEx_PeriphCLKConfig+0x188>
 8005268:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800526c:	d118      	bne.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800526e:	2100      	movs	r1, #0
 8005270:	f104 0008 	add.w	r0, r4, #8
 8005274:	f7ff fe62 	bl	8004f3c <RCCEx_PLL2_Config>
 8005278:	4605      	mov	r5, r0
        break;
 800527a:	e01a      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    switch (PeriphClkInit->Sai23ClockSelection)
 800527c:	2601      	movs	r6, #1
 800527e:	4635      	mov	r5, r6
 8005280:	e7e7      	b.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x10e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005282:	4a58      	ldr	r2, [pc, #352]	@ (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8005284:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8005286:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800528a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800528c:	e7d9      	b.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800528e:	2100      	movs	r1, #0
 8005290:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005294:	f7ff fed4 	bl	8005040 <RCCEx_PLL3_Config>
 8005298:	4605      	mov	r5, r0
        break;
 800529a:	e7d2      	b.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800529c:	462e      	mov	r6, r5
 800529e:	e7d8      	b.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    switch (PeriphClkInit->Sai4AClockSelection)
 80052a0:	2601      	movs	r6, #1
 80052a2:	4635      	mov	r5, r6
 80052a4:	e020      	b.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80052a6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80052aa:	d002      	beq.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80052ac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80052b0:	d109      	bne.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x182>
    if (ret == HAL_OK)
 80052b2:	b9c5      	cbnz	r5, 80052e6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80052b4:	4a4b      	ldr	r2, [pc, #300]	@ (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80052b6:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80052b8:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 80052bc:	f8d4 10a8 	ldr.w	r1, [r4, #168]	@ 0xa8
 80052c0:	430b      	orrs	r3, r1
 80052c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80052c4:	e010      	b.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    switch (PeriphClkInit->Sai4AClockSelection)
 80052c6:	2601      	movs	r6, #1
 80052c8:	4635      	mov	r5, r6
 80052ca:	e00d      	b.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052cc:	4a45      	ldr	r2, [pc, #276]	@ (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80052ce:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80052d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 80052d6:	e7ec      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80052d8:	2100      	movs	r1, #0
 80052da:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80052de:	f7ff feaf 	bl	8005040 <RCCEx_PLL3_Config>
 80052e2:	4605      	mov	r5, r0
        break;
 80052e4:	e7e5      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80052e6:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80052e8:	6823      	ldr	r3, [r4, #0]
 80052ea:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 80052ee:	d024      	beq.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    switch (PeriphClkInit->Sai4BClockSelection)
 80052f0:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
 80052f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80052f8:	d042      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x23c>
 80052fa:	d80e      	bhi.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d039      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005300:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005304:	d106      	bne.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005306:	2100      	movs	r1, #0
 8005308:	f104 0008 	add.w	r0, r4, #8
 800530c:	f7ff fe16 	bl	8004f3c <RCCEx_PLL2_Config>
 8005310:	4605      	mov	r5, r0
        break;
 8005312:	e008      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    switch (PeriphClkInit->Sai4BClockSelection)
 8005314:	2601      	movs	r6, #1
 8005316:	4635      	mov	r5, r6
 8005318:	e00f      	b.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800531a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800531e:	d002      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005320:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005324:	d123      	bne.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    if (ret == HAL_OK)
 8005326:	2d00      	cmp	r5, #0
 8005328:	d131      	bne.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x24a>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800532a:	4a2e      	ldr	r2, [pc, #184]	@ (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800532c:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800532e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8005332:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
 8005336:	430b      	orrs	r3, r1
 8005338:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800533a:	6823      	ldr	r3, [r4, #0]
 800533c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8005340:	d02e      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x25c>
    switch (PeriphClkInit->QspiClockSelection)
 8005342:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8005344:	2b20      	cmp	r3, #32
 8005346:	d040      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005348:	d826      	bhi.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800534a:	b133      	cbz	r3, 800535a <HAL_RCCEx_PeriphCLKConfig+0x216>
 800534c:	2b10      	cmp	r3, #16
 800534e:	d120      	bne.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x24e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005350:	4a24      	ldr	r2, [pc, #144]	@ (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8005352:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8005354:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005358:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800535a:	2d00      	cmp	r5, #0
 800535c:	d13c      	bne.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x294>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800535e:	4a21      	ldr	r2, [pc, #132]	@ (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8005360:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8005362:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8005366:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8005368:	430b      	orrs	r3, r1
 800536a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800536c:	e018      	b.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x25c>
    switch (PeriphClkInit->Sai4BClockSelection)
 800536e:	2601      	movs	r6, #1
 8005370:	4635      	mov	r5, r6
 8005372:	e7e2      	b.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005374:	4a1b      	ldr	r2, [pc, #108]	@ (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8005376:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8005378:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800537c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800537e:	e7d2      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005380:	2100      	movs	r1, #0
 8005382:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005386:	f7ff fe5b 	bl	8005040 <RCCEx_PLL3_Config>
 800538a:	4605      	mov	r5, r0
        break;
 800538c:	e7cb      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800538e:	462e      	mov	r6, r5
 8005390:	e7d3      	b.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    switch (PeriphClkInit->QspiClockSelection)
 8005392:	2601      	movs	r6, #1
 8005394:	4635      	mov	r5, r6
 8005396:	e003      	b.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x25c>
 8005398:	2b30      	cmp	r3, #48	@ 0x30
 800539a:	d0de      	beq.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x216>
 800539c:	2601      	movs	r6, #1
 800539e:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80053a0:	6823      	ldr	r3, [r4, #0]
 80053a2:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 80053a6:	d02e      	beq.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    switch (PeriphClkInit->Spi123ClockSelection)
 80053a8:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80053aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053ae:	d050      	beq.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x30e>
 80053b0:	d81a      	bhi.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d047      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x302>
 80053b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053ba:	d10f      	bne.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x298>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053bc:	2100      	movs	r1, #0
 80053be:	f104 0008 	add.w	r0, r4, #8
 80053c2:	f7ff fdbb 	bl	8004f3c <RCCEx_PLL2_Config>
 80053c6:	4605      	mov	r5, r0
        break;
 80053c8:	e014      	b.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80053ca:	2102      	movs	r1, #2
 80053cc:	f104 0008 	add.w	r0, r4, #8
 80053d0:	f7ff fdb4 	bl	8004f3c <RCCEx_PLL2_Config>
 80053d4:	4605      	mov	r5, r0
        break;
 80053d6:	e7c0      	b.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x216>
 80053d8:	462e      	mov	r6, r5
 80053da:	e7e1      	b.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x25c>
    switch (PeriphClkInit->Spi123ClockSelection)
 80053dc:	2601      	movs	r6, #1
 80053de:	4635      	mov	r5, r6
 80053e0:	e011      	b.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80053e2:	bf00      	nop
 80053e4:	58024400 	.word	0x58024400
 80053e8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80053ec:	d002      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80053ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80053f2:	d125      	bne.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    if (ret == HAL_OK)
 80053f4:	2d00      	cmp	r5, #0
 80053f6:	d133      	bne.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80053f8:	4a82      	ldr	r2, [pc, #520]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x4c0>)
 80053fa:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80053fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005400:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8005402:	430b      	orrs	r3, r1
 8005404:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005406:	6823      	ldr	r3, [r4, #0]
 8005408:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 800540c:	d037      	beq.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x33a>
    switch (PeriphClkInit->Spi45ClockSelection)
 800540e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005410:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005414:	d052      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x378>
 8005416:	d828      	bhi.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x326>
 8005418:	b143      	cbz	r3, 800542c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 800541a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800541e:	d121      	bne.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x320>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005420:	2101      	movs	r1, #1
 8005422:	f104 0008 	add.w	r0, r4, #8
 8005426:	f7ff fd89 	bl	8004f3c <RCCEx_PLL2_Config>
 800542a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800542c:	2d00      	cmp	r5, #0
 800542e:	d14c      	bne.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x386>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005430:	4a74      	ldr	r2, [pc, #464]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x4c0>)
 8005432:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8005434:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8005438:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 800543a:	430b      	orrs	r3, r1
 800543c:	6513      	str	r3, [r2, #80]	@ 0x50
 800543e:	e01e      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x33a>
    switch (PeriphClkInit->Spi123ClockSelection)
 8005440:	2601      	movs	r6, #1
 8005442:	4635      	mov	r5, r6
 8005444:	e7df      	b.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005446:	4a6f      	ldr	r2, [pc, #444]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x4c0>)
 8005448:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800544a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800544e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 8005450:	e7d0      	b.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005452:	2100      	movs	r1, #0
 8005454:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005458:	f7ff fdf2 	bl	8005040 <RCCEx_PLL3_Config>
 800545c:	4605      	mov	r5, r0
        break;
 800545e:	e7c9      	b.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005460:	462e      	mov	r6, r5
 8005462:	e7d0      	b.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    switch (PeriphClkInit->Spi45ClockSelection)
 8005464:	2601      	movs	r6, #1
 8005466:	4635      	mov	r5, r6
 8005468:	e009      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800546a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800546e:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8005472:	d0db      	beq.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8005474:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005478:	d0d8      	beq.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 800547a:	2601      	movs	r6, #1
 800547c:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800547e:	6823      	ldr	r3, [r4, #0]
 8005480:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8005484:	d030      	beq.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    switch (PeriphClkInit->Spi6ClockSelection)
 8005486:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
 800548a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800548e:	d044      	beq.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x3d6>
 8005490:	d820      	bhi.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x390>
 8005492:	b143      	cbz	r3, 80054a6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8005494:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005498:	d119      	bne.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x38a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800549a:	2101      	movs	r1, #1
 800549c:	f104 0008 	add.w	r0, r4, #8
 80054a0:	f7ff fd4c 	bl	8004f3c <RCCEx_PLL2_Config>
 80054a4:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80054a6:	2d00      	cmp	r5, #0
 80054a8:	d13e      	bne.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80054aa:	4a56      	ldr	r2, [pc, #344]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x4c0>)
 80054ac:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80054ae:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 80054b2:	f8d4 10b0 	ldr.w	r1, [r4, #176]	@ 0xb0
 80054b6:	430b      	orrs	r3, r1
 80054b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80054ba:	e015      	b.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80054bc:	2101      	movs	r1, #1
 80054be:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80054c2:	f7ff fdbd 	bl	8005040 <RCCEx_PLL3_Config>
 80054c6:	4605      	mov	r5, r0
        break;
 80054c8:	e7b0      	b.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 80054ca:	462e      	mov	r6, r5
 80054cc:	e7d7      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x33a>
    switch (PeriphClkInit->Spi6ClockSelection)
 80054ce:	2601      	movs	r6, #1
 80054d0:	4635      	mov	r5, r6
 80054d2:	e009      	b.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80054d4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80054d8:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80054dc:	d0e3      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80054de:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80054e2:	d0e0      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80054e4:	2601      	movs	r6, #1
 80054e6:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80054e8:	6823      	ldr	r3, [r4, #0]
 80054ea:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 80054ee:	d009      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
    switch (PeriphClkInit->FdcanClockSelection)
 80054f0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80054f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80054f6:	d019      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80054f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80054fc:	d024      	beq.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80054fe:	b1d3      	cbz	r3, 8005536 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8005500:	2601      	movs	r6, #1
 8005502:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005504:	6823      	ldr	r3, [r4, #0]
 8005506:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 800550a:	d033      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x430>
    switch (PeriphClkInit->FmcClockSelection)
 800550c:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800550e:	2b03      	cmp	r3, #3
 8005510:	d85b      	bhi.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x486>
 8005512:	e8df f003 	tbb	[pc, r3]
 8005516:	2227      	.short	0x2227
 8005518:	2753      	.short	0x2753
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800551a:	2101      	movs	r1, #1
 800551c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005520:	f7ff fd8e 	bl	8005040 <RCCEx_PLL3_Config>
 8005524:	4605      	mov	r5, r0
        break;
 8005526:	e7be      	b.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8005528:	462e      	mov	r6, r5
 800552a:	e7dd      	b.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800552c:	4a35      	ldr	r2, [pc, #212]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x4c0>)
 800552e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8005530:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005534:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 8005536:	b975      	cbnz	r5, 8005556 <HAL_RCCEx_PeriphCLKConfig+0x412>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005538:	4a32      	ldr	r2, [pc, #200]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x4c0>)
 800553a:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800553c:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8005540:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8005542:	430b      	orrs	r3, r1
 8005544:	6513      	str	r3, [r2, #80]	@ 0x50
 8005546:	e7dd      	b.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005548:	2101      	movs	r1, #1
 800554a:	f104 0008 	add.w	r0, r4, #8
 800554e:	f7ff fcf5 	bl	8004f3c <RCCEx_PLL2_Config>
 8005552:	4605      	mov	r5, r0
        break;
 8005554:	e7ef      	b.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8005556:	462e      	mov	r6, r5
 8005558:	e7d4      	b.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800555a:	4a2a      	ldr	r2, [pc, #168]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x4c0>)
 800555c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800555e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005562:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 8005564:	bba5      	cbnz	r5, 80055d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005566:	4a27      	ldr	r2, [pc, #156]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x4c0>)
 8005568:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800556a:	f023 0303 	bic.w	r3, r3, #3
 800556e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005570:	430b      	orrs	r3, r1
 8005572:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005574:	6823      	ldr	r3, [r4, #0]
 8005576:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800557a:	d12b      	bne.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x490>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800557c:	6823      	ldr	r3, [r4, #0]
 800557e:	f013 0f01 	tst.w	r3, #1
 8005582:	f000 80ac 	beq.w	80056de <HAL_RCCEx_PeriphCLKConfig+0x59a>
    switch (PeriphClkInit->Usart16ClockSelection)
 8005586:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 8005588:	2b28      	cmp	r3, #40	@ 0x28
 800558a:	f200 80a6 	bhi.w	80056da <HAL_RCCEx_PeriphCLKConfig+0x596>
 800558e:	e8df f003 	tbb	[pc, r3]
 8005592:	a494      	.short	0xa494
 8005594:	a4a4a4a4 	.word	0xa4a4a4a4
 8005598:	a48ea4a4 	.word	0xa48ea4a4
 800559c:	a4a4a4a4 	.word	0xa4a4a4a4
 80055a0:	a49da4a4 	.word	0xa49da4a4
 80055a4:	a4a4a4a4 	.word	0xa4a4a4a4
 80055a8:	a494a4a4 	.word	0xa494a4a4
 80055ac:	a4a4a4a4 	.word	0xa4a4a4a4
 80055b0:	a494a4a4 	.word	0xa494a4a4
 80055b4:	a4a4a4a4 	.word	0xa4a4a4a4
 80055b8:	a4a4      	.short	0xa4a4
 80055ba:	94          	.byte	0x94
 80055bb:	00          	.byte	0x00
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80055bc:	2102      	movs	r1, #2
 80055be:	f104 0008 	add.w	r0, r4, #8
 80055c2:	f7ff fcbb 	bl	8004f3c <RCCEx_PLL2_Config>
 80055c6:	4605      	mov	r5, r0
        break;
 80055c8:	e7cc      	b.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x420>
    switch (PeriphClkInit->FmcClockSelection)
 80055ca:	2601      	movs	r6, #1
 80055cc:	4635      	mov	r5, r6
 80055ce:	e7d1      	b.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x430>
 80055d0:	462e      	mov	r6, r5
 80055d2:	e7cf      	b.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x430>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80055d4:	4a0c      	ldr	r2, [pc, #48]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x4c4>)
 80055d6:	6813      	ldr	r3, [r2, #0]
 80055d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055dc:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80055de:	f7fc fbc7 	bl	8001d70 <HAL_GetTick>
 80055e2:	4607      	mov	r7, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055e4:	f8df 8020 	ldr.w	r8, [pc, #32]	@ 8005608 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 80055e8:	f8d8 3000 	ldr.w	r3, [r8]
 80055ec:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80055f0:	d10c      	bne.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x4c8>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055f2:	f7fc fbbd 	bl	8001d70 <HAL_GetTick>
 80055f6:	1bc0      	subs	r0, r0, r7
 80055f8:	2864      	cmp	r0, #100	@ 0x64
 80055fa:	d9f5      	bls.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
        ret = HAL_TIMEOUT;
 80055fc:	2603      	movs	r6, #3
 80055fe:	4635      	mov	r5, r6
 8005600:	e7bc      	b.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x438>
 8005602:	bf00      	nop
 8005604:	58024400 	.word	0x58024400
 8005608:	58024800 	.word	0x58024800
    if (ret == HAL_OK)
 800560c:	2d00      	cmp	r5, #0
 800560e:	d14c      	bne.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x566>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005610:	4ba2      	ldr	r3, [pc, #648]	@ (800589c <HAL_RCCEx_PeriphCLKConfig+0x758>)
 8005612:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005614:	f8d4 20b4 	ldr.w	r2, [r4, #180]	@ 0xb4
 8005618:	4053      	eors	r3, r2
 800561a:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800561e:	d00c      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005620:	4b9e      	ldr	r3, [pc, #632]	@ (800589c <HAL_RCCEx_PeriphCLKConfig+0x758>)
 8005622:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005624:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8005628:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800562a:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 800562e:	6719      	str	r1, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005630:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005632:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8005636:	6719      	str	r1, [r3, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 8005638:	671a      	str	r2, [r3, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800563a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 800563e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005642:	d014      	beq.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x52a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005644:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8005648:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800564c:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8005650:	d021      	beq.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x552>
 8005652:	4a92      	ldr	r2, [pc, #584]	@ (800589c <HAL_RCCEx_PeriphCLKConfig+0x758>)
 8005654:	6913      	ldr	r3, [r2, #16]
 8005656:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800565a:	6113      	str	r3, [r2, #16]
 800565c:	4a8f      	ldr	r2, [pc, #572]	@ (800589c <HAL_RCCEx_PeriphCLKConfig+0x758>)
 800565e:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8005660:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8005664:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005668:	430b      	orrs	r3, r1
 800566a:	6713      	str	r3, [r2, #112]	@ 0x70
 800566c:	e786      	b.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x438>
        tickstart = HAL_GetTick();
 800566e:	f7fc fb7f 	bl	8001d70 <HAL_GetTick>
 8005672:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005674:	f8df 8224 	ldr.w	r8, [pc, #548]	@ 800589c <HAL_RCCEx_PeriphCLKConfig+0x758>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005678:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800567c:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8005680:	f013 0f02 	tst.w	r3, #2
 8005684:	d1de      	bne.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x500>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005686:	f7fc fb73 	bl	8001d70 <HAL_GetTick>
 800568a:	1bc0      	subs	r0, r0, r7
 800568c:	4548      	cmp	r0, r9
 800568e:	d9f5      	bls.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x538>
            ret = HAL_TIMEOUT;
 8005690:	2603      	movs	r6, #3
 8005692:	4635      	mov	r5, r6
 8005694:	e772      	b.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x438>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005696:	4881      	ldr	r0, [pc, #516]	@ (800589c <HAL_RCCEx_PeriphCLKConfig+0x758>)
 8005698:	6901      	ldr	r1, [r0, #16]
 800569a:	4a81      	ldr	r2, [pc, #516]	@ (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x75c>)
 800569c:	ea02 1313 	and.w	r3, r2, r3, lsr #4
 80056a0:	f421 527c 	bic.w	r2, r1, #16128	@ 0x3f00
 80056a4:	4313      	orrs	r3, r2
 80056a6:	6103      	str	r3, [r0, #16]
 80056a8:	e7d8      	b.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x518>
 80056aa:	462e      	mov	r6, r5
 80056ac:	e766      	b.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x438>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80056ae:	2101      	movs	r1, #1
 80056b0:	f104 0008 	add.w	r0, r4, #8
 80056b4:	f7ff fc42 	bl	8004f3c <RCCEx_PLL2_Config>
 80056b8:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80056ba:	b9e5      	cbnz	r5, 80056f6 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80056bc:	4a77      	ldr	r2, [pc, #476]	@ (800589c <HAL_RCCEx_PeriphCLKConfig+0x758>)
 80056be:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80056c0:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 80056c4:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 80056c6:	430b      	orrs	r3, r1
 80056c8:	6553      	str	r3, [r2, #84]	@ 0x54
 80056ca:	e008      	b.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x59a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80056cc:	2101      	movs	r1, #1
 80056ce:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80056d2:	f7ff fcb5 	bl	8005040 <RCCEx_PLL3_Config>
 80056d6:	4605      	mov	r5, r0
        break;
 80056d8:	e7ef      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x576>
    switch (PeriphClkInit->Usart16ClockSelection)
 80056da:	2601      	movs	r6, #1
 80056dc:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80056de:	6823      	ldr	r3, [r4, #0]
 80056e0:	f013 0f02 	tst.w	r3, #2
 80056e4:	d017      	beq.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
    switch (PeriphClkInit->Usart234578ClockSelection)
 80056e6:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80056e8:	2b05      	cmp	r3, #5
 80056ea:	d828      	bhi.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x5fa>
 80056ec:	e8df f003 	tbb	[pc, r3]
 80056f0:	0b20050b 	.word	0x0b20050b
 80056f4:	0b0b      	.short	0x0b0b
 80056f6:	462e      	mov	r6, r5
 80056f8:	e7f1      	b.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x59a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80056fa:	2101      	movs	r1, #1
 80056fc:	f104 0008 	add.w	r0, r4, #8
 8005700:	f7ff fc1c 	bl	8004f3c <RCCEx_PLL2_Config>
 8005704:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005706:	b9ed      	cbnz	r5, 8005744 <HAL_RCCEx_PeriphCLKConfig+0x600>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005708:	4a64      	ldr	r2, [pc, #400]	@ (800589c <HAL_RCCEx_PeriphCLKConfig+0x758>)
 800570a:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800570c:	f023 0307 	bic.w	r3, r3, #7
 8005710:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8005712:	430b      	orrs	r3, r1
 8005714:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005716:	6823      	ldr	r3, [r4, #0]
 8005718:	f013 0f04 	tst.w	r3, #4
 800571c:	d023      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x622>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800571e:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
 8005722:	2b05      	cmp	r3, #5
 8005724:	d845      	bhi.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005726:	e8df f003 	tbb	[pc, r3]
 800572a:	0f15      	.short	0x0f15
 800572c:	1515153d 	.word	0x1515153d
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005730:	2101      	movs	r1, #1
 8005732:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005736:	f7ff fc83 	bl	8005040 <RCCEx_PLL3_Config>
 800573a:	4605      	mov	r5, r0
        break;
 800573c:	e7e3      	b.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800573e:	2601      	movs	r6, #1
 8005740:	4635      	mov	r5, r6
 8005742:	e7e8      	b.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 8005744:	462e      	mov	r6, r5
 8005746:	e7e6      	b.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005748:	2101      	movs	r1, #1
 800574a:	f104 0008 	add.w	r0, r4, #8
 800574e:	f7ff fbf5 	bl	8004f3c <RCCEx_PLL2_Config>
 8005752:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005754:	bb85      	cbnz	r5, 80057b8 <HAL_RCCEx_PeriphCLKConfig+0x674>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005756:	4a51      	ldr	r2, [pc, #324]	@ (800589c <HAL_RCCEx_PeriphCLKConfig+0x758>)
 8005758:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800575a:	f023 0307 	bic.w	r3, r3, #7
 800575e:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8005762:	430b      	orrs	r3, r1
 8005764:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005766:	6823      	ldr	r3, [r4, #0]
 8005768:	f013 0f20 	tst.w	r3, #32
 800576c:	d033      	beq.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x692>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800576e:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8005772:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005776:	d04d      	beq.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 8005778:	d823      	bhi.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 800577a:	b143      	cbz	r3, 800578e <HAL_RCCEx_PeriphCLKConfig+0x64a>
 800577c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005780:	d11c      	bne.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005782:	2100      	movs	r1, #0
 8005784:	f104 0008 	add.w	r0, r4, #8
 8005788:	f7ff fbd8 	bl	8004f3c <RCCEx_PLL2_Config>
 800578c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800578e:	2d00      	cmp	r5, #0
 8005790:	d147      	bne.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x6de>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005792:	4a42      	ldr	r2, [pc, #264]	@ (800589c <HAL_RCCEx_PeriphCLKConfig+0x758>)
 8005794:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8005796:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 800579a:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 800579e:	430b      	orrs	r3, r1
 80057a0:	6553      	str	r3, [r2, #84]	@ 0x54
 80057a2:	e018      	b.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x692>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80057a4:	2101      	movs	r1, #1
 80057a6:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80057aa:	f7ff fc49 	bl	8005040 <RCCEx_PLL3_Config>
 80057ae:	4605      	mov	r5, r0
        break;
 80057b0:	e7d0      	b.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x610>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80057b2:	2601      	movs	r6, #1
 80057b4:	4635      	mov	r5, r6
 80057b6:	e7d6      	b.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x622>
 80057b8:	462e      	mov	r6, r5
 80057ba:	e7d4      	b.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x622>
    switch (PeriphClkInit->Lptim1ClockSelection)
 80057bc:	2601      	movs	r6, #1
 80057be:	4635      	mov	r5, r6
 80057c0:	e009      	b.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x692>
 80057c2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80057c6:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80057ca:	d0e0      	beq.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x64a>
 80057cc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80057d0:	d0dd      	beq.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x64a>
 80057d2:	2601      	movs	r6, #1
 80057d4:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80057d6:	6823      	ldr	r3, [r4, #0]
 80057d8:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80057dc:	d030      	beq.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x6fc>
    switch (PeriphClkInit->Lptim2ClockSelection)
 80057de:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 80057e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80057e6:	d04c      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80057e8:	d820      	bhi.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x6e8>
 80057ea:	b143      	cbz	r3, 80057fe <HAL_RCCEx_PeriphCLKConfig+0x6ba>
 80057ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057f0:	d119      	bne.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057f2:	2100      	movs	r1, #0
 80057f4:	f104 0008 	add.w	r0, r4, #8
 80057f8:	f7ff fba0 	bl	8004f3c <RCCEx_PLL2_Config>
 80057fc:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80057fe:	2d00      	cmp	r5, #0
 8005800:	d146      	bne.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005802:	4a26      	ldr	r2, [pc, #152]	@ (800589c <HAL_RCCEx_PeriphCLKConfig+0x758>)
 8005804:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8005806:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 800580a:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 800580e:	430b      	orrs	r3, r1
 8005810:	6593      	str	r3, [r2, #88]	@ 0x58
 8005812:	e015      	b.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x6fc>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005814:	2102      	movs	r1, #2
 8005816:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800581a:	f7ff fc11 	bl	8005040 <RCCEx_PLL3_Config>
 800581e:	4605      	mov	r5, r0
        break;
 8005820:	e7b5      	b.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x64a>
 8005822:	462e      	mov	r6, r5
 8005824:	e7d7      	b.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x692>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005826:	2601      	movs	r6, #1
 8005828:	4635      	mov	r5, r6
 800582a:	e009      	b.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x6fc>
 800582c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005830:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 8005834:	d0e3      	beq.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x6ba>
 8005836:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800583a:	d0e0      	beq.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x6ba>
 800583c:	2601      	movs	r6, #1
 800583e:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005840:	6823      	ldr	r3, [r4, #0]
 8005842:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005846:	d037      	beq.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x774>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005848:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
 800584c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005850:	f000 810c 	beq.w	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x928>
 8005854:	d826      	bhi.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8005856:	b143      	cbz	r3, 800586a <HAL_RCCEx_PeriphCLKConfig+0x726>
 8005858:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800585c:	d11a      	bne.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x750>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800585e:	2100      	movs	r1, #0
 8005860:	f104 0008 	add.w	r0, r4, #8
 8005864:	f7ff fb6a 	bl	8004f3c <RCCEx_PLL2_Config>
 8005868:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800586a:	2d00      	cmp	r5, #0
 800586c:	f040 8105 	bne.w	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x936>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005870:	4a0a      	ldr	r2, [pc, #40]	@ (800589c <HAL_RCCEx_PeriphCLKConfig+0x758>)
 8005872:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8005874:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8005878:	f8d4 10a0 	ldr.w	r1, [r4, #160]	@ 0xa0
 800587c:	430b      	orrs	r3, r1
 800587e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005880:	e01a      	b.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x774>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005882:	2102      	movs	r1, #2
 8005884:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005888:	f7ff fbda 	bl	8005040 <RCCEx_PLL3_Config>
 800588c:	4605      	mov	r5, r0
        break;
 800588e:	e7b6      	b.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x6ba>
 8005890:	462e      	mov	r6, r5
 8005892:	e7d5      	b.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x6fc>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005894:	2601      	movs	r6, #1
 8005896:	4635      	mov	r5, r6
 8005898:	e00e      	b.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x774>
 800589a:	bf00      	nop
 800589c:	58024400 	.word	0x58024400
 80058a0:	00ffffcf 	.word	0x00ffffcf
 80058a4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80058a8:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 80058ac:	d0dd      	beq.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x726>
 80058ae:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80058b2:	d0da      	beq.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x726>
 80058b4:	2601      	movs	r6, #1
 80058b6:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80058b8:	6823      	ldr	r3, [r4, #0]
 80058ba:	f013 0f08 	tst.w	r3, #8
 80058be:	d00d      	beq.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x798>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80058c0:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 80058c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058c8:	f000 80d9 	beq.w	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x93a>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80058cc:	4ab0      	ldr	r2, [pc, #704]	@ (8005b90 <HAL_RCCEx_PeriphCLKConfig+0xa4c>)
 80058ce:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80058d0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80058d4:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 80058d8:	430b      	orrs	r3, r1
 80058da:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80058dc:	6823      	ldr	r3, [r4, #0]
 80058de:	f013 0f10 	tst.w	r3, #16
 80058e2:	d00d      	beq.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80058e4:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 80058e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058ec:	f000 80d0 	beq.w	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x94c>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80058f0:	4aa7      	ldr	r2, [pc, #668]	@ (8005b90 <HAL_RCCEx_PeriphCLKConfig+0xa4c>)
 80058f2:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80058f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058f8:	f8d4 1098 	ldr.w	r1, [r4, #152]	@ 0x98
 80058fc:	430b      	orrs	r3, r1
 80058fe:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005900:	6823      	ldr	r3, [r4, #0]
 8005902:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8005906:	d00e      	beq.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    switch (PeriphClkInit->AdcClockSelection)
 8005908:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 800590c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005910:	f000 80d7 	beq.w	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8005914:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005918:	f000 80c9 	beq.w	8005aae <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800591c:	2b00      	cmp	r3, #0
 800591e:	f000 80c0 	beq.w	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x95e>
 8005922:	2601      	movs	r6, #1
 8005924:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005926:	6823      	ldr	r3, [r4, #0]
 8005928:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 800592c:	d00f      	beq.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x80a>
    switch (PeriphClkInit->UsbClockSelection)
 800592e:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
 8005932:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005936:	f000 80dc 	beq.w	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
 800593a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800593e:	f000 80ce 	beq.w	8005ade <HAL_RCCEx_PeriphCLKConfig+0x99a>
 8005942:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005946:	f000 80c5 	beq.w	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x990>
 800594a:	2601      	movs	r6, #1
 800594c:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800594e:	6823      	ldr	r3, [r4, #0]
 8005950:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8005954:	d009      	beq.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x826>
    switch (PeriphClkInit->SdmmcClockSelection)
 8005956:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8005958:	2b00      	cmp	r3, #0
 800595a:	f000 80d3 	beq.w	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x9c0>
 800595e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005962:	f000 80dd 	beq.w	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x9dc>
 8005966:	2601      	movs	r6, #1
 8005968:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800596a:	6823      	ldr	r3, [r4, #0]
 800596c:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 8005970:	f040 80df 	bne.w	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005974:	6823      	ldr	r3, [r4, #0]
 8005976:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800597a:	d00e      	beq.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x856>
    switch (PeriphClkInit->RngClockSelection)
 800597c:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8005980:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005984:	f000 80e1 	beq.w	8005b4a <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8005988:	f240 80dc 	bls.w	8005b44 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800598c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005990:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005994:	f000 80de 	beq.w	8005b54 <HAL_RCCEx_PeriphCLKConfig+0xa10>
 8005998:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800599a:	6823      	ldr	r3, [r4, #0]
 800599c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80059a0:	d006      	beq.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80059a2:	4a7b      	ldr	r2, [pc, #492]	@ (8005b90 <HAL_RCCEx_PeriphCLKConfig+0xa4c>)
 80059a4:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80059a6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80059aa:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 80059ac:	430b      	orrs	r3, r1
 80059ae:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80059b0:	6823      	ldr	r3, [r4, #0]
 80059b2:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80059b6:	d007      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x884>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80059b8:	4a75      	ldr	r2, [pc, #468]	@ (8005b90 <HAL_RCCEx_PeriphCLKConfig+0xa4c>)
 80059ba:	6913      	ldr	r3, [r2, #16]
 80059bc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80059c0:	f8d4 10b8 	ldr.w	r1, [r4, #184]	@ 0xb8
 80059c4:	430b      	orrs	r3, r1
 80059c6:	6113      	str	r3, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80059c8:	6823      	ldr	r3, [r4, #0]
 80059ca:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 80059ce:	d006      	beq.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x89a>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80059d0:	4a6f      	ldr	r2, [pc, #444]	@ (8005b90 <HAL_RCCEx_PeriphCLKConfig+0xa4c>)
 80059d2:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80059d4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80059d8:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 80059da:	430b      	orrs	r3, r1
 80059dc:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80059de:	6823      	ldr	r3, [r4, #0]
 80059e0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80059e4:	d009      	beq.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x8b6>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80059e6:	4b6a      	ldr	r3, [pc, #424]	@ (8005b90 <HAL_RCCEx_PeriphCLKConfig+0xa4c>)
 80059e8:	691a      	ldr	r2, [r3, #16]
 80059ea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80059ee:	611a      	str	r2, [r3, #16]
 80059f0:	691a      	ldr	r2, [r3, #16]
 80059f2:	f8d4 10bc 	ldr.w	r1, [r4, #188]	@ 0xbc
 80059f6:	430a      	orrs	r2, r1
 80059f8:	611a      	str	r2, [r3, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80059fa:	6823      	ldr	r3, [r4, #0]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	da06      	bge.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x8ca>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005a00:	4a63      	ldr	r2, [pc, #396]	@ (8005b90 <HAL_RCCEx_PeriphCLKConfig+0xa4c>)
 8005a02:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8005a04:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8005a08:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8005a0a:	430b      	orrs	r3, r1
 8005a0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005a0e:	6823      	ldr	r3, [r4, #0]
 8005a10:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8005a14:	d007      	beq.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005a16:	4a5e      	ldr	r2, [pc, #376]	@ (8005b90 <HAL_RCCEx_PeriphCLKConfig+0xa4c>)
 8005a18:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8005a1a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005a1e:	f8d4 108c 	ldr.w	r1, [r4, #140]	@ 0x8c
 8005a22:	430b      	orrs	r3, r1
 8005a24:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005a26:	6863      	ldr	r3, [r4, #4]
 8005a28:	f013 0f01 	tst.w	r3, #1
 8005a2c:	f040 809e 	bne.w	8005b6c <HAL_RCCEx_PeriphCLKConfig+0xa28>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005a30:	6863      	ldr	r3, [r4, #4]
 8005a32:	f013 0f02 	tst.w	r3, #2
 8005a36:	f040 80a2 	bne.w	8005b7e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005a3a:	6863      	ldr	r3, [r4, #4]
 8005a3c:	f013 0f04 	tst.w	r3, #4
 8005a40:	f040 80a8 	bne.w	8005b94 <HAL_RCCEx_PeriphCLKConfig+0xa50>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005a44:	6863      	ldr	r3, [r4, #4]
 8005a46:	f013 0f08 	tst.w	r3, #8
 8005a4a:	f040 80ac 	bne.w	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0xa62>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005a4e:	6863      	ldr	r3, [r4, #4]
 8005a50:	f013 0f10 	tst.w	r3, #16
 8005a54:	f040 80b0 	bne.w	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005a58:	6863      	ldr	r3, [r4, #4]
 8005a5a:	f013 0f20 	tst.w	r3, #32
 8005a5e:	f040 80b4 	bne.w	8005bca <HAL_RCCEx_PeriphCLKConfig+0xa86>
  if (status == HAL_OK)
 8005a62:	1e30      	subs	r0, r6, #0
 8005a64:	bf18      	it	ne
 8005a66:	2001      	movne	r0, #1
}
 8005a68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005a6c:	2102      	movs	r1, #2
 8005a6e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005a72:	f7ff fae5 	bl	8005040 <RCCEx_PLL3_Config>
 8005a76:	4605      	mov	r5, r0
        break;
 8005a78:	e6f7      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x726>
 8005a7a:	462e      	mov	r6, r5
 8005a7c:	e71c      	b.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x774>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005a7e:	2102      	movs	r1, #2
 8005a80:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005a84:	f7ff fadc 	bl	8005040 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 8005a88:	2800      	cmp	r0, #0
 8005a8a:	bf18      	it	ne
 8005a8c:	2601      	movne	r6, #1
 8005a8e:	e71d      	b.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x788>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005a90:	2102      	movs	r1, #2
 8005a92:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005a96:	f7ff fad3 	bl	8005040 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 8005a9a:	2800      	cmp	r0, #0
 8005a9c:	bf18      	it	ne
 8005a9e:	2601      	movne	r6, #1
 8005aa0:	e726      	b.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005aa2:	2100      	movs	r1, #0
 8005aa4:	f104 0008 	add.w	r0, r4, #8
 8005aa8:	f7ff fa48 	bl	8004f3c <RCCEx_PLL2_Config>
 8005aac:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005aae:	b97d      	cbnz	r5, 8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005ab0:	4a37      	ldr	r2, [pc, #220]	@ (8005b90 <HAL_RCCEx_PeriphCLKConfig+0xa4c>)
 8005ab2:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8005ab4:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8005ab8:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
 8005abc:	430b      	orrs	r3, r1
 8005abe:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ac0:	e731      	b.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005ac2:	2102      	movs	r1, #2
 8005ac4:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005ac8:	f7ff faba 	bl	8005040 <RCCEx_PLL3_Config>
 8005acc:	4605      	mov	r5, r0
        break;
 8005ace:	e7ee      	b.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8005ad0:	462e      	mov	r6, r5
 8005ad2:	e728      	b.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ad4:	4a2e      	ldr	r2, [pc, #184]	@ (8005b90 <HAL_RCCEx_PeriphCLKConfig+0xa4c>)
 8005ad6:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8005ad8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005adc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 8005ade:	b97d      	cbnz	r5, 8005b00 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005ae0:	4a2b      	ldr	r2, [pc, #172]	@ (8005b90 <HAL_RCCEx_PeriphCLKConfig+0xa4c>)
 8005ae2:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8005ae4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005ae8:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 8005aec:	430b      	orrs	r3, r1
 8005aee:	6553      	str	r3, [r2, #84]	@ 0x54
 8005af0:	e72d      	b.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x80a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005af2:	2101      	movs	r1, #1
 8005af4:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005af8:	f7ff faa2 	bl	8005040 <RCCEx_PLL3_Config>
 8005afc:	4605      	mov	r5, r0
        break;
 8005afe:	e7ee      	b.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x99a>
 8005b00:	462e      	mov	r6, r5
 8005b02:	e724      	b.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x80a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b04:	4a22      	ldr	r2, [pc, #136]	@ (8005b90 <HAL_RCCEx_PeriphCLKConfig+0xa4c>)
 8005b06:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8005b08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b0c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 8005b0e:	b975      	cbnz	r5, 8005b2e <HAL_RCCEx_PeriphCLKConfig+0x9ea>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005b10:	4a1f      	ldr	r2, [pc, #124]	@ (8005b90 <HAL_RCCEx_PeriphCLKConfig+0xa4c>)
 8005b12:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8005b14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b18:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8005b1a:	430b      	orrs	r3, r1
 8005b1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005b1e:	e724      	b.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x826>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005b20:	2102      	movs	r1, #2
 8005b22:	f104 0008 	add.w	r0, r4, #8
 8005b26:	f7ff fa09 	bl	8004f3c <RCCEx_PLL2_Config>
 8005b2a:	4605      	mov	r5, r0
        break;
 8005b2c:	e7ef      	b.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x9ca>
 8005b2e:	462e      	mov	r6, r5
 8005b30:	e71b      	b.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x826>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005b32:	2102      	movs	r1, #2
 8005b34:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005b38:	f7ff fa82 	bl	8005040 <RCCEx_PLL3_Config>
      status = HAL_ERROR;
 8005b3c:	2800      	cmp	r0, #0
 8005b3e:	bf18      	it	ne
 8005b40:	2601      	movne	r6, #1
 8005b42:	e717      	b.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x830>
    switch (PeriphClkInit->RngClockSelection)
 8005b44:	b133      	cbz	r3, 8005b54 <HAL_RCCEx_PeriphCLKConfig+0xa10>
 8005b46:	2601      	movs	r6, #1
 8005b48:	e727      	b.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x856>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b4a:	4a11      	ldr	r2, [pc, #68]	@ (8005b90 <HAL_RCCEx_PeriphCLKConfig+0xa4c>)
 8005b4c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8005b4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b52:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 8005b54:	b945      	cbnz	r5, 8005b68 <HAL_RCCEx_PeriphCLKConfig+0xa24>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b56:	4a0e      	ldr	r2, [pc, #56]	@ (8005b90 <HAL_RCCEx_PeriphCLKConfig+0xa4c>)
 8005b58:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8005b5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b5e:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 8005b62:	430b      	orrs	r3, r1
 8005b64:	6553      	str	r3, [r2, #84]	@ 0x54
 8005b66:	e718      	b.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x856>
 8005b68:	462e      	mov	r6, r5
 8005b6a:	e716      	b.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x856>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b6c:	2100      	movs	r1, #0
 8005b6e:	f104 0008 	add.w	r0, r4, #8
 8005b72:	f7ff f9e3 	bl	8004f3c <RCCEx_PLL2_Config>
      status = ret;
 8005b76:	2800      	cmp	r0, #0
 8005b78:	bf18      	it	ne
 8005b7a:	4606      	movne	r6, r0
 8005b7c:	e758      	b.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b7e:	2101      	movs	r1, #1
 8005b80:	f104 0008 	add.w	r0, r4, #8
 8005b84:	f7ff f9da 	bl	8004f3c <RCCEx_PLL2_Config>
      status = ret;
 8005b88:	2800      	cmp	r0, #0
 8005b8a:	bf18      	it	ne
 8005b8c:	4606      	movne	r6, r0
 8005b8e:	e754      	b.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 8005b90:	58024400 	.word	0x58024400
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005b94:	2102      	movs	r1, #2
 8005b96:	f104 0008 	add.w	r0, r4, #8
 8005b9a:	f7ff f9cf 	bl	8004f3c <RCCEx_PLL2_Config>
      status = ret;
 8005b9e:	2800      	cmp	r0, #0
 8005ba0:	bf18      	it	ne
 8005ba2:	4606      	movne	r6, r0
 8005ba4:	e74e      	b.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x900>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ba6:	2100      	movs	r1, #0
 8005ba8:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005bac:	f7ff fa48 	bl	8005040 <RCCEx_PLL3_Config>
      status = ret;
 8005bb0:	2800      	cmp	r0, #0
 8005bb2:	bf18      	it	ne
 8005bb4:	4606      	movne	r6, r0
 8005bb6:	e74a      	b.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x90a>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005bb8:	2101      	movs	r1, #1
 8005bba:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005bbe:	f7ff fa3f 	bl	8005040 <RCCEx_PLL3_Config>
      status = ret;
 8005bc2:	2800      	cmp	r0, #0
 8005bc4:	bf18      	it	ne
 8005bc6:	4606      	movne	r6, r0
 8005bc8:	e746      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x914>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005bca:	2102      	movs	r1, #2
 8005bcc:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005bd0:	f7ff fa36 	bl	8005040 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8005bd4:	2800      	cmp	r0, #0
 8005bd6:	f43f af44 	beq.w	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x91e>
  return HAL_ERROR;
 8005bda:	2001      	movs	r0, #1
 8005bdc:	e744      	b.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005bde:	bf00      	nop

08005be0 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8005be0:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005be2:	f7ff f965 	bl	8004eb0 <HAL_RCC_GetHCLKFreq>
 8005be6:	4b05      	ldr	r3, [pc, #20]	@ (8005bfc <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8005be8:	6a1b      	ldr	r3, [r3, #32]
 8005bea:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8005bee:	4a04      	ldr	r2, [pc, #16]	@ (8005c00 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 8005bf0:	5cd3      	ldrb	r3, [r2, r3]
 8005bf2:	f003 031f 	and.w	r3, r3, #31
}
 8005bf6:	40d8      	lsrs	r0, r3
 8005bf8:	bd08      	pop	{r3, pc}
 8005bfa:	bf00      	nop
 8005bfc:	58024400 	.word	0x58024400
 8005c00:	08009e70 	.word	0x08009e70

08005c04 <HAL_RCCEx_GetPLL2ClockFreq>:
{
 8005c04:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005c06:	4b78      	ldr	r3, [pc, #480]	@ (8005de8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8005c08:	6a99      	ldr	r1, [r3, #40]	@ 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005c0a:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8005c0c:	f3c4 3205 	ubfx	r2, r4, #12, #6
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005c10:	6add      	ldr	r5, [r3, #44]	@ 0x2c
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005c12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  if (pll2m != 0U)
 8005c14:	f414 3f7c 	tst.w	r4, #258048	@ 0x3f000
 8005c18:	f000 80e1 	beq.w	8005dde <HAL_RCCEx_GetPLL2ClockFreq+0x1da>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005c1c:	f3c3 03cc 	ubfx	r3, r3, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005c20:	f3c5 1500 	ubfx	r5, r5, #4, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005c24:	fb05 f303 	mul.w	r3, r5, r3
 8005c28:	ee07 3a90 	vmov	s15, r3
 8005c2c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005c30:	f001 0103 	and.w	r1, r1, #3
    switch (pllsource)
 8005c34:	2901      	cmp	r1, #1
 8005c36:	d066      	beq.n	8005d06 <HAL_RCCEx_GetPLL2ClockFreq+0x102>
 8005c38:	2902      	cmp	r1, #2
 8005c3a:	f000 80b3 	beq.w	8005da4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005c3e:	b1e1      	cbz	r1, 8005c7a <HAL_RCCEx_GetPLL2ClockFreq+0x76>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005c40:	4b69      	ldr	r3, [pc, #420]	@ (8005de8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8005c42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c48:	ee07 3a90 	vmov	s15, r3
 8005c4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c50:	eddf 6a66 	vldr	s13, [pc, #408]	@ 8005dec <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 8005c54:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005c58:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005c5c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005c60:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005c64:	ee07 2a10 	vmov	s14, r2
 8005c68:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8005c6c:	ed9f 6a60 	vldr	s12, [pc, #384]	@ 8005df0 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 8005c70:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8005c74:	ee67 7a87 	vmul.f32	s15, s15, s14
        break;
 8005c78:	e061      	b.n	8005d3e <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c7a:	4b5b      	ldr	r3, [pc, #364]	@ (8005de8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f013 0f20 	tst.w	r3, #32
 8005c82:	d023      	beq.n	8005ccc <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c84:	4b58      	ldr	r3, [pc, #352]	@ (8005de8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8005c86:	681c      	ldr	r4, [r3, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005c88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c8a:	f3c4 04c1 	ubfx	r4, r4, #3, #2
 8005c8e:	4959      	ldr	r1, [pc, #356]	@ (8005df4 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>)
 8005c90:	40e1      	lsrs	r1, r4
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005c92:	ee07 1a90 	vmov	s15, r1
 8005c96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c9a:	ee07 2a90 	vmov	s15, r2
 8005c9e:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8005ca2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8005ca6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005caa:	ee06 3a90 	vmov	s13, r3
 8005cae:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8005cb2:	ed9f 6a4e 	vldr	s12, [pc, #312]	@ 8005dec <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 8005cb6:	ee27 7a06 	vmul.f32	s14, s14, s12
 8005cba:	ee36 7a87 	vadd.f32	s14, s13, s14
 8005cbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cc2:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005cc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005cca:	e038      	b.n	8005d3e <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ccc:	4b46      	ldr	r3, [pc, #280]	@ (8005de8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8005cce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cd4:	ee07 3a90 	vmov	s15, r3
 8005cd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cdc:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8005dec <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 8005ce0:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005ce4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005ce8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005cec:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005cf0:	ee07 2a10 	vmov	s14, r2
 8005cf4:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8005cf8:	ed9f 6a3f 	vldr	s12, [pc, #252]	@ 8005df8 <HAL_RCCEx_GetPLL2ClockFreq+0x1f4>
 8005cfc:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8005d00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d04:	e01b      	b.n	8005d3e <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d06:	4b38      	ldr	r3, [pc, #224]	@ (8005de8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8005d08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d0e:	ee07 3a90 	vmov	s15, r3
 8005d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d16:	eddf 6a35 	vldr	s13, [pc, #212]	@ 8005dec <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 8005d1a:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005d1e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005d22:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005d26:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005d2a:	ee07 2a10 	vmov	s14, r2
 8005d2e:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8005d32:	ed9f 6a2f 	vldr	s12, [pc, #188]	@ 8005df0 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 8005d36:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8005d3a:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005d3e:	4a2a      	ldr	r2, [pc, #168]	@ (8005de8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8005d40:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8005d42:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005d46:	ee07 3a10 	vmov	s14, r3
 8005d4a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005d4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d52:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005d56:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8005d5a:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8005d5e:	ed80 6a00 	vstr	s12, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005d62:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8005d64:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8005d68:	ee07 3a10 	vmov	s14, r3
 8005d6c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005d70:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005d74:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8005d78:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8005d7c:	ed80 6a01 	vstr	s12, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005d80:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8005d82:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8005d86:	ee07 3a10 	vmov	s14, r3
 8005d8a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005d8e:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005d92:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005d96:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8005d9a:	ee17 2a90 	vmov	r2, s15
 8005d9e:	6082      	str	r2, [r0, #8]
}
 8005da0:	bc30      	pop	{r4, r5}
 8005da2:	4770      	bx	lr
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005da4:	4b10      	ldr	r3, [pc, #64]	@ (8005de8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8005da6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005da8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dac:	ee07 3a90 	vmov	s15, r3
 8005db0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005db4:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 8005dec <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 8005db8:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005dbc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005dc0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005dc4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005dc8:	ee07 2a10 	vmov	s14, r2
 8005dcc:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8005dd0:	ed9f 6a0a 	vldr	s12, [pc, #40]	@ 8005dfc <HAL_RCCEx_GetPLL2ClockFreq+0x1f8>
 8005dd4:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8005dd8:	ee67 7a87 	vmul.f32	s15, s15, s14
        break;
 8005ddc:	e7af      	b.n	8005d3e <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005dde:	2300      	movs	r3, #0
 8005de0:	6003      	str	r3, [r0, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005de2:	6043      	str	r3, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005de4:	e7db      	b.n	8005d9e <HAL_RCCEx_GetPLL2ClockFreq+0x19a>
 8005de6:	bf00      	nop
 8005de8:	58024400 	.word	0x58024400
 8005dec:	39000000 	.word	0x39000000
 8005df0:	4a742400 	.word	0x4a742400
 8005df4:	03d09000 	.word	0x03d09000
 8005df8:	4c742400 	.word	0x4c742400
 8005dfc:	4b742400 	.word	0x4b742400

08005e00 <HAL_RCCEx_GetPLL3ClockFreq>:
{
 8005e00:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e02:	4b78      	ldr	r3, [pc, #480]	@ (8005fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8005e04:	6a99      	ldr	r1, [r3, #40]	@ 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005e06:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8005e08:	f3c4 5205 	ubfx	r2, r4, #20, #6
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005e0c:	6add      	ldr	r5, [r3, #44]	@ 0x2c
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005e0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  if (pll3m != 0U)
 8005e10:	f014 7f7c 	tst.w	r4, #66060288	@ 0x3f00000
 8005e14:	f000 80e1 	beq.w	8005fda <HAL_RCCEx_GetPLL3ClockFreq+0x1da>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005e18:	f3c3 03cc 	ubfx	r3, r3, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005e1c:	f3c5 2500 	ubfx	r5, r5, #8, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005e20:	fb05 f303 	mul.w	r3, r5, r3
 8005e24:	ee07 3a90 	vmov	s15, r3
 8005e28:	eeb8 7a67 	vcvt.f32.u32	s14, s15
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e2c:	f001 0103 	and.w	r1, r1, #3
    switch (pllsource)
 8005e30:	2901      	cmp	r1, #1
 8005e32:	d066      	beq.n	8005f02 <HAL_RCCEx_GetPLL3ClockFreq+0x102>
 8005e34:	2902      	cmp	r1, #2
 8005e36:	f000 80b3 	beq.w	8005fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005e3a:	b1e1      	cbz	r1, 8005e76 <HAL_RCCEx_GetPLL3ClockFreq+0x76>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e3c:	4b69      	ldr	r3, [pc, #420]	@ (8005fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8005e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e44:	ee07 3a90 	vmov	s15, r3
 8005e48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e4c:	eddf 6a66 	vldr	s13, [pc, #408]	@ 8005fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 8005e50:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005e54:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005e58:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e5c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005e60:	ee07 2a10 	vmov	s14, r2
 8005e64:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8005e68:	ed9f 6a60 	vldr	s12, [pc, #384]	@ 8005fec <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8005e6c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8005e70:	ee67 7a87 	vmul.f32	s15, s15, s14
        break;
 8005e74:	e061      	b.n	8005f3a <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e76:	4b5b      	ldr	r3, [pc, #364]	@ (8005fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f013 0f20 	tst.w	r3, #32
 8005e7e:	d023      	beq.n	8005ec8 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e80:	4b58      	ldr	r3, [pc, #352]	@ (8005fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8005e82:	681c      	ldr	r4, [r3, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e86:	f3c4 04c1 	ubfx	r4, r4, #3, #2
 8005e8a:	4959      	ldr	r1, [pc, #356]	@ (8005ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>)
 8005e8c:	40e1      	lsrs	r1, r4
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e8e:	ee07 1a90 	vmov	s15, r1
 8005e92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e96:	ee07 2a90 	vmov	s15, r2
 8005e9a:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8005e9e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8005ea2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ea6:	ee06 3a90 	vmov	s13, r3
 8005eaa:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8005eae:	ed9f 6a4e 	vldr	s12, [pc, #312]	@ 8005fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 8005eb2:	ee27 7a06 	vmul.f32	s14, s14, s12
 8005eb6:	ee36 7a87 	vadd.f32	s14, s13, s14
 8005eba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ebe:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005ec2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005ec6:	e038      	b.n	8005f3a <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005ec8:	4b46      	ldr	r3, [pc, #280]	@ (8005fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8005eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ecc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ed0:	ee07 3a90 	vmov	s15, r3
 8005ed4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ed8:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8005fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 8005edc:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005ee0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005ee4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ee8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005eec:	ee07 2a10 	vmov	s14, r2
 8005ef0:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8005ef4:	ed9f 6a3f 	vldr	s12, [pc, #252]	@ 8005ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x1f4>
 8005ef8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8005efc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005f00:	e01b      	b.n	8005f3a <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f02:	4b38      	ldr	r3, [pc, #224]	@ (8005fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8005f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f0a:	ee07 3a90 	vmov	s15, r3
 8005f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f12:	eddf 6a35 	vldr	s13, [pc, #212]	@ 8005fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 8005f16:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005f1a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005f1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f22:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005f26:	ee07 2a10 	vmov	s14, r2
 8005f2a:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8005f2e:	ed9f 6a2f 	vldr	s12, [pc, #188]	@ 8005fec <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8005f32:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8005f36:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005f3a:	4a2a      	ldr	r2, [pc, #168]	@ (8005fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8005f3c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8005f3e:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005f42:	ee07 3a10 	vmov	s14, r3
 8005f46:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005f4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f4e:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005f52:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8005f56:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8005f5a:	ed80 6a00 	vstr	s12, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005f5e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8005f60:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8005f64:	ee07 3a10 	vmov	s14, r3
 8005f68:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005f6c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005f70:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8005f74:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8005f78:	ed80 6a01 	vstr	s12, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005f7c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8005f7e:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8005f82:	ee07 3a10 	vmov	s14, r3
 8005f86:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005f8a:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005f8e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005f92:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8005f96:	ee17 2a90 	vmov	r2, s15
 8005f9a:	6082      	str	r2, [r0, #8]
}
 8005f9c:	bc30      	pop	{r4, r5}
 8005f9e:	4770      	bx	lr
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005fa0:	4b10      	ldr	r3, [pc, #64]	@ (8005fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8005fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fa8:	ee07 3a90 	vmov	s15, r3
 8005fac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fb0:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 8005fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 8005fb4:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005fb8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005fbc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005fc0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005fc4:	ee07 2a10 	vmov	s14, r2
 8005fc8:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8005fcc:	ed9f 6a0a 	vldr	s12, [pc, #40]	@ 8005ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x1f8>
 8005fd0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8005fd4:	ee67 7a87 	vmul.f32	s15, s15, s14
        break;
 8005fd8:	e7af      	b.n	8005f3a <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	6003      	str	r3, [r0, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005fde:	6043      	str	r3, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005fe0:	e7db      	b.n	8005f9a <HAL_RCCEx_GetPLL3ClockFreq+0x19a>
 8005fe2:	bf00      	nop
 8005fe4:	58024400 	.word	0x58024400
 8005fe8:	39000000 	.word	0x39000000
 8005fec:	4a742400 	.word	0x4a742400
 8005ff0:	03d09000 	.word	0x03d09000
 8005ff4:	4c742400 	.word	0x4c742400
 8005ff8:	4b742400 	.word	0x4b742400

08005ffc <HAL_TIM_PeriodElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005ffc:	4770      	bx	lr

08005ffe <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ffe:	4770      	bx	lr

08006000 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006000:	4770      	bx	lr

08006002 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006002:	4770      	bx	lr

08006004 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006004:	4770      	bx	lr

08006006 <HAL_TIM_IRQHandler>:
{
 8006006:	b510      	push	{r4, lr}
 8006008:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800600a:	6803      	ldr	r3, [r0, #0]
 800600c:	691a      	ldr	r2, [r3, #16]
 800600e:	f012 0f02 	tst.w	r2, #2
 8006012:	d011      	beq.n	8006038 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006014:	68da      	ldr	r2, [r3, #12]
 8006016:	f012 0f02 	tst.w	r2, #2
 800601a:	d00d      	beq.n	8006038 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800601c:	f06f 0202 	mvn.w	r2, #2
 8006020:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006022:	2301      	movs	r3, #1
 8006024:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006026:	6803      	ldr	r3, [r0, #0]
 8006028:	699b      	ldr	r3, [r3, #24]
 800602a:	f013 0f03 	tst.w	r3, #3
 800602e:	d079      	beq.n	8006124 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8006030:	f7ff ffe6 	bl	8006000 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006034:	2300      	movs	r3, #0
 8006036:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006038:	6823      	ldr	r3, [r4, #0]
 800603a:	691a      	ldr	r2, [r3, #16]
 800603c:	f012 0f04 	tst.w	r2, #4
 8006040:	d012      	beq.n	8006068 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006042:	68da      	ldr	r2, [r3, #12]
 8006044:	f012 0f04 	tst.w	r2, #4
 8006048:	d00e      	beq.n	8006068 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800604a:	f06f 0204 	mvn.w	r2, #4
 800604e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006050:	2302      	movs	r3, #2
 8006052:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006054:	6823      	ldr	r3, [r4, #0]
 8006056:	699b      	ldr	r3, [r3, #24]
 8006058:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800605c:	d068      	beq.n	8006130 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800605e:	4620      	mov	r0, r4
 8006060:	f7ff ffce 	bl	8006000 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006064:	2300      	movs	r3, #0
 8006066:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006068:	6823      	ldr	r3, [r4, #0]
 800606a:	691a      	ldr	r2, [r3, #16]
 800606c:	f012 0f08 	tst.w	r2, #8
 8006070:	d012      	beq.n	8006098 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006072:	68da      	ldr	r2, [r3, #12]
 8006074:	f012 0f08 	tst.w	r2, #8
 8006078:	d00e      	beq.n	8006098 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800607a:	f06f 0208 	mvn.w	r2, #8
 800607e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006080:	2304      	movs	r3, #4
 8006082:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006084:	6823      	ldr	r3, [r4, #0]
 8006086:	69db      	ldr	r3, [r3, #28]
 8006088:	f013 0f03 	tst.w	r3, #3
 800608c:	d057      	beq.n	800613e <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 800608e:	4620      	mov	r0, r4
 8006090:	f7ff ffb6 	bl	8006000 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006094:	2300      	movs	r3, #0
 8006096:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006098:	6823      	ldr	r3, [r4, #0]
 800609a:	691a      	ldr	r2, [r3, #16]
 800609c:	f012 0f10 	tst.w	r2, #16
 80060a0:	d012      	beq.n	80060c8 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80060a2:	68da      	ldr	r2, [r3, #12]
 80060a4:	f012 0f10 	tst.w	r2, #16
 80060a8:	d00e      	beq.n	80060c8 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80060aa:	f06f 0210 	mvn.w	r2, #16
 80060ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060b0:	2308      	movs	r3, #8
 80060b2:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060b4:	6823      	ldr	r3, [r4, #0]
 80060b6:	69db      	ldr	r3, [r3, #28]
 80060b8:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80060bc:	d046      	beq.n	800614c <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80060be:	4620      	mov	r0, r4
 80060c0:	f7ff ff9e 	bl	8006000 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060c4:	2300      	movs	r3, #0
 80060c6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80060c8:	6823      	ldr	r3, [r4, #0]
 80060ca:	691a      	ldr	r2, [r3, #16]
 80060cc:	f012 0f01 	tst.w	r2, #1
 80060d0:	d003      	beq.n	80060da <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80060d2:	68da      	ldr	r2, [r3, #12]
 80060d4:	f012 0f01 	tst.w	r2, #1
 80060d8:	d13f      	bne.n	800615a <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80060da:	6823      	ldr	r3, [r4, #0]
 80060dc:	691a      	ldr	r2, [r3, #16]
 80060de:	f012 0f80 	tst.w	r2, #128	@ 0x80
 80060e2:	d003      	beq.n	80060ec <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060e4:	68da      	ldr	r2, [r3, #12]
 80060e6:	f012 0f80 	tst.w	r2, #128	@ 0x80
 80060ea:	d13d      	bne.n	8006168 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80060ec:	6823      	ldr	r3, [r4, #0]
 80060ee:	691a      	ldr	r2, [r3, #16]
 80060f0:	f412 7f80 	tst.w	r2, #256	@ 0x100
 80060f4:	d003      	beq.n	80060fe <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060f6:	68da      	ldr	r2, [r3, #12]
 80060f8:	f012 0f80 	tst.w	r2, #128	@ 0x80
 80060fc:	d13b      	bne.n	8006176 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80060fe:	6823      	ldr	r3, [r4, #0]
 8006100:	691a      	ldr	r2, [r3, #16]
 8006102:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8006106:	d003      	beq.n	8006110 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006108:	68da      	ldr	r2, [r3, #12]
 800610a:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800610e:	d139      	bne.n	8006184 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006110:	6823      	ldr	r3, [r4, #0]
 8006112:	691a      	ldr	r2, [r3, #16]
 8006114:	f012 0f20 	tst.w	r2, #32
 8006118:	d003      	beq.n	8006122 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800611a:	68da      	ldr	r2, [r3, #12]
 800611c:	f012 0f20 	tst.w	r2, #32
 8006120:	d137      	bne.n	8006192 <HAL_TIM_IRQHandler+0x18c>
}
 8006122:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006124:	f7ff ff6b 	bl	8005ffe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006128:	4620      	mov	r0, r4
 800612a:	f7ff ff6a 	bl	8006002 <HAL_TIM_PWM_PulseFinishedCallback>
 800612e:	e781      	b.n	8006034 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006130:	4620      	mov	r0, r4
 8006132:	f7ff ff64 	bl	8005ffe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006136:	4620      	mov	r0, r4
 8006138:	f7ff ff63 	bl	8006002 <HAL_TIM_PWM_PulseFinishedCallback>
 800613c:	e792      	b.n	8006064 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800613e:	4620      	mov	r0, r4
 8006140:	f7ff ff5d 	bl	8005ffe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006144:	4620      	mov	r0, r4
 8006146:	f7ff ff5c 	bl	8006002 <HAL_TIM_PWM_PulseFinishedCallback>
 800614a:	e7a3      	b.n	8006094 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800614c:	4620      	mov	r0, r4
 800614e:	f7ff ff56 	bl	8005ffe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006152:	4620      	mov	r0, r4
 8006154:	f7ff ff55 	bl	8006002 <HAL_TIM_PWM_PulseFinishedCallback>
 8006158:	e7b4      	b.n	80060c4 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800615a:	f06f 0201 	mvn.w	r2, #1
 800615e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006160:	4620      	mov	r0, r4
 8006162:	f7ff ff4b 	bl	8005ffc <HAL_TIM_PeriodElapsedCallback>
 8006166:	e7b8      	b.n	80060da <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006168:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800616c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800616e:	4620      	mov	r0, r4
 8006170:	f000 f9f7 	bl	8006562 <HAL_TIMEx_BreakCallback>
 8006174:	e7ba      	b.n	80060ec <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006176:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800617a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800617c:	4620      	mov	r0, r4
 800617e:	f000 f9f1 	bl	8006564 <HAL_TIMEx_Break2Callback>
 8006182:	e7bc      	b.n	80060fe <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006184:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006188:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800618a:	4620      	mov	r0, r4
 800618c:	f7ff ff3a 	bl	8006004 <HAL_TIM_TriggerCallback>
 8006190:	e7be      	b.n	8006110 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006192:	f06f 0220 	mvn.w	r2, #32
 8006196:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8006198:	4620      	mov	r0, r4
 800619a:	f000 f9e1 	bl	8006560 <HAL_TIMEx_CommutCallback>
}
 800619e:	e7c0      	b.n	8006122 <HAL_TIM_IRQHandler+0x11c>

080061a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80061a0:	b430      	push	{r4, r5}
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061a2:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061a4:	4a32      	ldr	r2, [pc, #200]	@ (8006270 <TIM_Base_SetConfig+0xd0>)
 80061a6:	4290      	cmp	r0, r2
 80061a8:	bf14      	ite	ne
 80061aa:	2200      	movne	r2, #0
 80061ac:	2201      	moveq	r2, #1
 80061ae:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80061b2:	d037      	beq.n	8006224 <TIM_Base_SetConfig+0x84>
 80061b4:	2a00      	cmp	r2, #0
 80061b6:	d135      	bne.n	8006224 <TIM_Base_SetConfig+0x84>
 80061b8:	4c2e      	ldr	r4, [pc, #184]	@ (8006274 <TIM_Base_SetConfig+0xd4>)
 80061ba:	42a0      	cmp	r0, r4
 80061bc:	d00b      	beq.n	80061d6 <TIM_Base_SetConfig+0x36>
 80061be:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80061c2:	42a0      	cmp	r0, r4
 80061c4:	d007      	beq.n	80061d6 <TIM_Base_SetConfig+0x36>
 80061c6:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80061ca:	42a0      	cmp	r0, r4
 80061cc:	d003      	beq.n	80061d6 <TIM_Base_SetConfig+0x36>
 80061ce:	f504 4478 	add.w	r4, r4, #63488	@ 0xf800
 80061d2:	42a0      	cmp	r0, r4
 80061d4:	d10a      	bne.n	80061ec <TIM_Base_SetConfig+0x4c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80061da:	684c      	ldr	r4, [r1, #4]
 80061dc:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061de:	4c25      	ldr	r4, [pc, #148]	@ (8006274 <TIM_Base_SetConfig+0xd4>)
 80061e0:	42a0      	cmp	r0, r4
 80061e2:	d023      	beq.n	800622c <TIM_Base_SetConfig+0x8c>
 80061e4:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80061e8:	42a0      	cmp	r0, r4
 80061ea:	d01f      	beq.n	800622c <TIM_Base_SetConfig+0x8c>
 80061ec:	4c22      	ldr	r4, [pc, #136]	@ (8006278 <TIM_Base_SetConfig+0xd8>)
 80061ee:	42a0      	cmp	r0, r4
 80061f0:	d01c      	beq.n	800622c <TIM_Base_SetConfig+0x8c>
 80061f2:	f504 4478 	add.w	r4, r4, #63488	@ 0xf800
 80061f6:	42a0      	cmp	r0, r4
 80061f8:	d018      	beq.n	800622c <TIM_Base_SetConfig+0x8c>
 80061fa:	4d20      	ldr	r5, [pc, #128]	@ (800627c <TIM_Base_SetConfig+0xdc>)
 80061fc:	f504 4480 	add.w	r4, r4, #16384	@ 0x4000
 8006200:	42a0      	cmp	r0, r4
 8006202:	bf18      	it	ne
 8006204:	42a8      	cmpne	r0, r5
 8006206:	d011      	beq.n	800622c <TIM_Base_SetConfig+0x8c>
 8006208:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800620c:	42a0      	cmp	r0, r4
 800620e:	d00d      	beq.n	800622c <TIM_Base_SetConfig+0x8c>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006210:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006214:	694a      	ldr	r2, [r1, #20]
 8006216:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8006218:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800621a:	688b      	ldr	r3, [r1, #8]
 800621c:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800621e:	680b      	ldr	r3, [r1, #0]
 8006220:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006222:	e021      	b.n	8006268 <TIM_Base_SetConfig+0xc8>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006224:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8006228:	684c      	ldr	r4, [r1, #4]
 800622a:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 800622c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006230:	68cc      	ldr	r4, [r1, #12]
 8006232:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006234:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006238:	694c      	ldr	r4, [r1, #20]
 800623a:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 800623c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800623e:	688b      	ldr	r3, [r1, #8]
 8006240:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006242:	680b      	ldr	r3, [r1, #0]
 8006244:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006246:	4b0e      	ldr	r3, [pc, #56]	@ (8006280 <TIM_Base_SetConfig+0xe0>)
 8006248:	4298      	cmp	r0, r3
 800624a:	d00b      	beq.n	8006264 <TIM_Base_SetConfig+0xc4>
 800624c:	b952      	cbnz	r2, 8006264 <TIM_Base_SetConfig+0xc4>
 800624e:	4a0b      	ldr	r2, [pc, #44]	@ (800627c <TIM_Base_SetConfig+0xdc>)
 8006250:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8006254:	4298      	cmp	r0, r3
 8006256:	bf18      	it	ne
 8006258:	4290      	cmpne	r0, r2
 800625a:	d003      	beq.n	8006264 <TIM_Base_SetConfig+0xc4>
 800625c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006260:	4298      	cmp	r0, r3
 8006262:	d101      	bne.n	8006268 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006264:	690b      	ldr	r3, [r1, #16]
 8006266:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006268:	2301      	movs	r3, #1
 800626a:	6143      	str	r3, [r0, #20]
}
 800626c:	bc30      	pop	{r4, r5}
 800626e:	4770      	bx	lr
 8006270:	40010000 	.word	0x40010000
 8006274:	40000400 	.word	0x40000400
 8006278:	40000c00 	.word	0x40000c00
 800627c:	40014000 	.word	0x40014000
 8006280:	40010400 	.word	0x40010400

08006284 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8006284:	b360      	cbz	r0, 80062e0 <HAL_TIM_Base_Init+0x5c>
{
 8006286:	b510      	push	{r4, lr}
 8006288:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800628a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800628e:	b313      	cbz	r3, 80062d6 <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8006290:	2302      	movs	r3, #2
 8006292:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006296:	4621      	mov	r1, r4
 8006298:	f851 0b04 	ldr.w	r0, [r1], #4
 800629c:	f7ff ff80 	bl	80061a0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062a0:	2301      	movs	r3, #1
 80062a2:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062a6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80062aa:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80062ae:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80062b2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 80062b6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80062ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062be:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80062c2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80062c6:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 80062ca:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 80062ce:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80062d2:	2000      	movs	r0, #0
}
 80062d4:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80062d6:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80062da:	f7fb f8d9 	bl	8001490 <HAL_TIM_Base_MspInit>
 80062de:	e7d7      	b.n	8006290 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80062e0:	2001      	movs	r0, #1
}
 80062e2:	4770      	bx	lr

080062e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80062e4:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80062e6:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062e8:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062ec:	430a      	orrs	r2, r1
 80062ee:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80062f2:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062f6:	6082      	str	r2, [r0, #8]
}
 80062f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062fc:	4770      	bx	lr
	...

08006300 <HAL_TIM_ConfigClockSource>:
{
 8006300:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8006302:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8006306:	2b01      	cmp	r3, #1
 8006308:	f000 80c1 	beq.w	800648e <HAL_TIM_ConfigClockSource+0x18e>
 800630c:	4604      	mov	r4, r0
 800630e:	2301      	movs	r3, #1
 8006310:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8006314:	2302      	movs	r3, #2
 8006316:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800631a:	6802      	ldr	r2, [r0, #0]
 800631c:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800631e:	4b5d      	ldr	r3, [pc, #372]	@ (8006494 <HAL_TIM_ConfigClockSource+0x194>)
 8006320:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8006322:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8006324:	680b      	ldr	r3, [r1, #0]
 8006326:	2b70      	cmp	r3, #112	@ 0x70
 8006328:	d07a      	beq.n	8006420 <HAL_TIM_ConfigClockSource+0x120>
 800632a:	d84d      	bhi.n	80063c8 <HAL_TIM_ConfigClockSource+0xc8>
 800632c:	2b50      	cmp	r3, #80	@ 0x50
 800632e:	f000 8091 	beq.w	8006454 <HAL_TIM_ConfigClockSource+0x154>
 8006332:	d91d      	bls.n	8006370 <HAL_TIM_ConfigClockSource+0x70>
 8006334:	2b60      	cmp	r3, #96	@ 0x60
 8006336:	d145      	bne.n	80063c4 <HAL_TIM_ConfigClockSource+0xc4>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006338:	6823      	ldr	r3, [r4, #0]
                               sClockSourceConfig->ClockPolarity,
 800633a:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800633c:	68cd      	ldr	r5, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800633e:	6a1a      	ldr	r2, [r3, #32]
 8006340:	f022 0210 	bic.w	r2, r2, #16
 8006344:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006346:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8006348:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800634a:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800634e:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006352:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8006356:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800635a:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800635c:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800635e:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8006360:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006362:	4b4d      	ldr	r3, [pc, #308]	@ (8006498 <HAL_TIM_ConfigClockSource+0x198>)
 8006364:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006366:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 800636a:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800636c:	2000      	movs	r0, #0
}
 800636e:	e047      	b.n	8006400 <HAL_TIM_ConfigClockSource+0x100>
  switch (sClockSourceConfig->ClockSource)
 8006370:	2b40      	cmp	r3, #64	@ 0x40
 8006372:	d11a      	bne.n	80063aa <HAL_TIM_ConfigClockSource+0xaa>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006374:	6823      	ldr	r3, [r4, #0]
                               sClockSourceConfig->ClockPolarity,
 8006376:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8006378:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 800637a:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800637c:	6a1a      	ldr	r2, [r3, #32]
 800637e:	f022 0201 	bic.w	r2, r2, #1
 8006382:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006384:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006386:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800638a:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800638e:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8006392:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8006394:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006396:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006398:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800639a:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800639c:	4b3e      	ldr	r3, [pc, #248]	@ (8006498 <HAL_TIM_ConfigClockSource+0x198>)
 800639e:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063a0:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 80063a4:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80063a6:	2000      	movs	r0, #0
}
 80063a8:	e02a      	b.n	8006400 <HAL_TIM_ConfigClockSource+0x100>
  switch (sClockSourceConfig->ClockSource)
 80063aa:	d86e      	bhi.n	800648a <HAL_TIM_ConfigClockSource+0x18a>
 80063ac:	2b20      	cmp	r3, #32
 80063ae:	d019      	beq.n	80063e4 <HAL_TIM_ConfigClockSource+0xe4>
 80063b0:	d903      	bls.n	80063ba <HAL_TIM_ConfigClockSource+0xba>
 80063b2:	2b30      	cmp	r3, #48	@ 0x30
 80063b4:	d016      	beq.n	80063e4 <HAL_TIM_ConfigClockSource+0xe4>
 80063b6:	2001      	movs	r0, #1
 80063b8:	e022      	b.n	8006400 <HAL_TIM_ConfigClockSource+0x100>
 80063ba:	f033 0210 	bics.w	r2, r3, #16
 80063be:	d011      	beq.n	80063e4 <HAL_TIM_ConfigClockSource+0xe4>
 80063c0:	2001      	movs	r0, #1
 80063c2:	e01d      	b.n	8006400 <HAL_TIM_ConfigClockSource+0x100>
 80063c4:	2001      	movs	r0, #1
 80063c6:	e01b      	b.n	8006400 <HAL_TIM_ConfigClockSource+0x100>
 80063c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063cc:	d035      	beq.n	800643a <HAL_TIM_ConfigClockSource+0x13a>
 80063ce:	d913      	bls.n	80063f8 <HAL_TIM_ConfigClockSource+0xf8>
 80063d0:	4a32      	ldr	r2, [pc, #200]	@ (800649c <HAL_TIM_ConfigClockSource+0x19c>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d006      	beq.n	80063e4 <HAL_TIM_ConfigClockSource+0xe4>
 80063d6:	d91a      	bls.n	800640e <HAL_TIM_ConfigClockSource+0x10e>
 80063d8:	4a31      	ldr	r2, [pc, #196]	@ (80064a0 <HAL_TIM_ConfigClockSource+0x1a0>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d002      	beq.n	80063e4 <HAL_TIM_ConfigClockSource+0xe4>
 80063de:	3210      	adds	r2, #16
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d11b      	bne.n	800641c <HAL_TIM_ConfigClockSource+0x11c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80063e4:	6821      	ldr	r1, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80063e6:	6888      	ldr	r0, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80063e8:	4a2b      	ldr	r2, [pc, #172]	@ (8006498 <HAL_TIM_ConfigClockSource+0x198>)
 80063ea:	4002      	ands	r2, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063ec:	431a      	orrs	r2, r3
 80063ee:	f042 0207 	orr.w	r2, r2, #7
  TIMx->SMCR = tmpsmcr;
 80063f2:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80063f4:	2000      	movs	r0, #0
}
 80063f6:	e003      	b.n	8006400 <HAL_TIM_ConfigClockSource+0x100>
  switch (sClockSourceConfig->ClockSource)
 80063f8:	f5b3 5080 	subs.w	r0, r3, #4096	@ 0x1000
 80063fc:	bf18      	it	ne
 80063fe:	2001      	movne	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8006400:	2301      	movs	r3, #1
 8006402:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8006406:	2300      	movs	r3, #0
 8006408:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800640c:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 800640e:	f023 0210 	bic.w	r2, r3, #16
 8006412:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 8006416:	d0e5      	beq.n	80063e4 <HAL_TIM_ConfigClockSource+0xe4>
 8006418:	2001      	movs	r0, #1
 800641a:	e7f1      	b.n	8006400 <HAL_TIM_ConfigClockSource+0x100>
 800641c:	2001      	movs	r0, #1
 800641e:	e7ef      	b.n	8006400 <HAL_TIM_ConfigClockSource+0x100>
      TIM_ETR_SetConfig(htim->Instance,
 8006420:	68cb      	ldr	r3, [r1, #12]
 8006422:	684a      	ldr	r2, [r1, #4]
 8006424:	6889      	ldr	r1, [r1, #8]
 8006426:	6820      	ldr	r0, [r4, #0]
 8006428:	f7ff ff5c 	bl	80062e4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800642c:	6822      	ldr	r2, [r4, #0]
 800642e:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006430:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8006434:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006436:	2000      	movs	r0, #0
      break;
 8006438:	e7e2      	b.n	8006400 <HAL_TIM_ConfigClockSource+0x100>
      TIM_ETR_SetConfig(htim->Instance,
 800643a:	68cb      	ldr	r3, [r1, #12]
 800643c:	684a      	ldr	r2, [r1, #4]
 800643e:	6889      	ldr	r1, [r1, #8]
 8006440:	6820      	ldr	r0, [r4, #0]
 8006442:	f7ff ff4f 	bl	80062e4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006446:	6822      	ldr	r2, [r4, #0]
 8006448:	6893      	ldr	r3, [r2, #8]
 800644a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800644e:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006450:	2000      	movs	r0, #0
      break;
 8006452:	e7d5      	b.n	8006400 <HAL_TIM_ConfigClockSource+0x100>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006454:	6823      	ldr	r3, [r4, #0]
                               sClockSourceConfig->ClockPolarity,
 8006456:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8006458:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 800645a:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800645c:	6a1a      	ldr	r2, [r3, #32]
 800645e:	f022 0201 	bic.w	r2, r2, #1
 8006462:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006464:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006466:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800646a:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800646e:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8006472:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8006474:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006476:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006478:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800647a:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800647c:	4b06      	ldr	r3, [pc, #24]	@ (8006498 <HAL_TIM_ConfigClockSource+0x198>)
 800647e:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006480:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 8006484:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006486:	2000      	movs	r0, #0
}
 8006488:	e7ba      	b.n	8006400 <HAL_TIM_ConfigClockSource+0x100>
  switch (sClockSourceConfig->ClockSource)
 800648a:	2001      	movs	r0, #1
 800648c:	e7b8      	b.n	8006400 <HAL_TIM_ConfigClockSource+0x100>
  __HAL_LOCK(htim);
 800648e:	2002      	movs	r0, #2
 8006490:	e7bc      	b.n	800640c <HAL_TIM_ConfigClockSource+0x10c>
 8006492:	bf00      	nop
 8006494:	ffce0088 	.word	0xffce0088
 8006498:	ffcfff8f 	.word	0xffcfff8f
 800649c:	00100020 	.word	0x00100020
 80064a0:	00100030 	.word	0x00100030

080064a4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064a4:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d051      	beq.n	8006550 <HAL_TIMEx_MasterConfigSynchronization+0xac>
{
 80064ac:	b430      	push	{r4, r5}
 80064ae:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 80064b0:	2301      	movs	r3, #1
 80064b2:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064b6:	2302      	movs	r3, #2
 80064b8:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064bc:	6800      	ldr	r0, [r0, #0]
 80064be:	6843      	ldr	r3, [r0, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064c0:	6884      	ldr	r4, [r0, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80064c2:	4d24      	ldr	r5, [pc, #144]	@ (8006554 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80064c4:	42a8      	cmp	r0, r5
 80064c6:	d003      	beq.n	80064d0 <HAL_TIMEx_MasterConfigSynchronization+0x2c>
 80064c8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80064cc:	42a8      	cmp	r0, r5
 80064ce:	d103      	bne.n	80064d8 <HAL_TIMEx_MasterConfigSynchronization+0x34>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80064d0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80064d4:	684d      	ldr	r5, [r1, #4]
 80064d6:	432b      	orrs	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064dc:	680d      	ldr	r5, [r1, #0]
 80064de:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064e0:	6043      	str	r3, [r0, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064e2:	6810      	ldr	r0, [r2, #0]
 80064e4:	4b1b      	ldr	r3, [pc, #108]	@ (8006554 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80064e6:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80064ea:	bf18      	it	ne
 80064ec:	4298      	cmpne	r0, r3
 80064ee:	bf0c      	ite	eq
 80064f0:	2301      	moveq	r3, #1
 80064f2:	2300      	movne	r3, #0
 80064f4:	4d18      	ldr	r5, [pc, #96]	@ (8006558 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80064f6:	42a8      	cmp	r0, r5
 80064f8:	bf08      	it	eq
 80064fa:	f043 0301 	orreq.w	r3, r3, #1
 80064fe:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006502:	42a8      	cmp	r0, r5
 8006504:	bf08      	it	eq
 8006506:	f043 0301 	orreq.w	r3, r3, #1
 800650a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800650e:	42a8      	cmp	r0, r5
 8006510:	bf08      	it	eq
 8006512:	f043 0301 	orreq.w	r3, r3, #1
 8006516:	f505 4578 	add.w	r5, r5, #63488	@ 0xf800
 800651a:	42a8      	cmp	r0, r5
 800651c:	bf08      	it	eq
 800651e:	f043 0301 	orreq.w	r3, r3, #1
 8006522:	f5a5 456c 	sub.w	r5, r5, #60416	@ 0xec00
 8006526:	42a8      	cmp	r0, r5
 8006528:	bf08      	it	eq
 800652a:	f043 0301 	orreq.w	r3, r3, #1
 800652e:	b913      	cbnz	r3, 8006536 <HAL_TIMEx_MasterConfigSynchronization+0x92>
 8006530:	4b0a      	ldr	r3, [pc, #40]	@ (800655c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006532:	4298      	cmp	r0, r3
 8006534:	d104      	bne.n	8006540 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006536:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800653a:	688b      	ldr	r3, [r1, #8]
 800653c:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800653e:	6084      	str	r4, [r0, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006540:	2301      	movs	r3, #1
 8006542:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006546:	2000      	movs	r0, #0
 8006548:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
}
 800654c:	bc30      	pop	{r4, r5}
 800654e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8006550:	2002      	movs	r0, #2
}
 8006552:	4770      	bx	lr
 8006554:	40010000 	.word	0x40010000
 8006558:	40000400 	.word	0x40000400
 800655c:	40014000 	.word	0x40014000

08006560 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006560:	4770      	bx	lr

08006562 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006562:	4770      	bx	lr

08006564 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006564:	4770      	bx	lr
	...

08006568 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006568:	b410      	push	{r4}
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800656a:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800656c:	e852 3f00 	ldrex	r3, [r2]
 8006570:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006574:	e842 3100 	strex	r1, r3, [r2]
 8006578:	2900      	cmp	r1, #0
 800657a:	d1f6      	bne.n	800656a <UART_EndRxTransfer+0x2>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800657c:	4c10      	ldr	r4, [pc, #64]	@ (80065c0 <UART_EndRxTransfer+0x58>)
 800657e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006580:	f102 0308 	add.w	r3, r2, #8
 8006584:	e853 3f00 	ldrex	r3, [r3]
 8006588:	4023      	ands	r3, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800658a:	3208      	adds	r2, #8
 800658c:	e842 3100 	strex	r1, r3, [r2]
 8006590:	2900      	cmp	r1, #0
 8006592:	d1f4      	bne.n	800657e <UART_EndRxTransfer+0x16>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006594:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8006596:	2b01      	cmp	r3, #1
 8006598:	d008      	beq.n	80065ac <UART_EndRxTransfer+0x44>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800659a:	2320      	movs	r3, #32
 800659c:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065a0:	2300      	movs	r3, #0
 80065a2:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80065a4:	6743      	str	r3, [r0, #116]	@ 0x74
}
 80065a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80065aa:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065ac:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ae:	e852 3f00 	ldrex	r3, [r2]
 80065b2:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b6:	e842 3100 	strex	r1, r3, [r2]
 80065ba:	2900      	cmp	r1, #0
 80065bc:	d1f6      	bne.n	80065ac <UART_EndRxTransfer+0x44>
 80065be:	e7ec      	b.n	800659a <UART_EndRxTransfer+0x32>
 80065c0:	effffffe 	.word	0xeffffffe

080065c4 <HAL_UART_TxCpltCallback>:
}
 80065c4:	4770      	bx	lr

080065c6 <HAL_UART_ErrorCallback>:
}
 80065c6:	4770      	bx	lr

080065c8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80065c8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80065ca:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxXferCount = 0U;
 80065cc:	2300      	movs	r3, #0
 80065ce:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80065d2:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80065d6:	f7ff fff6 	bl	80065c6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065da:	bd08      	pop	{r3, pc}

080065dc <HAL_UARTEx_RxEventCallback>:
}
 80065dc:	4770      	bx	lr
	...

080065e0 <HAL_UART_IRQHandler>:
{
 80065e0:	b570      	push	{r4, r5, r6, lr}
 80065e2:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80065e4:	6802      	ldr	r2, [r0, #0]
 80065e6:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80065e8:	6811      	ldr	r1, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80065ea:	6890      	ldr	r0, [r2, #8]
  if (errorflags == 0U)
 80065ec:	f640 0c0f 	movw	ip, #2063	@ 0x80f
 80065f0:	ea13 0f0c 	tst.w	r3, ip
 80065f4:	d10e      	bne.n	8006614 <HAL_UART_IRQHandler+0x34>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80065f6:	f013 0f20 	tst.w	r3, #32
 80065fa:	d014      	beq.n	8006626 <HAL_UART_IRQHandler+0x46>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80065fc:	f001 0c20 	and.w	ip, r1, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006600:	f000 5580 	and.w	r5, r0, #268435456	@ 0x10000000
 8006604:	ea5c 0c05 	orrs.w	ip, ip, r5
 8006608:	d00d      	beq.n	8006626 <HAL_UART_IRQHandler+0x46>
      if (huart->RxISR != NULL)
 800660a:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800660c:	b3a3      	cbz	r3, 8006678 <HAL_UART_IRQHandler+0x98>
        huart->RxISR(huart);
 800660e:	4620      	mov	r0, r4
 8006610:	4798      	blx	r3
 8006612:	e031      	b.n	8006678 <HAL_UART_IRQHandler+0x98>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006614:	4d67      	ldr	r5, [pc, #412]	@ (80067b4 <HAL_UART_IRQHandler+0x1d4>)
 8006616:	4005      	ands	r5, r0
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006618:	f8df c1a0 	ldr.w	ip, [pc, #416]	@ 80067bc <HAL_UART_IRQHandler+0x1dc>
 800661c:	ea01 0c0c 	and.w	ip, r1, ip
 8006620:	ea5c 0c05 	orrs.w	ip, ip, r5
 8006624:	d129      	bne.n	800667a <HAL_UART_IRQHandler+0x9a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006626:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
 8006628:	2d01      	cmp	r5, #1
 800662a:	f000 80c9 	beq.w	80067c0 <HAL_UART_IRQHandler+0x1e0>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800662e:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8006632:	d003      	beq.n	800663c <HAL_UART_IRQHandler+0x5c>
 8006634:	f410 0f80 	tst.w	r0, #4194304	@ 0x400000
 8006638:	f040 81ae 	bne.w	8006998 <HAL_UART_IRQHandler+0x3b8>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800663c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006640:	d006      	beq.n	8006650 <HAL_UART_IRQHandler+0x70>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006642:	f001 0280 	and.w	r2, r1, #128	@ 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006646:	f400 0000 	and.w	r0, r0, #8388608	@ 0x800000
 800664a:	4302      	orrs	r2, r0
 800664c:	f040 81ab 	bne.w	80069a6 <HAL_UART_IRQHandler+0x3c6>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006650:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8006654:	d003      	beq.n	800665e <HAL_UART_IRQHandler+0x7e>
 8006656:	f011 0f40 	tst.w	r1, #64	@ 0x40
 800665a:	f040 81ab 	bne.w	80069b4 <HAL_UART_IRQHandler+0x3d4>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800665e:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8006662:	d003      	beq.n	800666c <HAL_UART_IRQHandler+0x8c>
 8006664:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8006668:	f040 81b6 	bne.w	80069d8 <HAL_UART_IRQHandler+0x3f8>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800666c:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8006670:	d002      	beq.n	8006678 <HAL_UART_IRQHandler+0x98>
 8006672:	2900      	cmp	r1, #0
 8006674:	f2c0 81b4 	blt.w	80069e0 <HAL_UART_IRQHandler+0x400>
}
 8006678:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800667a:	f013 0f01 	tst.w	r3, #1
 800667e:	d009      	beq.n	8006694 <HAL_UART_IRQHandler+0xb4>
 8006680:	f411 7f80 	tst.w	r1, #256	@ 0x100
 8006684:	d006      	beq.n	8006694 <HAL_UART_IRQHandler+0xb4>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006686:	2601      	movs	r6, #1
 8006688:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800668a:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 800668e:	4332      	orrs	r2, r6
 8006690:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006694:	f013 0f02 	tst.w	r3, #2
 8006698:	d076      	beq.n	8006788 <HAL_UART_IRQHandler+0x1a8>
 800669a:	f010 0f01 	tst.w	r0, #1
 800669e:	d014      	beq.n	80066ca <HAL_UART_IRQHandler+0xea>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80066a0:	6822      	ldr	r2, [r4, #0]
 80066a2:	2602      	movs	r6, #2
 80066a4:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80066a6:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 80066aa:	f042 0204 	orr.w	r2, r2, #4
 80066ae:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80066b2:	f013 0f04 	tst.w	r3, #4
 80066b6:	d008      	beq.n	80066ca <HAL_UART_IRQHandler+0xea>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80066b8:	6822      	ldr	r2, [r4, #0]
 80066ba:	2604      	movs	r6, #4
 80066bc:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80066be:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 80066c2:	f042 0202 	orr.w	r2, r2, #2
 80066c6:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_ORE) != 0U)
 80066ca:	f013 0f08 	tst.w	r3, #8
 80066ce:	d00b      	beq.n	80066e8 <HAL_UART_IRQHandler+0x108>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80066d0:	f001 0220 	and.w	r2, r1, #32
 80066d4:	432a      	orrs	r2, r5
 80066d6:	d007      	beq.n	80066e8 <HAL_UART_IRQHandler+0x108>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80066d8:	6822      	ldr	r2, [r4, #0]
 80066da:	2508      	movs	r5, #8
 80066dc:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80066de:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 80066e2:	432a      	orrs	r2, r5
 80066e4:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80066e8:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 80066ec:	d00c      	beq.n	8006708 <HAL_UART_IRQHandler+0x128>
 80066ee:	f011 6f80 	tst.w	r1, #67108864	@ 0x4000000
 80066f2:	d009      	beq.n	8006708 <HAL_UART_IRQHandler+0x128>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066f4:	6822      	ldr	r2, [r4, #0]
 80066f6:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 80066fa:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80066fc:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8006700:	f042 0220 	orr.w	r2, r2, #32
 8006704:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006708:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 800670c:	2a00      	cmp	r2, #0
 800670e:	d0b3      	beq.n	8006678 <HAL_UART_IRQHandler+0x98>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006710:	f013 0f20 	tst.w	r3, #32
 8006714:	d009      	beq.n	800672a <HAL_UART_IRQHandler+0x14a>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006716:	f001 0120 	and.w	r1, r1, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800671a:	f000 5080 	and.w	r0, r0, #268435456	@ 0x10000000
 800671e:	4301      	orrs	r1, r0
 8006720:	d003      	beq.n	800672a <HAL_UART_IRQHandler+0x14a>
        if (huart->RxISR != NULL)
 8006722:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8006724:	b10b      	cbz	r3, 800672a <HAL_UART_IRQHandler+0x14a>
          huart->RxISR(huart);
 8006726:	4620      	mov	r0, r4
 8006728:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 800672a:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800672e:	6823      	ldr	r3, [r4, #0]
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	f003 0340 	and.w	r3, r3, #64	@ 0x40
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006736:	f002 0228 	and.w	r2, r2, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800673a:	4313      	orrs	r3, r2
 800673c:	d033      	beq.n	80067a6 <HAL_UART_IRQHandler+0x1c6>
        UART_EndRxTransfer(huart);
 800673e:	4620      	mov	r0, r4
 8006740:	f7ff ff12 	bl	8006568 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006744:	6823      	ldr	r3, [r4, #0]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800674c:	d027      	beq.n	800679e <HAL_UART_IRQHandler+0x1be>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800674e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006750:	f102 0308 	add.w	r3, r2, #8
 8006754:	e853 3f00 	ldrex	r3, [r3]
 8006758:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800675c:	3208      	adds	r2, #8
 800675e:	e842 3100 	strex	r1, r3, [r2]
 8006762:	2900      	cmp	r1, #0
 8006764:	d1f3      	bne.n	800674e <HAL_UART_IRQHandler+0x16e>
          if (huart->hdmarx != NULL)
 8006766:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800676a:	b1a3      	cbz	r3, 8006796 <HAL_UART_IRQHandler+0x1b6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800676c:	4a12      	ldr	r2, [pc, #72]	@ (80067b8 <HAL_UART_IRQHandler+0x1d8>)
 800676e:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006770:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8006774:	f7fc f940 	bl	80029f8 <HAL_DMA_Abort_IT>
 8006778:	2800      	cmp	r0, #0
 800677a:	f43f af7d 	beq.w	8006678 <HAL_UART_IRQHandler+0x98>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800677e:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8006782:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8006784:	4798      	blx	r3
 8006786:	e777      	b.n	8006678 <HAL_UART_IRQHandler+0x98>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006788:	f013 0f04 	tst.w	r3, #4
 800678c:	d09d      	beq.n	80066ca <HAL_UART_IRQHandler+0xea>
 800678e:	f010 0f01 	tst.w	r0, #1
 8006792:	d09a      	beq.n	80066ca <HAL_UART_IRQHandler+0xea>
 8006794:	e790      	b.n	80066b8 <HAL_UART_IRQHandler+0xd8>
            HAL_UART_ErrorCallback(huart);
 8006796:	4620      	mov	r0, r4
 8006798:	f7ff ff15 	bl	80065c6 <HAL_UART_ErrorCallback>
 800679c:	e76c      	b.n	8006678 <HAL_UART_IRQHandler+0x98>
          HAL_UART_ErrorCallback(huart);
 800679e:	4620      	mov	r0, r4
 80067a0:	f7ff ff11 	bl	80065c6 <HAL_UART_ErrorCallback>
 80067a4:	e768      	b.n	8006678 <HAL_UART_IRQHandler+0x98>
        HAL_UART_ErrorCallback(huart);
 80067a6:	4620      	mov	r0, r4
 80067a8:	f7ff ff0d 	bl	80065c6 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067ac:	2300      	movs	r3, #0
 80067ae:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 80067b2:	e761      	b.n	8006678 <HAL_UART_IRQHandler+0x98>
 80067b4:	10000001 	.word	0x10000001
 80067b8:	080065c9 	.word	0x080065c9
 80067bc:	04000120 	.word	0x04000120
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80067c0:	f013 0f10 	tst.w	r3, #16
 80067c4:	f43f af33 	beq.w	800662e <HAL_UART_IRQHandler+0x4e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80067c8:	f011 0f10 	tst.w	r1, #16
 80067cc:	f43f af2f 	beq.w	800662e <HAL_UART_IRQHandler+0x4e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80067d0:	2310      	movs	r3, #16
 80067d2:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067d4:	6823      	ldr	r3, [r4, #0]
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80067dc:	f000 80a3 	beq.w	8006926 <HAL_UART_IRQHandler+0x346>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80067e0:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 80067e4:	680a      	ldr	r2, [r1, #0]
 80067e6:	4b80      	ldr	r3, [pc, #512]	@ (80069e8 <HAL_UART_IRQHandler+0x408>)
 80067e8:	4880      	ldr	r0, [pc, #512]	@ (80069ec <HAL_UART_IRQHandler+0x40c>)
 80067ea:	4282      	cmp	r2, r0
 80067ec:	bf18      	it	ne
 80067ee:	429a      	cmpne	r2, r3
 80067f0:	bf0c      	ite	eq
 80067f2:	2301      	moveq	r3, #1
 80067f4:	2300      	movne	r3, #0
 80067f6:	3018      	adds	r0, #24
 80067f8:	4282      	cmp	r2, r0
 80067fa:	bf08      	it	eq
 80067fc:	f043 0301 	orreq.w	r3, r3, #1
 8006800:	3018      	adds	r0, #24
 8006802:	4282      	cmp	r2, r0
 8006804:	bf08      	it	eq
 8006806:	f043 0301 	orreq.w	r3, r3, #1
 800680a:	3018      	adds	r0, #24
 800680c:	4282      	cmp	r2, r0
 800680e:	bf08      	it	eq
 8006810:	f043 0301 	orreq.w	r3, r3, #1
 8006814:	3018      	adds	r0, #24
 8006816:	4282      	cmp	r2, r0
 8006818:	bf08      	it	eq
 800681a:	f043 0301 	orreq.w	r3, r3, #1
 800681e:	3018      	adds	r0, #24
 8006820:	4282      	cmp	r2, r0
 8006822:	bf08      	it	eq
 8006824:	f043 0301 	orreq.w	r3, r3, #1
 8006828:	3018      	adds	r0, #24
 800682a:	4282      	cmp	r2, r0
 800682c:	bf08      	it	eq
 800682e:	f043 0301 	orreq.w	r3, r3, #1
 8006832:	f500 7056 	add.w	r0, r0, #856	@ 0x358
 8006836:	4282      	cmp	r2, r0
 8006838:	bf08      	it	eq
 800683a:	f043 0301 	orreq.w	r3, r3, #1
 800683e:	3018      	adds	r0, #24
 8006840:	4282      	cmp	r2, r0
 8006842:	bf08      	it	eq
 8006844:	f043 0301 	orreq.w	r3, r3, #1
 8006848:	3018      	adds	r0, #24
 800684a:	4282      	cmp	r2, r0
 800684c:	bf08      	it	eq
 800684e:	f043 0301 	orreq.w	r3, r3, #1
 8006852:	3018      	adds	r0, #24
 8006854:	4282      	cmp	r2, r0
 8006856:	bf08      	it	eq
 8006858:	f043 0301 	orreq.w	r3, r3, #1
 800685c:	3018      	adds	r0, #24
 800685e:	4282      	cmp	r2, r0
 8006860:	bf08      	it	eq
 8006862:	f043 0301 	orreq.w	r3, r3, #1
 8006866:	3018      	adds	r0, #24
 8006868:	4282      	cmp	r2, r0
 800686a:	bf08      	it	eq
 800686c:	f043 0301 	orreq.w	r3, r3, #1
 8006870:	3018      	adds	r0, #24
 8006872:	4282      	cmp	r2, r0
 8006874:	bf08      	it	eq
 8006876:	f043 0301 	orreq.w	r3, r3, #1
 800687a:	b913      	cbnz	r3, 8006882 <HAL_UART_IRQHandler+0x2a2>
 800687c:	4b5c      	ldr	r3, [pc, #368]	@ (80069f0 <HAL_UART_IRQHandler+0x410>)
 800687e:	429a      	cmp	r2, r3
 8006880:	d14e      	bne.n	8006920 <HAL_UART_IRQHandler+0x340>
 8006882:	6853      	ldr	r3, [r2, #4]
 8006884:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8006886:	2b00      	cmp	r3, #0
 8006888:	f43f aef6 	beq.w	8006678 <HAL_UART_IRQHandler+0x98>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800688c:	f8b4 205c 	ldrh.w	r2, [r4, #92]	@ 0x5c
 8006890:	429a      	cmp	r2, r3
 8006892:	f67f aef1 	bls.w	8006678 <HAL_UART_IRQHandler+0x98>
        huart->RxXferCount = nb_remaining_rx_data;
 8006896:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800689a:	69cb      	ldr	r3, [r1, #28]
 800689c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068a0:	d032      	beq.n	8006908 <HAL_UART_IRQHandler+0x328>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068a2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a4:	e852 3f00 	ldrex	r3, [r2]
 80068a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ac:	e842 3100 	strex	r1, r3, [r2]
 80068b0:	2900      	cmp	r1, #0
 80068b2:	d1f6      	bne.n	80068a2 <HAL_UART_IRQHandler+0x2c2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068b4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b6:	f102 0308 	add.w	r3, r2, #8
 80068ba:	e853 3f00 	ldrex	r3, [r3]
 80068be:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c2:	3208      	adds	r2, #8
 80068c4:	e842 3100 	strex	r1, r3, [r2]
 80068c8:	2900      	cmp	r1, #0
 80068ca:	d1f3      	bne.n	80068b4 <HAL_UART_IRQHandler+0x2d4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068cc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ce:	f102 0308 	add.w	r3, r2, #8
 80068d2:	e853 3f00 	ldrex	r3, [r3]
 80068d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068da:	3208      	adds	r2, #8
 80068dc:	e842 3100 	strex	r1, r3, [r2]
 80068e0:	2900      	cmp	r1, #0
 80068e2:	d1f3      	bne.n	80068cc <HAL_UART_IRQHandler+0x2ec>
          huart->RxState = HAL_UART_STATE_READY;
 80068e4:	2320      	movs	r3, #32
 80068e6:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068ea:	2300      	movs	r3, #0
 80068ec:	66e3      	str	r3, [r4, #108]	@ 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068ee:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f0:	e852 3f00 	ldrex	r3, [r2]
 80068f4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f8:	e842 3100 	strex	r1, r3, [r2]
 80068fc:	2900      	cmp	r1, #0
 80068fe:	d1f6      	bne.n	80068ee <HAL_UART_IRQHandler+0x30e>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006900:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8006904:	f7fb fe1c 	bl	8002540 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006908:	2302      	movs	r3, #2
 800690a:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800690c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8006910:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8006914:	1ac9      	subs	r1, r1, r3
 8006916:	b289      	uxth	r1, r1
 8006918:	4620      	mov	r0, r4
 800691a:	f7ff fe5f 	bl	80065dc <HAL_UARTEx_RxEventCallback>
 800691e:	e6ab      	b.n	8006678 <HAL_UART_IRQHandler+0x98>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006920:	6853      	ldr	r3, [r2, #4]
 8006922:	b29b      	uxth	r3, r3
 8006924:	e7af      	b.n	8006886 <HAL_UART_IRQHandler+0x2a6>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006926:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 800692a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 800692e:	1ac9      	subs	r1, r1, r3
 8006930:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8006932:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8006936:	b29b      	uxth	r3, r3
          && (nb_rx_data > 0U))
 8006938:	2900      	cmp	r1, #0
 800693a:	f43f ae9d 	beq.w	8006678 <HAL_UART_IRQHandler+0x98>
 800693e:	2b00      	cmp	r3, #0
 8006940:	f43f ae9a 	beq.w	8006678 <HAL_UART_IRQHandler+0x98>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006944:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006946:	e852 3f00 	ldrex	r3, [r2]
 800694a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694e:	e842 3000 	strex	r0, r3, [r2]
 8006952:	2800      	cmp	r0, #0
 8006954:	d1f6      	bne.n	8006944 <HAL_UART_IRQHandler+0x364>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006956:	4d27      	ldr	r5, [pc, #156]	@ (80069f4 <HAL_UART_IRQHandler+0x414>)
 8006958:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800695a:	f102 0308 	add.w	r3, r2, #8
 800695e:	e853 3f00 	ldrex	r3, [r3]
 8006962:	402b      	ands	r3, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006964:	3208      	adds	r2, #8
 8006966:	e842 3000 	strex	r0, r3, [r2]
 800696a:	2800      	cmp	r0, #0
 800696c:	d1f4      	bne.n	8006958 <HAL_UART_IRQHandler+0x378>
        huart->RxState = HAL_UART_STATE_READY;
 800696e:	2320      	movs	r3, #32
 8006970:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006974:	2300      	movs	r3, #0
 8006976:	66e3      	str	r3, [r4, #108]	@ 0x6c
        huart->RxISR = NULL;
 8006978:	6763      	str	r3, [r4, #116]	@ 0x74
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800697a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800697c:	e852 3f00 	ldrex	r3, [r2]
 8006980:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006984:	e842 3000 	strex	r0, r3, [r2]
 8006988:	2800      	cmp	r0, #0
 800698a:	d1f6      	bne.n	800697a <HAL_UART_IRQHandler+0x39a>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800698c:	2302      	movs	r3, #2
 800698e:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006990:	4620      	mov	r0, r4
 8006992:	f7ff fe23 	bl	80065dc <HAL_UARTEx_RxEventCallback>
 8006996:	e66f      	b.n	8006678 <HAL_UART_IRQHandler+0x98>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006998:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800699c:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800699e:	4620      	mov	r0, r4
 80069a0:	f000 fcf2 	bl	8007388 <HAL_UARTEx_WakeupCallback>
    return;
 80069a4:	e668      	b.n	8006678 <HAL_UART_IRQHandler+0x98>
    if (huart->TxISR != NULL)
 80069a6:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	f43f ae65 	beq.w	8006678 <HAL_UART_IRQHandler+0x98>
      huart->TxISR(huart);
 80069ae:	4620      	mov	r0, r4
 80069b0:	4798      	blx	r3
 80069b2:	e661      	b.n	8006678 <HAL_UART_IRQHandler+0x98>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80069b4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b6:	e852 3f00 	ldrex	r3, [r2]
 80069ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069be:	e842 3100 	strex	r1, r3, [r2]
 80069c2:	2900      	cmp	r1, #0
 80069c4:	d1f6      	bne.n	80069b4 <HAL_UART_IRQHandler+0x3d4>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069c6:	2320      	movs	r3, #32
 80069c8:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80069cc:	2300      	movs	r3, #0
 80069ce:	67a3      	str	r3, [r4, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80069d0:	4620      	mov	r0, r4
 80069d2:	f7ff fdf7 	bl	80065c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069d6:	e64f      	b.n	8006678 <HAL_UART_IRQHandler+0x98>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80069d8:	4620      	mov	r0, r4
 80069da:	f000 fcd7 	bl	800738c <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 80069de:	e64b      	b.n	8006678 <HAL_UART_IRQHandler+0x98>
    HAL_UARTEx_RxFifoFullCallback(huart);
 80069e0:	4620      	mov	r0, r4
 80069e2:	f000 fcd2 	bl	800738a <HAL_UARTEx_RxFifoFullCallback>
    return;
 80069e6:	e647      	b.n	8006678 <HAL_UART_IRQHandler+0x98>
 80069e8:	40020010 	.word	0x40020010
 80069ec:	40020028 	.word	0x40020028
 80069f0:	400204b8 	.word	0x400204b8
 80069f4:	effffffe 	.word	0xeffffffe

080069f8 <UART_SetConfig>:
{
 80069f8:	b570      	push	{r4, r5, r6, lr}
 80069fa:	b086      	sub	sp, #24
 80069fc:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 80069fe:	6801      	ldr	r1, [r0, #0]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a00:	6808      	ldr	r0, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a02:	68a3      	ldr	r3, [r4, #8]
 8006a04:	6922      	ldr	r2, [r4, #16]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	6962      	ldr	r2, [r4, #20]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	69e2      	ldr	r2, [r4, #28]
 8006a0e:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a10:	4a84      	ldr	r2, [pc, #528]	@ (8006c24 <UART_SetConfig+0x22c>)
 8006a12:	4002      	ands	r2, r0
 8006a14:	4313      	orrs	r3, r2
 8006a16:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a18:	6822      	ldr	r2, [r4, #0]
 8006a1a:	6853      	ldr	r3, [r2, #4]
 8006a1c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8006a20:	68e1      	ldr	r1, [r4, #12]
 8006a22:	430b      	orrs	r3, r1
 8006a24:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a26:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006a28:	6822      	ldr	r2, [r4, #0]
 8006a2a:	4b7f      	ldr	r3, [pc, #508]	@ (8006c28 <UART_SetConfig+0x230>)
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d001      	beq.n	8006a34 <UART_SetConfig+0x3c>
    tmpreg |= huart->Init.OneBitSampling;
 8006a30:	6a23      	ldr	r3, [r4, #32]
 8006a32:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a34:	6890      	ldr	r0, [r2, #8]
 8006a36:	4b7d      	ldr	r3, [pc, #500]	@ (8006c2c <UART_SetConfig+0x234>)
 8006a38:	4003      	ands	r3, r0
 8006a3a:	430b      	orrs	r3, r1
 8006a3c:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006a3e:	6822      	ldr	r2, [r4, #0]
 8006a40:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8006a42:	f023 030f 	bic.w	r3, r3, #15
 8006a46:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006a48:	430b      	orrs	r3, r1
 8006a4a:	62d3      	str	r3, [r2, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a4c:	6822      	ldr	r2, [r4, #0]
 8006a4e:	4b78      	ldr	r3, [pc, #480]	@ (8006c30 <UART_SetConfig+0x238>)
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d021      	beq.n	8006a98 <UART_SetConfig+0xa0>
 8006a54:	4b77      	ldr	r3, [pc, #476]	@ (8006c34 <UART_SetConfig+0x23c>)
 8006a56:	429a      	cmp	r2, r3
 8006a58:	f000 8084 	beq.w	8006b64 <UART_SetConfig+0x16c>
 8006a5c:	4b76      	ldr	r3, [pc, #472]	@ (8006c38 <UART_SetConfig+0x240>)
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	f000 8098 	beq.w	8006b94 <UART_SetConfig+0x19c>
 8006a64:	4b75      	ldr	r3, [pc, #468]	@ (8006c3c <UART_SetConfig+0x244>)
 8006a66:	429a      	cmp	r2, r3
 8006a68:	f000 80ac 	beq.w	8006bc4 <UART_SetConfig+0x1cc>
 8006a6c:	4b74      	ldr	r3, [pc, #464]	@ (8006c40 <UART_SetConfig+0x248>)
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	f000 80c0 	beq.w	8006bf4 <UART_SetConfig+0x1fc>
 8006a74:	4b73      	ldr	r3, [pc, #460]	@ (8006c44 <UART_SetConfig+0x24c>)
 8006a76:	429a      	cmp	r2, r3
 8006a78:	f000 80ec 	beq.w	8006c54 <UART_SetConfig+0x25c>
 8006a7c:	4b72      	ldr	r3, [pc, #456]	@ (8006c48 <UART_SetConfig+0x250>)
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	f000 8123 	beq.w	8006cca <UART_SetConfig+0x2d2>
 8006a84:	4b71      	ldr	r3, [pc, #452]	@ (8006c4c <UART_SetConfig+0x254>)
 8006a86:	429a      	cmp	r2, r3
 8006a88:	f000 8137 	beq.w	8006cfa <UART_SetConfig+0x302>
 8006a8c:	4b66      	ldr	r3, [pc, #408]	@ (8006c28 <UART_SetConfig+0x230>)
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	f000 814b 	beq.w	8006d2a <UART_SetConfig+0x332>
 8006a94:	2380      	movs	r3, #128	@ 0x80
 8006a96:	e033      	b.n	8006b00 <UART_SetConfig+0x108>
 8006a98:	4b6d      	ldr	r3, [pc, #436]	@ (8006c50 <UART_SetConfig+0x258>)
 8006a9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a9c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006aa0:	2b28      	cmp	r3, #40	@ 0x28
 8006aa2:	d85d      	bhi.n	8006b60 <UART_SetConfig+0x168>
 8006aa4:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006aa8:	005c0150 	.word	0x005c0150
 8006aac:	005c005c 	.word	0x005c005c
 8006ab0:	005c005c 	.word	0x005c005c
 8006ab4:	005c005c 	.word	0x005c005c
 8006ab8:	005c027a 	.word	0x005c027a
 8006abc:	005c005c 	.word	0x005c005c
 8006ac0:	005c005c 	.word	0x005c005c
 8006ac4:	005c005c 	.word	0x005c005c
 8006ac8:	005c027c 	.word	0x005c027c
 8006acc:	005c005c 	.word	0x005c005c
 8006ad0:	005c005c 	.word	0x005c005c
 8006ad4:	005c005c 	.word	0x005c005c
 8006ad8:	005c0029 	.word	0x005c0029
 8006adc:	005c005c 	.word	0x005c005c
 8006ae0:	005c005c 	.word	0x005c005c
 8006ae4:	005c005c 	.word	0x005c005c
 8006ae8:	005c002b 	.word	0x005c002b
 8006aec:	005c005c 	.word	0x005c005c
 8006af0:	005c005c 	.word	0x005c005c
 8006af4:	005c005c 	.word	0x005c005c
 8006af8:	005a      	.short	0x005a
 8006afa:	2310      	movs	r3, #16
 8006afc:	e000      	b.n	8006b00 <UART_SetConfig+0x108>
 8006afe:	2320      	movs	r3, #32
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b00:	69e0      	ldr	r0, [r4, #28]
 8006b02:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8006b06:	f000 8184 	beq.w	8006e12 <UART_SetConfig+0x41a>
    switch (clocksource)
 8006b0a:	2b20      	cmp	r3, #32
 8006b0c:	f200 81ea 	bhi.w	8006ee4 <UART_SetConfig+0x4ec>
 8006b10:	2b20      	cmp	r3, #32
 8006b12:	f200 8236 	bhi.w	8006f82 <UART_SetConfig+0x58a>
 8006b16:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006b1a:	0201      	.short	0x0201
 8006b1c:	02340207 	.word	0x02340207
 8006b20:	020a0234 	.word	0x020a0234
 8006b24:	02340234 	.word	0x02340234
 8006b28:	020f0234 	.word	0x020f0234
 8006b2c:	02340234 	.word	0x02340234
 8006b30:	02340234 	.word	0x02340234
 8006b34:	02340234 	.word	0x02340234
 8006b38:	02140234 	.word	0x02140234
 8006b3c:	02340234 	.word	0x02340234
 8006b40:	02340234 	.word	0x02340234
 8006b44:	02340234 	.word	0x02340234
 8006b48:	02340234 	.word	0x02340234
 8006b4c:	02340234 	.word	0x02340234
 8006b50:	02340234 	.word	0x02340234
 8006b54:	02340234 	.word	0x02340234
 8006b58:	02200234 	.word	0x02200234
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b5c:	2340      	movs	r3, #64	@ 0x40
 8006b5e:	e7cf      	b.n	8006b00 <UART_SetConfig+0x108>
 8006b60:	2380      	movs	r3, #128	@ 0x80
 8006b62:	e7cd      	b.n	8006b00 <UART_SetConfig+0x108>
 8006b64:	4b3a      	ldr	r3, [pc, #232]	@ (8006c50 <UART_SetConfig+0x258>)
 8006b66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b68:	f003 0307 	and.w	r3, r3, #7
 8006b6c:	2b05      	cmp	r3, #5
 8006b6e:	d80f      	bhi.n	8006b90 <UART_SetConfig+0x198>
 8006b70:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006b74:	000600ec 	.word	0x000600ec
 8006b78:	00080218 	.word	0x00080218
 8006b7c:	000c000a 	.word	0x000c000a
 8006b80:	2304      	movs	r3, #4
 8006b82:	e7bd      	b.n	8006b00 <UART_SetConfig+0x108>
 8006b84:	2310      	movs	r3, #16
 8006b86:	e7bb      	b.n	8006b00 <UART_SetConfig+0x108>
 8006b88:	2320      	movs	r3, #32
 8006b8a:	e7b9      	b.n	8006b00 <UART_SetConfig+0x108>
 8006b8c:	2340      	movs	r3, #64	@ 0x40
 8006b8e:	e7b7      	b.n	8006b00 <UART_SetConfig+0x108>
 8006b90:	2380      	movs	r3, #128	@ 0x80
 8006b92:	e7b5      	b.n	8006b00 <UART_SetConfig+0x108>
 8006b94:	4b2e      	ldr	r3, [pc, #184]	@ (8006c50 <UART_SetConfig+0x258>)
 8006b96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b98:	f003 0307 	and.w	r3, r3, #7
 8006b9c:	2b05      	cmp	r3, #5
 8006b9e:	d80f      	bhi.n	8006bc0 <UART_SetConfig+0x1c8>
 8006ba0:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006ba4:	0006010e 	.word	0x0006010e
 8006ba8:	00080202 	.word	0x00080202
 8006bac:	000c000a 	.word	0x000c000a
 8006bb0:	2304      	movs	r3, #4
 8006bb2:	e7a5      	b.n	8006b00 <UART_SetConfig+0x108>
 8006bb4:	2310      	movs	r3, #16
 8006bb6:	e7a3      	b.n	8006b00 <UART_SetConfig+0x108>
 8006bb8:	2320      	movs	r3, #32
 8006bba:	e7a1      	b.n	8006b00 <UART_SetConfig+0x108>
 8006bbc:	2340      	movs	r3, #64	@ 0x40
 8006bbe:	e79f      	b.n	8006b00 <UART_SetConfig+0x108>
 8006bc0:	2380      	movs	r3, #128	@ 0x80
 8006bc2:	e79d      	b.n	8006b00 <UART_SetConfig+0x108>
 8006bc4:	4b22      	ldr	r3, [pc, #136]	@ (8006c50 <UART_SetConfig+0x258>)
 8006bc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bc8:	f003 0307 	and.w	r3, r3, #7
 8006bcc:	2b05      	cmp	r3, #5
 8006bce:	d80f      	bhi.n	8006bf0 <UART_SetConfig+0x1f8>
 8006bd0:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006bd4:	000600f8 	.word	0x000600f8
 8006bd8:	000801ec 	.word	0x000801ec
 8006bdc:	000c000a 	.word	0x000c000a
 8006be0:	2304      	movs	r3, #4
 8006be2:	e78d      	b.n	8006b00 <UART_SetConfig+0x108>
 8006be4:	2310      	movs	r3, #16
 8006be6:	e78b      	b.n	8006b00 <UART_SetConfig+0x108>
 8006be8:	2320      	movs	r3, #32
 8006bea:	e789      	b.n	8006b00 <UART_SetConfig+0x108>
 8006bec:	2340      	movs	r3, #64	@ 0x40
 8006bee:	e787      	b.n	8006b00 <UART_SetConfig+0x108>
 8006bf0:	2380      	movs	r3, #128	@ 0x80
 8006bf2:	e785      	b.n	8006b00 <UART_SetConfig+0x108>
 8006bf4:	4b16      	ldr	r3, [pc, #88]	@ (8006c50 <UART_SetConfig+0x258>)
 8006bf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bf8:	f003 0307 	and.w	r3, r3, #7
 8006bfc:	2b05      	cmp	r3, #5
 8006bfe:	d80f      	bhi.n	8006c20 <UART_SetConfig+0x228>
 8006c00:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006c04:	000600e2 	.word	0x000600e2
 8006c08:	000801d6 	.word	0x000801d6
 8006c0c:	000c000a 	.word	0x000c000a
 8006c10:	2304      	movs	r3, #4
 8006c12:	e775      	b.n	8006b00 <UART_SetConfig+0x108>
 8006c14:	2310      	movs	r3, #16
 8006c16:	e773      	b.n	8006b00 <UART_SetConfig+0x108>
 8006c18:	2320      	movs	r3, #32
 8006c1a:	e771      	b.n	8006b00 <UART_SetConfig+0x108>
 8006c1c:	2340      	movs	r3, #64	@ 0x40
 8006c1e:	e76f      	b.n	8006b00 <UART_SetConfig+0x108>
 8006c20:	2380      	movs	r3, #128	@ 0x80
 8006c22:	e76d      	b.n	8006b00 <UART_SetConfig+0x108>
 8006c24:	cfff69f3 	.word	0xcfff69f3
 8006c28:	58000c00 	.word	0x58000c00
 8006c2c:	11fff4ff 	.word	0x11fff4ff
 8006c30:	40011000 	.word	0x40011000
 8006c34:	40004400 	.word	0x40004400
 8006c38:	40004800 	.word	0x40004800
 8006c3c:	40004c00 	.word	0x40004c00
 8006c40:	40005000 	.word	0x40005000
 8006c44:	40011400 	.word	0x40011400
 8006c48:	40007800 	.word	0x40007800
 8006c4c:	40007c00 	.word	0x40007c00
 8006c50:	58024400 	.word	0x58024400
 8006c54:	4b90      	ldr	r3, [pc, #576]	@ (8006e98 <UART_SetConfig+0x4a0>)
 8006c56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c58:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006c5c:	2b28      	cmp	r3, #40	@ 0x28
 8006c5e:	d832      	bhi.n	8006cc6 <UART_SetConfig+0x2ce>
 8006c60:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006c64:	003100b4 	.word	0x003100b4
 8006c68:	00310031 	.word	0x00310031
 8006c6c:	00310031 	.word	0x00310031
 8006c70:	00310031 	.word	0x00310031
 8006c74:	00310029 	.word	0x00310029
 8006c78:	00310031 	.word	0x00310031
 8006c7c:	00310031 	.word	0x00310031
 8006c80:	00310031 	.word	0x00310031
 8006c84:	003101a8 	.word	0x003101a8
 8006c88:	00310031 	.word	0x00310031
 8006c8c:	00310031 	.word	0x00310031
 8006c90:	00310031 	.word	0x00310031
 8006c94:	0031002b 	.word	0x0031002b
 8006c98:	00310031 	.word	0x00310031
 8006c9c:	00310031 	.word	0x00310031
 8006ca0:	00310031 	.word	0x00310031
 8006ca4:	0031002d 	.word	0x0031002d
 8006ca8:	00310031 	.word	0x00310031
 8006cac:	00310031 	.word	0x00310031
 8006cb0:	00310031 	.word	0x00310031
 8006cb4:	002f      	.short	0x002f
 8006cb6:	2304      	movs	r3, #4
 8006cb8:	e722      	b.n	8006b00 <UART_SetConfig+0x108>
 8006cba:	2310      	movs	r3, #16
 8006cbc:	e720      	b.n	8006b00 <UART_SetConfig+0x108>
 8006cbe:	2320      	movs	r3, #32
 8006cc0:	e71e      	b.n	8006b00 <UART_SetConfig+0x108>
 8006cc2:	2340      	movs	r3, #64	@ 0x40
 8006cc4:	e71c      	b.n	8006b00 <UART_SetConfig+0x108>
 8006cc6:	2380      	movs	r3, #128	@ 0x80
 8006cc8:	e71a      	b.n	8006b00 <UART_SetConfig+0x108>
 8006cca:	4b73      	ldr	r3, [pc, #460]	@ (8006e98 <UART_SetConfig+0x4a0>)
 8006ccc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cce:	f003 0307 	and.w	r3, r3, #7
 8006cd2:	2b05      	cmp	r3, #5
 8006cd4:	d80f      	bhi.n	8006cf6 <UART_SetConfig+0x2fe>
 8006cd6:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006cda:	007b      	.short	0x007b
 8006cdc:	016f0006 	.word	0x016f0006
 8006ce0:	000a0008 	.word	0x000a0008
 8006ce4:	000c      	.short	0x000c
 8006ce6:	2304      	movs	r3, #4
 8006ce8:	e70a      	b.n	8006b00 <UART_SetConfig+0x108>
 8006cea:	2310      	movs	r3, #16
 8006cec:	e708      	b.n	8006b00 <UART_SetConfig+0x108>
 8006cee:	2320      	movs	r3, #32
 8006cf0:	e706      	b.n	8006b00 <UART_SetConfig+0x108>
 8006cf2:	2340      	movs	r3, #64	@ 0x40
 8006cf4:	e704      	b.n	8006b00 <UART_SetConfig+0x108>
 8006cf6:	2380      	movs	r3, #128	@ 0x80
 8006cf8:	e702      	b.n	8006b00 <UART_SetConfig+0x108>
 8006cfa:	4b67      	ldr	r3, [pc, #412]	@ (8006e98 <UART_SetConfig+0x4a0>)
 8006cfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cfe:	f003 0307 	and.w	r3, r3, #7
 8006d02:	2b05      	cmp	r3, #5
 8006d04:	d80f      	bhi.n	8006d26 <UART_SetConfig+0x32e>
 8006d06:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006d0a:	0065      	.short	0x0065
 8006d0c:	01590006 	.word	0x01590006
 8006d10:	000a0008 	.word	0x000a0008
 8006d14:	000c      	.short	0x000c
 8006d16:	2304      	movs	r3, #4
 8006d18:	e6f2      	b.n	8006b00 <UART_SetConfig+0x108>
 8006d1a:	2310      	movs	r3, #16
 8006d1c:	e6f0      	b.n	8006b00 <UART_SetConfig+0x108>
 8006d1e:	2320      	movs	r3, #32
 8006d20:	e6ee      	b.n	8006b00 <UART_SetConfig+0x108>
 8006d22:	2340      	movs	r3, #64	@ 0x40
 8006d24:	e6ec      	b.n	8006b00 <UART_SetConfig+0x108>
 8006d26:	2380      	movs	r3, #128	@ 0x80
 8006d28:	e6ea      	b.n	8006b00 <UART_SetConfig+0x108>
 8006d2a:	f503 330e 	add.w	r3, r3, #145408	@ 0x23800
 8006d2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d30:	f003 0307 	and.w	r3, r3, #7
 8006d34:	2b05      	cmp	r3, #5
 8006d36:	f200 8114 	bhi.w	8006f62 <UART_SetConfig+0x56a>
 8006d3a:	e8df f003 	tbb	[pc, r3]
 8006d3e:	4f4d      	.short	0x4f4d
 8006d40:	65035954 	.word	0x65035954
        pclk = (uint32_t) CSI_VALUE;
 8006d44:	4855      	ldr	r0, [pc, #340]	@ (8006e9c <UART_SetConfig+0x4a4>)
 8006d46:	e010      	b.n	8006d6a <UART_SetConfig+0x372>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d48:	2301      	movs	r3, #1
 8006d4a:	e000      	b.n	8006d4e <UART_SetConfig+0x356>
 8006d4c:	2300      	movs	r3, #0
  if (UART_INSTANCE_LOWPOWER(huart))
 8006d4e:	4954      	ldr	r1, [pc, #336]	@ (8006ea0 <UART_SetConfig+0x4a8>)
 8006d50:	428a      	cmp	r2, r1
 8006d52:	f040 8135 	bne.w	8006fc0 <UART_SetConfig+0x5c8>
    switch (clocksource)
 8006d56:	3b02      	subs	r3, #2
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	2b1e      	cmp	r3, #30
 8006d5c:	f200 8103 	bhi.w	8006f66 <UART_SetConfig+0x56e>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006d60:	f7fe ff3e 	bl	8005be0 <HAL_RCCEx_GetD3PCLK1Freq>
    if (pclk != 0U)
 8006d64:	2800      	cmp	r0, #0
 8006d66:	f000 8100 	beq.w	8006f6a <UART_SetConfig+0x572>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006d6a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8006d6c:	4b4d      	ldr	r3, [pc, #308]	@ (8006ea4 <UART_SetConfig+0x4ac>)
 8006d6e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8006d72:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d76:	6865      	ldr	r5, [r4, #4]
 8006d78:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8006d7c:	4299      	cmp	r1, r3
 8006d7e:	f200 80f6 	bhi.w	8006f6e <UART_SetConfig+0x576>
 8006d82:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8006d86:	f200 80f4 	bhi.w	8006f72 <UART_SetConfig+0x57a>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d8a:	2600      	movs	r6, #0
 8006d8c:	4633      	mov	r3, r6
 8006d8e:	4631      	mov	r1, r6
 8006d90:	f7f9 fafe 	bl	8000390 <__aeabi_uldivmod>
 8006d94:	0209      	lsls	r1, r1, #8
 8006d96:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8006d9a:	0200      	lsls	r0, r0, #8
 8006d9c:	086b      	lsrs	r3, r5, #1
 8006d9e:	18c0      	adds	r0, r0, r3
 8006da0:	462a      	mov	r2, r5
 8006da2:	4633      	mov	r3, r6
 8006da4:	f141 0100 	adc.w	r1, r1, #0
 8006da8:	f7f9 faf2 	bl	8000390 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006dac:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 8006db0:	4b3d      	ldr	r3, [pc, #244]	@ (8006ea8 <UART_SetConfig+0x4b0>)
 8006db2:	429a      	cmp	r2, r3
 8006db4:	f200 80df 	bhi.w	8006f76 <UART_SetConfig+0x57e>
          huart->Instance->BRR = usartdiv;
 8006db8:	6823      	ldr	r3, [r4, #0]
 8006dba:	60d8      	str	r0, [r3, #12]
 8006dbc:	4630      	mov	r0, r6
 8006dbe:	e0e1      	b.n	8006f84 <UART_SetConfig+0x58c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	e7c4      	b.n	8006d4e <UART_SetConfig+0x356>
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	e7c2      	b.n	8006d4e <UART_SetConfig+0x356>
 8006dc8:	2300      	movs	r3, #0
 8006dca:	e7c0      	b.n	8006d4e <UART_SetConfig+0x356>
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e7be      	b.n	8006d4e <UART_SetConfig+0x356>
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	e7bc      	b.n	8006d4e <UART_SetConfig+0x356>
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	e7ba      	b.n	8006d4e <UART_SetConfig+0x356>
 8006dd8:	2302      	movs	r3, #2
 8006dda:	e7b8      	b.n	8006d4e <UART_SetConfig+0x356>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ddc:	a803      	add	r0, sp, #12
 8006dde:	f7fe ff11 	bl	8005c04 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006de2:	9804      	ldr	r0, [sp, #16]
        break;
 8006de4:	e7be      	b.n	8006d64 <UART_SetConfig+0x36c>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006de6:	4668      	mov	r0, sp
 8006de8:	f7ff f80a 	bl	8005e00 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006dec:	9801      	ldr	r0, [sp, #4]
        break;
 8006dee:	e7b9      	b.n	8006d64 <UART_SetConfig+0x36c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006df0:	4b29      	ldr	r3, [pc, #164]	@ (8006e98 <UART_SetConfig+0x4a0>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f013 0f20 	tst.w	r3, #32
 8006df8:	d009      	beq.n	8006e0e <UART_SetConfig+0x416>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006dfa:	4b27      	ldr	r3, [pc, #156]	@ (8006e98 <UART_SetConfig+0x4a0>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006e02:	482a      	ldr	r0, [pc, #168]	@ (8006eac <UART_SetConfig+0x4b4>)
 8006e04:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 8006e06:	e7b0      	b.n	8006d6a <UART_SetConfig+0x372>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e08:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8006e0c:	e7ad      	b.n	8006d6a <UART_SetConfig+0x372>
          pclk = (uint32_t) HSI_VALUE;
 8006e0e:	4827      	ldr	r0, [pc, #156]	@ (8006eac <UART_SetConfig+0x4b4>)
 8006e10:	e7ab      	b.n	8006d6a <UART_SetConfig+0x372>
    switch (clocksource)
 8006e12:	2b20      	cmp	r3, #32
 8006e14:	d815      	bhi.n	8006e42 <UART_SetConfig+0x44a>
 8006e16:	2b20      	cmp	r3, #32
 8006e18:	f200 80af 	bhi.w	8006f7a <UART_SetConfig+0x582>
 8006e1c:	e8df f003 	tbb	[pc, r3]
 8006e20:	adad3832 	.word	0xadad3832
 8006e24:	adadad48 	.word	0xadadad48
 8006e28:	adadad4d 	.word	0xadadad4d
 8006e2c:	adadadad 	.word	0xadadadad
 8006e30:	adadad52 	.word	0xadadad52
 8006e34:	adadadad 	.word	0xadadadad
 8006e38:	adadadad 	.word	0xadadadad
 8006e3c:	adadadad 	.word	0xadadadad
 8006e40:	5e          	.byte	0x5e
 8006e41:	00          	.byte	0x00
 8006e42:	2b40      	cmp	r3, #64	@ 0x40
 8006e44:	d11c      	bne.n	8006e80 <UART_SetConfig+0x488>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e46:	6862      	ldr	r2, [r4, #4]
 8006e48:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006e4a:	4b16      	ldr	r3, [pc, #88]	@ (8006ea4 <UART_SetConfig+0x4ac>)
 8006e4c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8006e50:	fbb0 f0f3 	udiv	r0, r0, r3
 8006e54:	0853      	lsrs	r3, r2, #1
 8006e56:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8006e5a:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e5e:	f1a3 0110 	sub.w	r1, r3, #16
 8006e62:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8006e66:	4291      	cmp	r1, r2
 8006e68:	f200 8089 	bhi.w	8006f7e <UART_SetConfig+0x586>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e6c:	f023 020f 	bic.w	r2, r3, #15
 8006e70:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 8006e72:	6821      	ldr	r1, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e74:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	60cb      	str	r3, [r1, #12]
 8006e7c:	2000      	movs	r0, #0
 8006e7e:	e081      	b.n	8006f84 <UART_SetConfig+0x58c>
    switch (clocksource)
 8006e80:	2001      	movs	r0, #1
 8006e82:	e07f      	b.n	8006f84 <UART_SetConfig+0x58c>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e84:	f7fe f836 	bl	8004ef4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006e88:	2800      	cmp	r0, #0
 8006e8a:	d1dc      	bne.n	8006e46 <UART_SetConfig+0x44e>
 8006e8c:	2000      	movs	r0, #0
 8006e8e:	e079      	b.n	8006f84 <UART_SetConfig+0x58c>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e90:	f7fe f842 	bl	8004f18 <HAL_RCC_GetPCLK2Freq>
        break;
 8006e94:	e7f8      	b.n	8006e88 <UART_SetConfig+0x490>
 8006e96:	bf00      	nop
 8006e98:	58024400 	.word	0x58024400
 8006e9c:	003d0900 	.word	0x003d0900
 8006ea0:	58000c00 	.word	0x58000c00
 8006ea4:	08009e98 	.word	0x08009e98
 8006ea8:	000ffcff 	.word	0x000ffcff
 8006eac:	03d09000 	.word	0x03d09000
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006eb0:	a803      	add	r0, sp, #12
 8006eb2:	f7fe fea7 	bl	8005c04 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006eb6:	9804      	ldr	r0, [sp, #16]
        break;
 8006eb8:	e7e6      	b.n	8006e88 <UART_SetConfig+0x490>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006eba:	4668      	mov	r0, sp
 8006ebc:	f7fe ffa0 	bl	8005e00 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006ec0:	9801      	ldr	r0, [sp, #4]
        break;
 8006ec2:	e7e1      	b.n	8006e88 <UART_SetConfig+0x490>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ec4:	4b41      	ldr	r3, [pc, #260]	@ (8006fcc <UART_SetConfig+0x5d4>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f013 0f20 	tst.w	r3, #32
 8006ecc:	d008      	beq.n	8006ee0 <UART_SetConfig+0x4e8>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006ece:	4b3f      	ldr	r3, [pc, #252]	@ (8006fcc <UART_SetConfig+0x5d4>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006ed6:	483e      	ldr	r0, [pc, #248]	@ (8006fd0 <UART_SetConfig+0x5d8>)
 8006ed8:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 8006eda:	e7b4      	b.n	8006e46 <UART_SetConfig+0x44e>
        pclk = (uint32_t) CSI_VALUE;
 8006edc:	483d      	ldr	r0, [pc, #244]	@ (8006fd4 <UART_SetConfig+0x5dc>)
 8006ede:	e7b2      	b.n	8006e46 <UART_SetConfig+0x44e>
          pclk = (uint32_t) HSI_VALUE;
 8006ee0:	483b      	ldr	r0, [pc, #236]	@ (8006fd0 <UART_SetConfig+0x5d8>)
 8006ee2:	e7b0      	b.n	8006e46 <UART_SetConfig+0x44e>
    switch (clocksource)
 8006ee4:	2b40      	cmp	r3, #64	@ 0x40
 8006ee6:	d117      	bne.n	8006f18 <UART_SetConfig+0x520>
 8006ee8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006eec:	6863      	ldr	r3, [r4, #4]
 8006eee:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006ef0:	4a39      	ldr	r2, [pc, #228]	@ (8006fd8 <UART_SetConfig+0x5e0>)
 8006ef2:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8006ef6:	fbb0 f0f2 	udiv	r0, r0, r2
 8006efa:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8006efe:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f02:	f1a0 0210 	sub.w	r2, r0, #16
 8006f06:	f64f 73ef 	movw	r3, #65519	@ 0xffef
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d844      	bhi.n	8006f98 <UART_SetConfig+0x5a0>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006f0e:	6823      	ldr	r3, [r4, #0]
 8006f10:	b280      	uxth	r0, r0
 8006f12:	60d8      	str	r0, [r3, #12]
 8006f14:	2000      	movs	r0, #0
 8006f16:	e035      	b.n	8006f84 <UART_SetConfig+0x58c>
    switch (clocksource)
 8006f18:	2001      	movs	r0, #1
 8006f1a:	e033      	b.n	8006f84 <UART_SetConfig+0x58c>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f1c:	f7fd ffea 	bl	8004ef4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006f20:	2800      	cmp	r0, #0
 8006f22:	d1e3      	bne.n	8006eec <UART_SetConfig+0x4f4>
 8006f24:	2000      	movs	r0, #0
 8006f26:	e02d      	b.n	8006f84 <UART_SetConfig+0x58c>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f28:	f7fd fff6 	bl	8004f18 <HAL_RCC_GetPCLK2Freq>
        break;
 8006f2c:	e7f8      	b.n	8006f20 <UART_SetConfig+0x528>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f2e:	a803      	add	r0, sp, #12
 8006f30:	f7fe fe68 	bl	8005c04 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006f34:	9804      	ldr	r0, [sp, #16]
        break;
 8006f36:	e7f3      	b.n	8006f20 <UART_SetConfig+0x528>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f38:	4668      	mov	r0, sp
 8006f3a:	f7fe ff61 	bl	8005e00 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006f3e:	9801      	ldr	r0, [sp, #4]
        break;
 8006f40:	e7ee      	b.n	8006f20 <UART_SetConfig+0x528>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f42:	4b22      	ldr	r3, [pc, #136]	@ (8006fcc <UART_SetConfig+0x5d4>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f013 0f20 	tst.w	r3, #32
 8006f4a:	d008      	beq.n	8006f5e <UART_SetConfig+0x566>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006f4c:	4b1f      	ldr	r3, [pc, #124]	@ (8006fcc <UART_SetConfig+0x5d4>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006f54:	481e      	ldr	r0, [pc, #120]	@ (8006fd0 <UART_SetConfig+0x5d8>)
 8006f56:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 8006f58:	e7c8      	b.n	8006eec <UART_SetConfig+0x4f4>
        pclk = (uint32_t) CSI_VALUE;
 8006f5a:	481e      	ldr	r0, [pc, #120]	@ (8006fd4 <UART_SetConfig+0x5dc>)
 8006f5c:	e7c6      	b.n	8006eec <UART_SetConfig+0x4f4>
          pclk = (uint32_t) HSI_VALUE;
 8006f5e:	481c      	ldr	r0, [pc, #112]	@ (8006fd0 <UART_SetConfig+0x5d8>)
 8006f60:	e7c4      	b.n	8006eec <UART_SetConfig+0x4f4>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f62:	2001      	movs	r0, #1
 8006f64:	e00e      	b.n	8006f84 <UART_SetConfig+0x58c>
    switch (clocksource)
 8006f66:	2001      	movs	r0, #1
 8006f68:	e00c      	b.n	8006f84 <UART_SetConfig+0x58c>
 8006f6a:	2000      	movs	r0, #0
 8006f6c:	e00a      	b.n	8006f84 <UART_SetConfig+0x58c>
        ret = HAL_ERROR;
 8006f6e:	2001      	movs	r0, #1
 8006f70:	e008      	b.n	8006f84 <UART_SetConfig+0x58c>
 8006f72:	2001      	movs	r0, #1
 8006f74:	e006      	b.n	8006f84 <UART_SetConfig+0x58c>
          ret = HAL_ERROR;
 8006f76:	2001      	movs	r0, #1
 8006f78:	e004      	b.n	8006f84 <UART_SetConfig+0x58c>
    switch (clocksource)
 8006f7a:	2001      	movs	r0, #1
 8006f7c:	e002      	b.n	8006f84 <UART_SetConfig+0x58c>
        ret = HAL_ERROR;
 8006f7e:	2001      	movs	r0, #1
 8006f80:	e000      	b.n	8006f84 <UART_SetConfig+0x58c>
    switch (clocksource)
 8006f82:	2001      	movs	r0, #1
  huart->NbTxDataToProcess = 1;
 8006f84:	2301      	movs	r3, #1
 8006f86:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006f8a:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 8006f92:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 8006f94:	b006      	add	sp, #24
 8006f96:	bd70      	pop	{r4, r5, r6, pc}
        ret = HAL_ERROR;
 8006f98:	2001      	movs	r0, #1
 8006f9a:	e7f3      	b.n	8006f84 <UART_SetConfig+0x58c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f9c:	2304      	movs	r3, #4
 8006f9e:	e5af      	b.n	8006b00 <UART_SetConfig+0x108>
 8006fa0:	2308      	movs	r3, #8
 8006fa2:	e5ad      	b.n	8006b00 <UART_SetConfig+0x108>
 8006fa4:	2308      	movs	r3, #8
 8006fa6:	e5ab      	b.n	8006b00 <UART_SetConfig+0x108>
 8006fa8:	2308      	movs	r3, #8
 8006faa:	e5a9      	b.n	8006b00 <UART_SetConfig+0x108>
 8006fac:	2308      	movs	r3, #8
 8006fae:	e5a7      	b.n	8006b00 <UART_SetConfig+0x108>
 8006fb0:	2308      	movs	r3, #8
 8006fb2:	e5a5      	b.n	8006b00 <UART_SetConfig+0x108>
 8006fb4:	2308      	movs	r3, #8
 8006fb6:	e5a3      	b.n	8006b00 <UART_SetConfig+0x108>
 8006fb8:	2308      	movs	r3, #8
 8006fba:	e5a1      	b.n	8006b00 <UART_SetConfig+0x108>
 8006fbc:	2308      	movs	r3, #8
 8006fbe:	e59f      	b.n	8006b00 <UART_SetConfig+0x108>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fc0:	69e2      	ldr	r2, [r4, #28]
 8006fc2:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8006fc6:	f47f ada0 	bne.w	8006b0a <UART_SetConfig+0x112>
 8006fca:	e724      	b.n	8006e16 <UART_SetConfig+0x41e>
 8006fcc:	58024400 	.word	0x58024400
 8006fd0:	03d09000 	.word	0x03d09000
 8006fd4:	003d0900 	.word	0x003d0900
 8006fd8:	08009e98 	.word	0x08009e98

08006fdc <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006fdc:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8006fde:	f013 0f01 	tst.w	r3, #1
 8006fe2:	d006      	beq.n	8006ff2 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006fe4:	6802      	ldr	r2, [r0, #0]
 8006fe6:	6853      	ldr	r3, [r2, #4]
 8006fe8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006fec:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8006fee:	430b      	orrs	r3, r1
 8006ff0:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ff2:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8006ff4:	f013 0f02 	tst.w	r3, #2
 8006ff8:	d006      	beq.n	8007008 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006ffa:	6802      	ldr	r2, [r0, #0]
 8006ffc:	6853      	ldr	r3, [r2, #4]
 8006ffe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007002:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8007004:	430b      	orrs	r3, r1
 8007006:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007008:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800700a:	f013 0f04 	tst.w	r3, #4
 800700e:	d006      	beq.n	800701e <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007010:	6802      	ldr	r2, [r0, #0]
 8007012:	6853      	ldr	r3, [r2, #4]
 8007014:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007018:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 800701a:	430b      	orrs	r3, r1
 800701c:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800701e:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8007020:	f013 0f08 	tst.w	r3, #8
 8007024:	d006      	beq.n	8007034 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007026:	6802      	ldr	r2, [r0, #0]
 8007028:	6853      	ldr	r3, [r2, #4]
 800702a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800702e:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8007030:	430b      	orrs	r3, r1
 8007032:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007034:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8007036:	f013 0f10 	tst.w	r3, #16
 800703a:	d006      	beq.n	800704a <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800703c:	6802      	ldr	r2, [r0, #0]
 800703e:	6893      	ldr	r3, [r2, #8]
 8007040:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007044:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8007046:	430b      	orrs	r3, r1
 8007048:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800704a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800704c:	f013 0f20 	tst.w	r3, #32
 8007050:	d006      	beq.n	8007060 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007052:	6802      	ldr	r2, [r0, #0]
 8007054:	6893      	ldr	r3, [r2, #8]
 8007056:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800705a:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 800705c:	430b      	orrs	r3, r1
 800705e:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007060:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8007062:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8007066:	d00a      	beq.n	800707e <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007068:	6802      	ldr	r2, [r0, #0]
 800706a:	6853      	ldr	r3, [r2, #4]
 800706c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007070:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 8007072:	430b      	orrs	r3, r1
 8007074:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007076:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8007078:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800707c:	d00b      	beq.n	8007096 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800707e:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8007080:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007084:	d006      	beq.n	8007094 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007086:	6802      	ldr	r2, [r0, #0]
 8007088:	6853      	ldr	r3, [r2, #4]
 800708a:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800708e:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8007090:	430b      	orrs	r3, r1
 8007092:	6053      	str	r3, [r2, #4]
}
 8007094:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007096:	6802      	ldr	r2, [r0, #0]
 8007098:	6853      	ldr	r3, [r2, #4]
 800709a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800709e:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 80070a0:	430b      	orrs	r3, r1
 80070a2:	6053      	str	r3, [r2, #4]
 80070a4:	e7eb      	b.n	800707e <UART_AdvFeatureConfig+0xa2>

080070a6 <UART_WaitOnFlagUntilTimeout>:
{
 80070a6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070aa:	4680      	mov	r8, r0
 80070ac:	460e      	mov	r6, r1
 80070ae:	4615      	mov	r5, r2
 80070b0:	4699      	mov	r9, r3
 80070b2:	9f08      	ldr	r7, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070b4:	f8d8 3000 	ldr.w	r3, [r8]
 80070b8:	69dc      	ldr	r4, [r3, #28]
 80070ba:	ea36 0404 	bics.w	r4, r6, r4
 80070be:	bf0c      	ite	eq
 80070c0:	2401      	moveq	r4, #1
 80070c2:	2400      	movne	r4, #0
 80070c4:	42ac      	cmp	r4, r5
 80070c6:	d131      	bne.n	800712c <UART_WaitOnFlagUntilTimeout+0x86>
    if (Timeout != HAL_MAX_DELAY)
 80070c8:	f1b7 3fff 	cmp.w	r7, #4294967295
 80070cc:	d0f4      	beq.n	80070b8 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070ce:	f7fa fe4f 	bl	8001d70 <HAL_GetTick>
 80070d2:	eba0 0009 	sub.w	r0, r0, r9
 80070d6:	42b8      	cmp	r0, r7
 80070d8:	d82b      	bhi.n	8007132 <UART_WaitOnFlagUntilTimeout+0x8c>
 80070da:	b357      	cbz	r7, 8007132 <UART_WaitOnFlagUntilTimeout+0x8c>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80070dc:	f8d8 3000 	ldr.w	r3, [r8]
 80070e0:	681a      	ldr	r2, [r3, #0]
 80070e2:	f012 0f04 	tst.w	r2, #4
 80070e6:	d0e5      	beq.n	80070b4 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80070e8:	69da      	ldr	r2, [r3, #28]
 80070ea:	f012 0f08 	tst.w	r2, #8
 80070ee:	d111      	bne.n	8007114 <UART_WaitOnFlagUntilTimeout+0x6e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80070f0:	69da      	ldr	r2, [r3, #28]
 80070f2:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 80070f6:	d0dd      	beq.n	80070b4 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070f8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80070fc:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 80070fe:	4640      	mov	r0, r8
 8007100:	f7ff fa32 	bl	8006568 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007104:	2320      	movs	r3, #32
 8007106:	f8c8 3090 	str.w	r3, [r8, #144]	@ 0x90
          __HAL_UNLOCK(huart);
 800710a:	2300      	movs	r3, #0
 800710c:	f888 3084 	strb.w	r3, [r8, #132]	@ 0x84
          return HAL_TIMEOUT;
 8007110:	2003      	movs	r0, #3
 8007112:	e00c      	b.n	800712e <UART_WaitOnFlagUntilTimeout+0x88>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007114:	2408      	movs	r4, #8
 8007116:	621c      	str	r4, [r3, #32]
           UART_EndRxTransfer(huart);
 8007118:	4640      	mov	r0, r8
 800711a:	f7ff fa25 	bl	8006568 <UART_EndRxTransfer>
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800711e:	f8c8 4090 	str.w	r4, [r8, #144]	@ 0x90
           __HAL_UNLOCK(huart);
 8007122:	2300      	movs	r3, #0
 8007124:	f888 3084 	strb.w	r3, [r8, #132]	@ 0x84
           return HAL_ERROR;
 8007128:	2001      	movs	r0, #1
 800712a:	e000      	b.n	800712e <UART_WaitOnFlagUntilTimeout+0x88>
  return HAL_OK;
 800712c:	2000      	movs	r0, #0
}
 800712e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8007132:	2003      	movs	r0, #3
 8007134:	e7fb      	b.n	800712e <UART_WaitOnFlagUntilTimeout+0x88>

08007136 <HAL_UART_Transmit>:
{
 8007136:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800713a:	b082      	sub	sp, #8
 800713c:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800713e:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8007142:	2b20      	cmp	r3, #32
 8007144:	d160      	bne.n	8007208 <HAL_UART_Transmit+0xd2>
 8007146:	4604      	mov	r4, r0
 8007148:	460d      	mov	r5, r1
 800714a:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 800714c:	2900      	cmp	r1, #0
 800714e:	d05f      	beq.n	8007210 <HAL_UART_Transmit+0xda>
 8007150:	2a00      	cmp	r2, #0
 8007152:	d05d      	beq.n	8007210 <HAL_UART_Transmit+0xda>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007154:	2300      	movs	r3, #0
 8007156:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800715a:	2321      	movs	r3, #33	@ 0x21
 800715c:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    tickstart = HAL_GetTick();
 8007160:	f7fa fe06 	bl	8001d70 <HAL_GetTick>
 8007164:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8007166:	f8a4 8054 	strh.w	r8, [r4, #84]	@ 0x54
    huart->TxXferCount = Size;
 800716a:	f8a4 8056 	strh.w	r8, [r4, #86]	@ 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800716e:	68a3      	ldr	r3, [r4, #8]
 8007170:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007174:	d00a      	beq.n	800718c <HAL_UART_Transmit+0x56>
      pdata16bits = NULL;
 8007176:	f04f 0a00 	mov.w	sl, #0
    while (huart->TxXferCount > 0U)
 800717a:	f8b4 3056 	ldrh.w	r3, [r4, #86]	@ 0x56
 800717e:	b29b      	uxth	r3, r3
 8007180:	b38b      	cbz	r3, 80071e6 <HAL_UART_Transmit+0xb0>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007182:	f04f 0900 	mov.w	r9, #0
 8007186:	f04f 0880 	mov.w	r8, #128	@ 0x80
 800718a:	e01c      	b.n	80071c6 <HAL_UART_Transmit+0x90>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800718c:	6923      	ldr	r3, [r4, #16]
 800718e:	b113      	cbz	r3, 8007196 <HAL_UART_Transmit+0x60>
      pdata16bits = NULL;
 8007190:	f04f 0a00 	mov.w	sl, #0
 8007194:	e7f1      	b.n	800717a <HAL_UART_Transmit+0x44>
      pdata16bits = (const uint16_t *) pData;
 8007196:	46aa      	mov	sl, r5
      pdata8bits  = NULL;
 8007198:	2500      	movs	r5, #0
 800719a:	e7ee      	b.n	800717a <HAL_UART_Transmit+0x44>
        huart->gState = HAL_UART_STATE_READY;
 800719c:	2320      	movs	r3, #32
 800719e:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
        return HAL_TIMEOUT;
 80071a2:	2003      	movs	r0, #3
 80071a4:	e031      	b.n	800720a <HAL_UART_Transmit+0xd4>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80071a6:	6822      	ldr	r2, [r4, #0]
 80071a8:	f83a 3b02 	ldrh.w	r3, [sl], #2
 80071ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071b0:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 80071b2:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
 80071b6:	3a01      	subs	r2, #1
 80071b8:	b292      	uxth	r2, r2
 80071ba:	f8a4 2056 	strh.w	r2, [r4, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80071be:	f8b4 3056 	ldrh.w	r3, [r4, #86]	@ 0x56
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	b17b      	cbz	r3, 80071e6 <HAL_UART_Transmit+0xb0>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80071c6:	9600      	str	r6, [sp, #0]
 80071c8:	463b      	mov	r3, r7
 80071ca:	464a      	mov	r2, r9
 80071cc:	4641      	mov	r1, r8
 80071ce:	4620      	mov	r0, r4
 80071d0:	f7ff ff69 	bl	80070a6 <UART_WaitOnFlagUntilTimeout>
 80071d4:	2800      	cmp	r0, #0
 80071d6:	d1e1      	bne.n	800719c <HAL_UART_Transmit+0x66>
      if (pdata8bits == NULL)
 80071d8:	2d00      	cmp	r5, #0
 80071da:	d0e4      	beq.n	80071a6 <HAL_UART_Transmit+0x70>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80071dc:	6823      	ldr	r3, [r4, #0]
 80071de:	f815 2b01 	ldrb.w	r2, [r5], #1
 80071e2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80071e4:	e7e5      	b.n	80071b2 <HAL_UART_Transmit+0x7c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80071e6:	9600      	str	r6, [sp, #0]
 80071e8:	463b      	mov	r3, r7
 80071ea:	2200      	movs	r2, #0
 80071ec:	2140      	movs	r1, #64	@ 0x40
 80071ee:	4620      	mov	r0, r4
 80071f0:	f7ff ff59 	bl	80070a6 <UART_WaitOnFlagUntilTimeout>
 80071f4:	b918      	cbnz	r0, 80071fe <HAL_UART_Transmit+0xc8>
    huart->gState = HAL_UART_STATE_READY;
 80071f6:	2320      	movs	r3, #32
 80071f8:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
    return HAL_OK;
 80071fc:	e005      	b.n	800720a <HAL_UART_Transmit+0xd4>
      huart->gState = HAL_UART_STATE_READY;
 80071fe:	2320      	movs	r3, #32
 8007200:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
 8007204:	2003      	movs	r0, #3
 8007206:	e000      	b.n	800720a <HAL_UART_Transmit+0xd4>
    return HAL_BUSY;
 8007208:	2002      	movs	r0, #2
}
 800720a:	b002      	add	sp, #8
 800720c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return  HAL_ERROR;
 8007210:	2001      	movs	r0, #1
 8007212:	e7fa      	b.n	800720a <HAL_UART_Transmit+0xd4>

08007214 <UART_CheckIdleState>:
{
 8007214:	b530      	push	{r4, r5, lr}
 8007216:	b083      	sub	sp, #12
 8007218:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800721a:	2300      	movs	r3, #0
 800721c:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
 8007220:	f7fa fda6 	bl	8001d70 <HAL_GetTick>
 8007224:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007226:	6822      	ldr	r2, [r4, #0]
 8007228:	6812      	ldr	r2, [r2, #0]
 800722a:	f012 0f08 	tst.w	r2, #8
 800722e:	d111      	bne.n	8007254 <UART_CheckIdleState+0x40>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007230:	6823      	ldr	r3, [r4, #0]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f013 0f04 	tst.w	r3, #4
 8007238:	d126      	bne.n	8007288 <UART_CheckIdleState+0x74>
  huart->gState = HAL_UART_STATE_READY;
 800723a:	2320      	movs	r3, #32
 800723c:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007240:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007244:	2000      	movs	r0, #0
 8007246:	66e0      	str	r0, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007248:	6720      	str	r0, [r4, #112]	@ 0x70
      __HAL_UNLOCK(huart);
 800724a:	2300      	movs	r3, #0
 800724c:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 8007250:	b003      	add	sp, #12
 8007252:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007254:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007258:	9300      	str	r3, [sp, #0]
 800725a:	4603      	mov	r3, r0
 800725c:	2200      	movs	r2, #0
 800725e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007262:	4620      	mov	r0, r4
 8007264:	f7ff ff1f 	bl	80070a6 <UART_WaitOnFlagUntilTimeout>
 8007268:	2800      	cmp	r0, #0
 800726a:	d0e1      	beq.n	8007230 <UART_CheckIdleState+0x1c>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800726c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800726e:	e852 3f00 	ldrex	r3, [r2]
 8007272:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007276:	e842 3100 	strex	r1, r3, [r2]
 800727a:	2900      	cmp	r1, #0
 800727c:	d1f6      	bne.n	800726c <UART_CheckIdleState+0x58>
      huart->gState = HAL_UART_STATE_READY;
 800727e:	2320      	movs	r3, #32
 8007280:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
 8007284:	2003      	movs	r0, #3
 8007286:	e7e0      	b.n	800724a <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007288:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800728c:	9300      	str	r3, [sp, #0]
 800728e:	462b      	mov	r3, r5
 8007290:	2200      	movs	r2, #0
 8007292:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007296:	4620      	mov	r0, r4
 8007298:	f7ff ff05 	bl	80070a6 <UART_WaitOnFlagUntilTimeout>
 800729c:	2800      	cmp	r0, #0
 800729e:	d0cc      	beq.n	800723a <UART_CheckIdleState+0x26>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80072a0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a2:	e852 3f00 	ldrex	r3, [r2]
 80072a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072aa:	e842 3100 	strex	r1, r3, [r2]
 80072ae:	2900      	cmp	r1, #0
 80072b0:	d1f6      	bne.n	80072a0 <UART_CheckIdleState+0x8c>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072b2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b4:	f102 0308 	add.w	r3, r2, #8
 80072b8:	e853 3f00 	ldrex	r3, [r3]
 80072bc:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c0:	3208      	adds	r2, #8
 80072c2:	e842 3100 	strex	r1, r3, [r2]
 80072c6:	2900      	cmp	r1, #0
 80072c8:	d1f3      	bne.n	80072b2 <UART_CheckIdleState+0x9e>
      huart->RxState = HAL_UART_STATE_READY;
 80072ca:	2320      	movs	r3, #32
 80072cc:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
 80072d0:	2003      	movs	r0, #3
 80072d2:	e7ba      	b.n	800724a <UART_CheckIdleState+0x36>

080072d4 <HAL_UART_Init>:
  if (huart == NULL)
 80072d4:	b378      	cbz	r0, 8007336 <HAL_UART_Init+0x62>
{
 80072d6:	b510      	push	{r4, lr}
 80072d8:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80072da:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 80072de:	b30b      	cbz	r3, 8007324 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80072e0:	2324      	movs	r3, #36	@ 0x24
 80072e2:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 80072e6:	6822      	ldr	r2, [r4, #0]
 80072e8:	6813      	ldr	r3, [r2, #0]
 80072ea:	f023 0301 	bic.w	r3, r3, #1
 80072ee:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80072f0:	4620      	mov	r0, r4
 80072f2:	f7ff fb81 	bl	80069f8 <UART_SetConfig>
 80072f6:	2801      	cmp	r0, #1
 80072f8:	d013      	beq.n	8007322 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80072fa:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80072fc:	b9bb      	cbnz	r3, 800732e <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072fe:	6822      	ldr	r2, [r4, #0]
 8007300:	6853      	ldr	r3, [r2, #4]
 8007302:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8007306:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007308:	6822      	ldr	r2, [r4, #0]
 800730a:	6893      	ldr	r3, [r2, #8]
 800730c:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8007310:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8007312:	6822      	ldr	r2, [r4, #0]
 8007314:	6813      	ldr	r3, [r2, #0]
 8007316:	f043 0301 	orr.w	r3, r3, #1
 800731a:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800731c:	4620      	mov	r0, r4
 800731e:	f7ff ff79 	bl	8007214 <UART_CheckIdleState>
}
 8007322:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8007324:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 8007328:	f7fa fa20 	bl	800176c <HAL_UART_MspInit>
 800732c:	e7d8      	b.n	80072e0 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 800732e:	4620      	mov	r0, r4
 8007330:	f7ff fe54 	bl	8006fdc <UART_AdvFeatureConfig>
 8007334:	e7e3      	b.n	80072fe <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8007336:	2001      	movs	r0, #1
}
 8007338:	4770      	bx	lr
	...

0800733c <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800733c:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 800733e:	b92b      	cbnz	r3, 800734c <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 8007340:	2301      	movs	r3, #1
 8007342:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007346:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
 800734a:	4770      	bx	lr
{
 800734c:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800734e:	6803      	ldr	r3, [r0, #0]
 8007350:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007352:	6899      	ldr	r1, [r3, #8]
 8007354:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007356:	4d0a      	ldr	r5, [pc, #40]	@ (8007380 <UARTEx_SetNbDataToProcess+0x44>)
 8007358:	5c6b      	ldrb	r3, [r5, r1]
 800735a:	011b      	lsls	r3, r3, #4
                               (uint16_t)denominator[tx_fifo_threshold];
 800735c:	4c09      	ldr	r4, [pc, #36]	@ (8007384 <UARTEx_SetNbDataToProcess+0x48>)
 800735e:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007360:	fb93 f3f1 	sdiv	r3, r3, r1
 8007364:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007368:	f3c2 6242 	ubfx	r2, r2, #25, #3
 800736c:	5cab      	ldrb	r3, [r5, r2]
 800736e:	011b      	lsls	r3, r3, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 8007370:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007372:	fb93 f3f2 	sdiv	r3, r3, r2
    huart->NbRxDataToProcess = 1U;
 8007376:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
  }
}
 800737a:	bc30      	pop	{r4, r5}
 800737c:	4770      	bx	lr
 800737e:	bf00      	nop
 8007380:	08009eb8 	.word	0x08009eb8
 8007384:	08009eb0 	.word	0x08009eb0

08007388 <HAL_UARTEx_WakeupCallback>:
}
 8007388:	4770      	bx	lr

0800738a <HAL_UARTEx_RxFifoFullCallback>:
}
 800738a:	4770      	bx	lr

0800738c <HAL_UARTEx_TxFifoEmptyCallback>:
}
 800738c:	4770      	bx	lr

0800738e <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 800738e:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8007392:	2b01      	cmp	r3, #1
 8007394:	d018      	beq.n	80073c8 <HAL_UARTEx_DisableFifoMode+0x3a>
 8007396:	2301      	movs	r3, #1
 8007398:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800739c:	2324      	movs	r3, #36	@ 0x24
 800739e:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80073a2:	6803      	ldr	r3, [r0, #0]
 80073a4:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80073a6:	6819      	ldr	r1, [r3, #0]
 80073a8:	f021 0101 	bic.w	r1, r1, #1
 80073ac:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80073ae:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80073b2:	2300      	movs	r3, #0
 80073b4:	6643      	str	r3, [r0, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80073b6:	6801      	ldr	r1, [r0, #0]
 80073b8:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 80073ba:	2220      	movs	r2, #32
 80073bc:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 80073c0:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  return HAL_OK;
 80073c4:	4618      	mov	r0, r3
 80073c6:	4770      	bx	lr
  __HAL_LOCK(huart);
 80073c8:	2002      	movs	r0, #2
}
 80073ca:	4770      	bx	lr

080073cc <HAL_UARTEx_SetTxFifoThreshold>:
{
 80073cc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 80073ce:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 80073d2:	2b01      	cmp	r3, #1
 80073d4:	d01d      	beq.n	8007412 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 80073d6:	4604      	mov	r4, r0
 80073d8:	2301      	movs	r3, #1
 80073da:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 80073de:	2324      	movs	r3, #36	@ 0x24
 80073e0:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80073e4:	6803      	ldr	r3, [r0, #0]
 80073e6:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	f022 0201 	bic.w	r2, r2, #1
 80073ee:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80073f0:	6802      	ldr	r2, [r0, #0]
 80073f2:	6893      	ldr	r3, [r2, #8]
 80073f4:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 80073f8:	4319      	orrs	r1, r3
 80073fa:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 80073fc:	f7ff ff9e 	bl	800733c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007400:	6823      	ldr	r3, [r4, #0]
 8007402:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8007404:	2320      	movs	r3, #32
 8007406:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 800740a:	2000      	movs	r0, #0
 800740c:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 8007410:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8007412:	2002      	movs	r0, #2
 8007414:	e7fc      	b.n	8007410 <HAL_UARTEx_SetTxFifoThreshold+0x44>

08007416 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8007416:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8007418:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 800741c:	2b01      	cmp	r3, #1
 800741e:	d01d      	beq.n	800745c <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8007420:	4604      	mov	r4, r0
 8007422:	2301      	movs	r3, #1
 8007424:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8007428:	2324      	movs	r3, #36	@ 0x24
 800742a:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800742e:	6803      	ldr	r3, [r0, #0]
 8007430:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	f022 0201 	bic.w	r2, r2, #1
 8007438:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800743a:	6802      	ldr	r2, [r0, #0]
 800743c:	6893      	ldr	r3, [r2, #8]
 800743e:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 8007442:	4319      	orrs	r1, r3
 8007444:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8007446:	f7ff ff79 	bl	800733c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800744a:	6823      	ldr	r3, [r4, #0]
 800744c:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800744e:	2320      	movs	r3, #32
 8007450:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8007454:	2000      	movs	r0, #0
 8007456:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 800745a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800745c:	2002      	movs	r0, #2
 800745e:	e7fc      	b.n	800745a <HAL_UARTEx_SetRxFifoThreshold+0x44>

08007460 <__cvt>:
 8007460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007462:	ed2d 8b02 	vpush	{d8}
 8007466:	eeb0 8b40 	vmov.f64	d8, d0
 800746a:	b085      	sub	sp, #20
 800746c:	4617      	mov	r7, r2
 800746e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8007470:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007472:	ee18 2a90 	vmov	r2, s17
 8007476:	f025 0520 	bic.w	r5, r5, #32
 800747a:	2a00      	cmp	r2, #0
 800747c:	bfb6      	itet	lt
 800747e:	222d      	movlt	r2, #45	@ 0x2d
 8007480:	2200      	movge	r2, #0
 8007482:	eeb1 8b40 	vneglt.f64	d8, d0
 8007486:	2d46      	cmp	r5, #70	@ 0x46
 8007488:	460c      	mov	r4, r1
 800748a:	701a      	strb	r2, [r3, #0]
 800748c:	d004      	beq.n	8007498 <__cvt+0x38>
 800748e:	2d45      	cmp	r5, #69	@ 0x45
 8007490:	d100      	bne.n	8007494 <__cvt+0x34>
 8007492:	3401      	adds	r4, #1
 8007494:	2102      	movs	r1, #2
 8007496:	e000      	b.n	800749a <__cvt+0x3a>
 8007498:	2103      	movs	r1, #3
 800749a:	ab03      	add	r3, sp, #12
 800749c:	9301      	str	r3, [sp, #4]
 800749e:	ab02      	add	r3, sp, #8
 80074a0:	9300      	str	r3, [sp, #0]
 80074a2:	4622      	mov	r2, r4
 80074a4:	4633      	mov	r3, r6
 80074a6:	eeb0 0b48 	vmov.f64	d0, d8
 80074aa:	f000 ff31 	bl	8008310 <_dtoa_r>
 80074ae:	2d47      	cmp	r5, #71	@ 0x47
 80074b0:	d114      	bne.n	80074dc <__cvt+0x7c>
 80074b2:	07fb      	lsls	r3, r7, #31
 80074b4:	d50a      	bpl.n	80074cc <__cvt+0x6c>
 80074b6:	1902      	adds	r2, r0, r4
 80074b8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80074bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074c0:	bf08      	it	eq
 80074c2:	9203      	streq	r2, [sp, #12]
 80074c4:	2130      	movs	r1, #48	@ 0x30
 80074c6:	9b03      	ldr	r3, [sp, #12]
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d319      	bcc.n	8007500 <__cvt+0xa0>
 80074cc:	9b03      	ldr	r3, [sp, #12]
 80074ce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80074d0:	1a1b      	subs	r3, r3, r0
 80074d2:	6013      	str	r3, [r2, #0]
 80074d4:	b005      	add	sp, #20
 80074d6:	ecbd 8b02 	vpop	{d8}
 80074da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074dc:	2d46      	cmp	r5, #70	@ 0x46
 80074de:	eb00 0204 	add.w	r2, r0, r4
 80074e2:	d1e9      	bne.n	80074b8 <__cvt+0x58>
 80074e4:	7803      	ldrb	r3, [r0, #0]
 80074e6:	2b30      	cmp	r3, #48	@ 0x30
 80074e8:	d107      	bne.n	80074fa <__cvt+0x9a>
 80074ea:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80074ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074f2:	bf1c      	itt	ne
 80074f4:	f1c4 0401 	rsbne	r4, r4, #1
 80074f8:	6034      	strne	r4, [r6, #0]
 80074fa:	6833      	ldr	r3, [r6, #0]
 80074fc:	441a      	add	r2, r3
 80074fe:	e7db      	b.n	80074b8 <__cvt+0x58>
 8007500:	1c5c      	adds	r4, r3, #1
 8007502:	9403      	str	r4, [sp, #12]
 8007504:	7019      	strb	r1, [r3, #0]
 8007506:	e7de      	b.n	80074c6 <__cvt+0x66>

08007508 <__exponent>:
 8007508:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800750a:	2900      	cmp	r1, #0
 800750c:	bfba      	itte	lt
 800750e:	4249      	neglt	r1, r1
 8007510:	232d      	movlt	r3, #45	@ 0x2d
 8007512:	232b      	movge	r3, #43	@ 0x2b
 8007514:	2909      	cmp	r1, #9
 8007516:	7002      	strb	r2, [r0, #0]
 8007518:	7043      	strb	r3, [r0, #1]
 800751a:	dd29      	ble.n	8007570 <__exponent+0x68>
 800751c:	f10d 0307 	add.w	r3, sp, #7
 8007520:	461d      	mov	r5, r3
 8007522:	270a      	movs	r7, #10
 8007524:	461a      	mov	r2, r3
 8007526:	fbb1 f6f7 	udiv	r6, r1, r7
 800752a:	fb07 1416 	mls	r4, r7, r6, r1
 800752e:	3430      	adds	r4, #48	@ 0x30
 8007530:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007534:	460c      	mov	r4, r1
 8007536:	2c63      	cmp	r4, #99	@ 0x63
 8007538:	f103 33ff 	add.w	r3, r3, #4294967295
 800753c:	4631      	mov	r1, r6
 800753e:	dcf1      	bgt.n	8007524 <__exponent+0x1c>
 8007540:	3130      	adds	r1, #48	@ 0x30
 8007542:	1e94      	subs	r4, r2, #2
 8007544:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007548:	1c41      	adds	r1, r0, #1
 800754a:	4623      	mov	r3, r4
 800754c:	42ab      	cmp	r3, r5
 800754e:	d30a      	bcc.n	8007566 <__exponent+0x5e>
 8007550:	f10d 0309 	add.w	r3, sp, #9
 8007554:	1a9b      	subs	r3, r3, r2
 8007556:	42ac      	cmp	r4, r5
 8007558:	bf88      	it	hi
 800755a:	2300      	movhi	r3, #0
 800755c:	3302      	adds	r3, #2
 800755e:	4403      	add	r3, r0
 8007560:	1a18      	subs	r0, r3, r0
 8007562:	b003      	add	sp, #12
 8007564:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007566:	f813 6b01 	ldrb.w	r6, [r3], #1
 800756a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800756e:	e7ed      	b.n	800754c <__exponent+0x44>
 8007570:	2330      	movs	r3, #48	@ 0x30
 8007572:	3130      	adds	r1, #48	@ 0x30
 8007574:	7083      	strb	r3, [r0, #2]
 8007576:	70c1      	strb	r1, [r0, #3]
 8007578:	1d03      	adds	r3, r0, #4
 800757a:	e7f1      	b.n	8007560 <__exponent+0x58>
 800757c:	0000      	movs	r0, r0
	...

08007580 <_printf_float>:
 8007580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007584:	b08d      	sub	sp, #52	@ 0x34
 8007586:	460c      	mov	r4, r1
 8007588:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800758c:	4616      	mov	r6, r2
 800758e:	461f      	mov	r7, r3
 8007590:	4605      	mov	r5, r0
 8007592:	f000 fdaf 	bl	80080f4 <_localeconv_r>
 8007596:	f8d0 b000 	ldr.w	fp, [r0]
 800759a:	4658      	mov	r0, fp
 800759c:	f7f8 fef0 	bl	8000380 <strlen>
 80075a0:	2300      	movs	r3, #0
 80075a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80075a4:	f8d8 3000 	ldr.w	r3, [r8]
 80075a8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80075ac:	6822      	ldr	r2, [r4, #0]
 80075ae:	9005      	str	r0, [sp, #20]
 80075b0:	3307      	adds	r3, #7
 80075b2:	f023 0307 	bic.w	r3, r3, #7
 80075b6:	f103 0108 	add.w	r1, r3, #8
 80075ba:	f8c8 1000 	str.w	r1, [r8]
 80075be:	ed93 0b00 	vldr	d0, [r3]
 80075c2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8007820 <_printf_float+0x2a0>
 80075c6:	eeb0 7bc0 	vabs.f64	d7, d0
 80075ca:	eeb4 7b46 	vcmp.f64	d7, d6
 80075ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075d2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 80075d6:	dd24      	ble.n	8007622 <_printf_float+0xa2>
 80075d8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80075dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075e0:	d502      	bpl.n	80075e8 <_printf_float+0x68>
 80075e2:	232d      	movs	r3, #45	@ 0x2d
 80075e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80075e8:	498f      	ldr	r1, [pc, #572]	@ (8007828 <_printf_float+0x2a8>)
 80075ea:	4b90      	ldr	r3, [pc, #576]	@ (800782c <_printf_float+0x2ac>)
 80075ec:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80075f0:	bf94      	ite	ls
 80075f2:	4688      	movls	r8, r1
 80075f4:	4698      	movhi	r8, r3
 80075f6:	f022 0204 	bic.w	r2, r2, #4
 80075fa:	2303      	movs	r3, #3
 80075fc:	6123      	str	r3, [r4, #16]
 80075fe:	6022      	str	r2, [r4, #0]
 8007600:	f04f 0a00 	mov.w	sl, #0
 8007604:	9700      	str	r7, [sp, #0]
 8007606:	4633      	mov	r3, r6
 8007608:	aa0b      	add	r2, sp, #44	@ 0x2c
 800760a:	4621      	mov	r1, r4
 800760c:	4628      	mov	r0, r5
 800760e:	f000 f9d1 	bl	80079b4 <_printf_common>
 8007612:	3001      	adds	r0, #1
 8007614:	f040 8089 	bne.w	800772a <_printf_float+0x1aa>
 8007618:	f04f 30ff 	mov.w	r0, #4294967295
 800761c:	b00d      	add	sp, #52	@ 0x34
 800761e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007622:	eeb4 0b40 	vcmp.f64	d0, d0
 8007626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800762a:	d709      	bvc.n	8007640 <_printf_float+0xc0>
 800762c:	ee10 3a90 	vmov	r3, s1
 8007630:	2b00      	cmp	r3, #0
 8007632:	bfbc      	itt	lt
 8007634:	232d      	movlt	r3, #45	@ 0x2d
 8007636:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800763a:	497d      	ldr	r1, [pc, #500]	@ (8007830 <_printf_float+0x2b0>)
 800763c:	4b7d      	ldr	r3, [pc, #500]	@ (8007834 <_printf_float+0x2b4>)
 800763e:	e7d5      	b.n	80075ec <_printf_float+0x6c>
 8007640:	6863      	ldr	r3, [r4, #4]
 8007642:	1c59      	adds	r1, r3, #1
 8007644:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8007648:	d139      	bne.n	80076be <_printf_float+0x13e>
 800764a:	2306      	movs	r3, #6
 800764c:	6063      	str	r3, [r4, #4]
 800764e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007652:	2300      	movs	r3, #0
 8007654:	6022      	str	r2, [r4, #0]
 8007656:	9303      	str	r3, [sp, #12]
 8007658:	ab0a      	add	r3, sp, #40	@ 0x28
 800765a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800765e:	ab09      	add	r3, sp, #36	@ 0x24
 8007660:	9300      	str	r3, [sp, #0]
 8007662:	6861      	ldr	r1, [r4, #4]
 8007664:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007668:	4628      	mov	r0, r5
 800766a:	f7ff fef9 	bl	8007460 <__cvt>
 800766e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007672:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007674:	4680      	mov	r8, r0
 8007676:	d129      	bne.n	80076cc <_printf_float+0x14c>
 8007678:	1cc8      	adds	r0, r1, #3
 800767a:	db02      	blt.n	8007682 <_printf_float+0x102>
 800767c:	6863      	ldr	r3, [r4, #4]
 800767e:	4299      	cmp	r1, r3
 8007680:	dd41      	ble.n	8007706 <_printf_float+0x186>
 8007682:	f1a9 0902 	sub.w	r9, r9, #2
 8007686:	fa5f f989 	uxtb.w	r9, r9
 800768a:	3901      	subs	r1, #1
 800768c:	464a      	mov	r2, r9
 800768e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007692:	9109      	str	r1, [sp, #36]	@ 0x24
 8007694:	f7ff ff38 	bl	8007508 <__exponent>
 8007698:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800769a:	1813      	adds	r3, r2, r0
 800769c:	2a01      	cmp	r2, #1
 800769e:	4682      	mov	sl, r0
 80076a0:	6123      	str	r3, [r4, #16]
 80076a2:	dc02      	bgt.n	80076aa <_printf_float+0x12a>
 80076a4:	6822      	ldr	r2, [r4, #0]
 80076a6:	07d2      	lsls	r2, r2, #31
 80076a8:	d501      	bpl.n	80076ae <_printf_float+0x12e>
 80076aa:	3301      	adds	r3, #1
 80076ac:	6123      	str	r3, [r4, #16]
 80076ae:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d0a6      	beq.n	8007604 <_printf_float+0x84>
 80076b6:	232d      	movs	r3, #45	@ 0x2d
 80076b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80076bc:	e7a2      	b.n	8007604 <_printf_float+0x84>
 80076be:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80076c2:	d1c4      	bne.n	800764e <_printf_float+0xce>
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d1c2      	bne.n	800764e <_printf_float+0xce>
 80076c8:	2301      	movs	r3, #1
 80076ca:	e7bf      	b.n	800764c <_printf_float+0xcc>
 80076cc:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80076d0:	d9db      	bls.n	800768a <_printf_float+0x10a>
 80076d2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 80076d6:	d118      	bne.n	800770a <_printf_float+0x18a>
 80076d8:	2900      	cmp	r1, #0
 80076da:	6863      	ldr	r3, [r4, #4]
 80076dc:	dd0b      	ble.n	80076f6 <_printf_float+0x176>
 80076de:	6121      	str	r1, [r4, #16]
 80076e0:	b913      	cbnz	r3, 80076e8 <_printf_float+0x168>
 80076e2:	6822      	ldr	r2, [r4, #0]
 80076e4:	07d0      	lsls	r0, r2, #31
 80076e6:	d502      	bpl.n	80076ee <_printf_float+0x16e>
 80076e8:	3301      	adds	r3, #1
 80076ea:	440b      	add	r3, r1
 80076ec:	6123      	str	r3, [r4, #16]
 80076ee:	65a1      	str	r1, [r4, #88]	@ 0x58
 80076f0:	f04f 0a00 	mov.w	sl, #0
 80076f4:	e7db      	b.n	80076ae <_printf_float+0x12e>
 80076f6:	b913      	cbnz	r3, 80076fe <_printf_float+0x17e>
 80076f8:	6822      	ldr	r2, [r4, #0]
 80076fa:	07d2      	lsls	r2, r2, #31
 80076fc:	d501      	bpl.n	8007702 <_printf_float+0x182>
 80076fe:	3302      	adds	r3, #2
 8007700:	e7f4      	b.n	80076ec <_printf_float+0x16c>
 8007702:	2301      	movs	r3, #1
 8007704:	e7f2      	b.n	80076ec <_printf_float+0x16c>
 8007706:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800770a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800770c:	4299      	cmp	r1, r3
 800770e:	db05      	blt.n	800771c <_printf_float+0x19c>
 8007710:	6823      	ldr	r3, [r4, #0]
 8007712:	6121      	str	r1, [r4, #16]
 8007714:	07d8      	lsls	r0, r3, #31
 8007716:	d5ea      	bpl.n	80076ee <_printf_float+0x16e>
 8007718:	1c4b      	adds	r3, r1, #1
 800771a:	e7e7      	b.n	80076ec <_printf_float+0x16c>
 800771c:	2900      	cmp	r1, #0
 800771e:	bfd4      	ite	le
 8007720:	f1c1 0202 	rsble	r2, r1, #2
 8007724:	2201      	movgt	r2, #1
 8007726:	4413      	add	r3, r2
 8007728:	e7e0      	b.n	80076ec <_printf_float+0x16c>
 800772a:	6823      	ldr	r3, [r4, #0]
 800772c:	055a      	lsls	r2, r3, #21
 800772e:	d407      	bmi.n	8007740 <_printf_float+0x1c0>
 8007730:	6923      	ldr	r3, [r4, #16]
 8007732:	4642      	mov	r2, r8
 8007734:	4631      	mov	r1, r6
 8007736:	4628      	mov	r0, r5
 8007738:	47b8      	blx	r7
 800773a:	3001      	adds	r0, #1
 800773c:	d12a      	bne.n	8007794 <_printf_float+0x214>
 800773e:	e76b      	b.n	8007618 <_printf_float+0x98>
 8007740:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8007744:	f240 80e0 	bls.w	8007908 <_printf_float+0x388>
 8007748:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800774c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007754:	d133      	bne.n	80077be <_printf_float+0x23e>
 8007756:	4a38      	ldr	r2, [pc, #224]	@ (8007838 <_printf_float+0x2b8>)
 8007758:	2301      	movs	r3, #1
 800775a:	4631      	mov	r1, r6
 800775c:	4628      	mov	r0, r5
 800775e:	47b8      	blx	r7
 8007760:	3001      	adds	r0, #1
 8007762:	f43f af59 	beq.w	8007618 <_printf_float+0x98>
 8007766:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800776a:	4543      	cmp	r3, r8
 800776c:	db02      	blt.n	8007774 <_printf_float+0x1f4>
 800776e:	6823      	ldr	r3, [r4, #0]
 8007770:	07d8      	lsls	r0, r3, #31
 8007772:	d50f      	bpl.n	8007794 <_printf_float+0x214>
 8007774:	9b05      	ldr	r3, [sp, #20]
 8007776:	465a      	mov	r2, fp
 8007778:	4631      	mov	r1, r6
 800777a:	4628      	mov	r0, r5
 800777c:	47b8      	blx	r7
 800777e:	3001      	adds	r0, #1
 8007780:	f43f af4a 	beq.w	8007618 <_printf_float+0x98>
 8007784:	f04f 0900 	mov.w	r9, #0
 8007788:	f108 38ff 	add.w	r8, r8, #4294967295
 800778c:	f104 0a1a 	add.w	sl, r4, #26
 8007790:	45c8      	cmp	r8, r9
 8007792:	dc09      	bgt.n	80077a8 <_printf_float+0x228>
 8007794:	6823      	ldr	r3, [r4, #0]
 8007796:	079b      	lsls	r3, r3, #30
 8007798:	f100 8107 	bmi.w	80079aa <_printf_float+0x42a>
 800779c:	68e0      	ldr	r0, [r4, #12]
 800779e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80077a0:	4298      	cmp	r0, r3
 80077a2:	bfb8      	it	lt
 80077a4:	4618      	movlt	r0, r3
 80077a6:	e739      	b.n	800761c <_printf_float+0x9c>
 80077a8:	2301      	movs	r3, #1
 80077aa:	4652      	mov	r2, sl
 80077ac:	4631      	mov	r1, r6
 80077ae:	4628      	mov	r0, r5
 80077b0:	47b8      	blx	r7
 80077b2:	3001      	adds	r0, #1
 80077b4:	f43f af30 	beq.w	8007618 <_printf_float+0x98>
 80077b8:	f109 0901 	add.w	r9, r9, #1
 80077bc:	e7e8      	b.n	8007790 <_printf_float+0x210>
 80077be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	dc3b      	bgt.n	800783c <_printf_float+0x2bc>
 80077c4:	4a1c      	ldr	r2, [pc, #112]	@ (8007838 <_printf_float+0x2b8>)
 80077c6:	2301      	movs	r3, #1
 80077c8:	4631      	mov	r1, r6
 80077ca:	4628      	mov	r0, r5
 80077cc:	47b8      	blx	r7
 80077ce:	3001      	adds	r0, #1
 80077d0:	f43f af22 	beq.w	8007618 <_printf_float+0x98>
 80077d4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80077d8:	ea59 0303 	orrs.w	r3, r9, r3
 80077dc:	d102      	bne.n	80077e4 <_printf_float+0x264>
 80077de:	6823      	ldr	r3, [r4, #0]
 80077e0:	07d9      	lsls	r1, r3, #31
 80077e2:	d5d7      	bpl.n	8007794 <_printf_float+0x214>
 80077e4:	9b05      	ldr	r3, [sp, #20]
 80077e6:	465a      	mov	r2, fp
 80077e8:	4631      	mov	r1, r6
 80077ea:	4628      	mov	r0, r5
 80077ec:	47b8      	blx	r7
 80077ee:	3001      	adds	r0, #1
 80077f0:	f43f af12 	beq.w	8007618 <_printf_float+0x98>
 80077f4:	f04f 0a00 	mov.w	sl, #0
 80077f8:	f104 0b1a 	add.w	fp, r4, #26
 80077fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077fe:	425b      	negs	r3, r3
 8007800:	4553      	cmp	r3, sl
 8007802:	dc01      	bgt.n	8007808 <_printf_float+0x288>
 8007804:	464b      	mov	r3, r9
 8007806:	e794      	b.n	8007732 <_printf_float+0x1b2>
 8007808:	2301      	movs	r3, #1
 800780a:	465a      	mov	r2, fp
 800780c:	4631      	mov	r1, r6
 800780e:	4628      	mov	r0, r5
 8007810:	47b8      	blx	r7
 8007812:	3001      	adds	r0, #1
 8007814:	f43f af00 	beq.w	8007618 <_printf_float+0x98>
 8007818:	f10a 0a01 	add.w	sl, sl, #1
 800781c:	e7ee      	b.n	80077fc <_printf_float+0x27c>
 800781e:	bf00      	nop
 8007820:	ffffffff 	.word	0xffffffff
 8007824:	7fefffff 	.word	0x7fefffff
 8007828:	08009ec0 	.word	0x08009ec0
 800782c:	08009ec4 	.word	0x08009ec4
 8007830:	08009ec8 	.word	0x08009ec8
 8007834:	08009ecc 	.word	0x08009ecc
 8007838:	08009ed0 	.word	0x08009ed0
 800783c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800783e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007842:	4553      	cmp	r3, sl
 8007844:	bfa8      	it	ge
 8007846:	4653      	movge	r3, sl
 8007848:	2b00      	cmp	r3, #0
 800784a:	4699      	mov	r9, r3
 800784c:	dc37      	bgt.n	80078be <_printf_float+0x33e>
 800784e:	2300      	movs	r3, #0
 8007850:	9307      	str	r3, [sp, #28]
 8007852:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007856:	f104 021a 	add.w	r2, r4, #26
 800785a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800785c:	9907      	ldr	r1, [sp, #28]
 800785e:	9306      	str	r3, [sp, #24]
 8007860:	eba3 0309 	sub.w	r3, r3, r9
 8007864:	428b      	cmp	r3, r1
 8007866:	dc31      	bgt.n	80078cc <_printf_float+0x34c>
 8007868:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800786a:	459a      	cmp	sl, r3
 800786c:	dc3b      	bgt.n	80078e6 <_printf_float+0x366>
 800786e:	6823      	ldr	r3, [r4, #0]
 8007870:	07da      	lsls	r2, r3, #31
 8007872:	d438      	bmi.n	80078e6 <_printf_float+0x366>
 8007874:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007876:	ebaa 0903 	sub.w	r9, sl, r3
 800787a:	9b06      	ldr	r3, [sp, #24]
 800787c:	ebaa 0303 	sub.w	r3, sl, r3
 8007880:	4599      	cmp	r9, r3
 8007882:	bfa8      	it	ge
 8007884:	4699      	movge	r9, r3
 8007886:	f1b9 0f00 	cmp.w	r9, #0
 800788a:	dc34      	bgt.n	80078f6 <_printf_float+0x376>
 800788c:	f04f 0800 	mov.w	r8, #0
 8007890:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007894:	f104 0b1a 	add.w	fp, r4, #26
 8007898:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800789a:	ebaa 0303 	sub.w	r3, sl, r3
 800789e:	eba3 0309 	sub.w	r3, r3, r9
 80078a2:	4543      	cmp	r3, r8
 80078a4:	f77f af76 	ble.w	8007794 <_printf_float+0x214>
 80078a8:	2301      	movs	r3, #1
 80078aa:	465a      	mov	r2, fp
 80078ac:	4631      	mov	r1, r6
 80078ae:	4628      	mov	r0, r5
 80078b0:	47b8      	blx	r7
 80078b2:	3001      	adds	r0, #1
 80078b4:	f43f aeb0 	beq.w	8007618 <_printf_float+0x98>
 80078b8:	f108 0801 	add.w	r8, r8, #1
 80078bc:	e7ec      	b.n	8007898 <_printf_float+0x318>
 80078be:	4642      	mov	r2, r8
 80078c0:	4631      	mov	r1, r6
 80078c2:	4628      	mov	r0, r5
 80078c4:	47b8      	blx	r7
 80078c6:	3001      	adds	r0, #1
 80078c8:	d1c1      	bne.n	800784e <_printf_float+0x2ce>
 80078ca:	e6a5      	b.n	8007618 <_printf_float+0x98>
 80078cc:	2301      	movs	r3, #1
 80078ce:	4631      	mov	r1, r6
 80078d0:	4628      	mov	r0, r5
 80078d2:	9206      	str	r2, [sp, #24]
 80078d4:	47b8      	blx	r7
 80078d6:	3001      	adds	r0, #1
 80078d8:	f43f ae9e 	beq.w	8007618 <_printf_float+0x98>
 80078dc:	9b07      	ldr	r3, [sp, #28]
 80078de:	9a06      	ldr	r2, [sp, #24]
 80078e0:	3301      	adds	r3, #1
 80078e2:	9307      	str	r3, [sp, #28]
 80078e4:	e7b9      	b.n	800785a <_printf_float+0x2da>
 80078e6:	9b05      	ldr	r3, [sp, #20]
 80078e8:	465a      	mov	r2, fp
 80078ea:	4631      	mov	r1, r6
 80078ec:	4628      	mov	r0, r5
 80078ee:	47b8      	blx	r7
 80078f0:	3001      	adds	r0, #1
 80078f2:	d1bf      	bne.n	8007874 <_printf_float+0x2f4>
 80078f4:	e690      	b.n	8007618 <_printf_float+0x98>
 80078f6:	9a06      	ldr	r2, [sp, #24]
 80078f8:	464b      	mov	r3, r9
 80078fa:	4442      	add	r2, r8
 80078fc:	4631      	mov	r1, r6
 80078fe:	4628      	mov	r0, r5
 8007900:	47b8      	blx	r7
 8007902:	3001      	adds	r0, #1
 8007904:	d1c2      	bne.n	800788c <_printf_float+0x30c>
 8007906:	e687      	b.n	8007618 <_printf_float+0x98>
 8007908:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800790c:	f1b9 0f01 	cmp.w	r9, #1
 8007910:	dc01      	bgt.n	8007916 <_printf_float+0x396>
 8007912:	07db      	lsls	r3, r3, #31
 8007914:	d536      	bpl.n	8007984 <_printf_float+0x404>
 8007916:	2301      	movs	r3, #1
 8007918:	4642      	mov	r2, r8
 800791a:	4631      	mov	r1, r6
 800791c:	4628      	mov	r0, r5
 800791e:	47b8      	blx	r7
 8007920:	3001      	adds	r0, #1
 8007922:	f43f ae79 	beq.w	8007618 <_printf_float+0x98>
 8007926:	9b05      	ldr	r3, [sp, #20]
 8007928:	465a      	mov	r2, fp
 800792a:	4631      	mov	r1, r6
 800792c:	4628      	mov	r0, r5
 800792e:	47b8      	blx	r7
 8007930:	3001      	adds	r0, #1
 8007932:	f43f ae71 	beq.w	8007618 <_printf_float+0x98>
 8007936:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800793a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800793e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007942:	f109 39ff 	add.w	r9, r9, #4294967295
 8007946:	d018      	beq.n	800797a <_printf_float+0x3fa>
 8007948:	464b      	mov	r3, r9
 800794a:	f108 0201 	add.w	r2, r8, #1
 800794e:	4631      	mov	r1, r6
 8007950:	4628      	mov	r0, r5
 8007952:	47b8      	blx	r7
 8007954:	3001      	adds	r0, #1
 8007956:	d10c      	bne.n	8007972 <_printf_float+0x3f2>
 8007958:	e65e      	b.n	8007618 <_printf_float+0x98>
 800795a:	2301      	movs	r3, #1
 800795c:	465a      	mov	r2, fp
 800795e:	4631      	mov	r1, r6
 8007960:	4628      	mov	r0, r5
 8007962:	47b8      	blx	r7
 8007964:	3001      	adds	r0, #1
 8007966:	f43f ae57 	beq.w	8007618 <_printf_float+0x98>
 800796a:	f108 0801 	add.w	r8, r8, #1
 800796e:	45c8      	cmp	r8, r9
 8007970:	dbf3      	blt.n	800795a <_printf_float+0x3da>
 8007972:	4653      	mov	r3, sl
 8007974:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007978:	e6dc      	b.n	8007734 <_printf_float+0x1b4>
 800797a:	f04f 0800 	mov.w	r8, #0
 800797e:	f104 0b1a 	add.w	fp, r4, #26
 8007982:	e7f4      	b.n	800796e <_printf_float+0x3ee>
 8007984:	2301      	movs	r3, #1
 8007986:	4642      	mov	r2, r8
 8007988:	e7e1      	b.n	800794e <_printf_float+0x3ce>
 800798a:	2301      	movs	r3, #1
 800798c:	464a      	mov	r2, r9
 800798e:	4631      	mov	r1, r6
 8007990:	4628      	mov	r0, r5
 8007992:	47b8      	blx	r7
 8007994:	3001      	adds	r0, #1
 8007996:	f43f ae3f 	beq.w	8007618 <_printf_float+0x98>
 800799a:	f108 0801 	add.w	r8, r8, #1
 800799e:	68e3      	ldr	r3, [r4, #12]
 80079a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80079a2:	1a5b      	subs	r3, r3, r1
 80079a4:	4543      	cmp	r3, r8
 80079a6:	dcf0      	bgt.n	800798a <_printf_float+0x40a>
 80079a8:	e6f8      	b.n	800779c <_printf_float+0x21c>
 80079aa:	f04f 0800 	mov.w	r8, #0
 80079ae:	f104 0919 	add.w	r9, r4, #25
 80079b2:	e7f4      	b.n	800799e <_printf_float+0x41e>

080079b4 <_printf_common>:
 80079b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079b8:	4616      	mov	r6, r2
 80079ba:	4698      	mov	r8, r3
 80079bc:	688a      	ldr	r2, [r1, #8]
 80079be:	690b      	ldr	r3, [r1, #16]
 80079c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80079c4:	4293      	cmp	r3, r2
 80079c6:	bfb8      	it	lt
 80079c8:	4613      	movlt	r3, r2
 80079ca:	6033      	str	r3, [r6, #0]
 80079cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80079d0:	4607      	mov	r7, r0
 80079d2:	460c      	mov	r4, r1
 80079d4:	b10a      	cbz	r2, 80079da <_printf_common+0x26>
 80079d6:	3301      	adds	r3, #1
 80079d8:	6033      	str	r3, [r6, #0]
 80079da:	6823      	ldr	r3, [r4, #0]
 80079dc:	0699      	lsls	r1, r3, #26
 80079de:	bf42      	ittt	mi
 80079e0:	6833      	ldrmi	r3, [r6, #0]
 80079e2:	3302      	addmi	r3, #2
 80079e4:	6033      	strmi	r3, [r6, #0]
 80079e6:	6825      	ldr	r5, [r4, #0]
 80079e8:	f015 0506 	ands.w	r5, r5, #6
 80079ec:	d106      	bne.n	80079fc <_printf_common+0x48>
 80079ee:	f104 0a19 	add.w	sl, r4, #25
 80079f2:	68e3      	ldr	r3, [r4, #12]
 80079f4:	6832      	ldr	r2, [r6, #0]
 80079f6:	1a9b      	subs	r3, r3, r2
 80079f8:	42ab      	cmp	r3, r5
 80079fa:	dc26      	bgt.n	8007a4a <_printf_common+0x96>
 80079fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007a00:	6822      	ldr	r2, [r4, #0]
 8007a02:	3b00      	subs	r3, #0
 8007a04:	bf18      	it	ne
 8007a06:	2301      	movne	r3, #1
 8007a08:	0692      	lsls	r2, r2, #26
 8007a0a:	d42b      	bmi.n	8007a64 <_printf_common+0xb0>
 8007a0c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007a10:	4641      	mov	r1, r8
 8007a12:	4638      	mov	r0, r7
 8007a14:	47c8      	blx	r9
 8007a16:	3001      	adds	r0, #1
 8007a18:	d01e      	beq.n	8007a58 <_printf_common+0xa4>
 8007a1a:	6823      	ldr	r3, [r4, #0]
 8007a1c:	6922      	ldr	r2, [r4, #16]
 8007a1e:	f003 0306 	and.w	r3, r3, #6
 8007a22:	2b04      	cmp	r3, #4
 8007a24:	bf02      	ittt	eq
 8007a26:	68e5      	ldreq	r5, [r4, #12]
 8007a28:	6833      	ldreq	r3, [r6, #0]
 8007a2a:	1aed      	subeq	r5, r5, r3
 8007a2c:	68a3      	ldr	r3, [r4, #8]
 8007a2e:	bf0c      	ite	eq
 8007a30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a34:	2500      	movne	r5, #0
 8007a36:	4293      	cmp	r3, r2
 8007a38:	bfc4      	itt	gt
 8007a3a:	1a9b      	subgt	r3, r3, r2
 8007a3c:	18ed      	addgt	r5, r5, r3
 8007a3e:	2600      	movs	r6, #0
 8007a40:	341a      	adds	r4, #26
 8007a42:	42b5      	cmp	r5, r6
 8007a44:	d11a      	bne.n	8007a7c <_printf_common+0xc8>
 8007a46:	2000      	movs	r0, #0
 8007a48:	e008      	b.n	8007a5c <_printf_common+0xa8>
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	4652      	mov	r2, sl
 8007a4e:	4641      	mov	r1, r8
 8007a50:	4638      	mov	r0, r7
 8007a52:	47c8      	blx	r9
 8007a54:	3001      	adds	r0, #1
 8007a56:	d103      	bne.n	8007a60 <_printf_common+0xac>
 8007a58:	f04f 30ff 	mov.w	r0, #4294967295
 8007a5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a60:	3501      	adds	r5, #1
 8007a62:	e7c6      	b.n	80079f2 <_printf_common+0x3e>
 8007a64:	18e1      	adds	r1, r4, r3
 8007a66:	1c5a      	adds	r2, r3, #1
 8007a68:	2030      	movs	r0, #48	@ 0x30
 8007a6a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007a6e:	4422      	add	r2, r4
 8007a70:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007a74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007a78:	3302      	adds	r3, #2
 8007a7a:	e7c7      	b.n	8007a0c <_printf_common+0x58>
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	4622      	mov	r2, r4
 8007a80:	4641      	mov	r1, r8
 8007a82:	4638      	mov	r0, r7
 8007a84:	47c8      	blx	r9
 8007a86:	3001      	adds	r0, #1
 8007a88:	d0e6      	beq.n	8007a58 <_printf_common+0xa4>
 8007a8a:	3601      	adds	r6, #1
 8007a8c:	e7d9      	b.n	8007a42 <_printf_common+0x8e>
	...

08007a90 <_printf_i>:
 8007a90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a94:	7e0f      	ldrb	r7, [r1, #24]
 8007a96:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007a98:	2f78      	cmp	r7, #120	@ 0x78
 8007a9a:	4691      	mov	r9, r2
 8007a9c:	4680      	mov	r8, r0
 8007a9e:	460c      	mov	r4, r1
 8007aa0:	469a      	mov	sl, r3
 8007aa2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007aa6:	d807      	bhi.n	8007ab8 <_printf_i+0x28>
 8007aa8:	2f62      	cmp	r7, #98	@ 0x62
 8007aaa:	d80a      	bhi.n	8007ac2 <_printf_i+0x32>
 8007aac:	2f00      	cmp	r7, #0
 8007aae:	f000 80d2 	beq.w	8007c56 <_printf_i+0x1c6>
 8007ab2:	2f58      	cmp	r7, #88	@ 0x58
 8007ab4:	f000 80b9 	beq.w	8007c2a <_printf_i+0x19a>
 8007ab8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007abc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007ac0:	e03a      	b.n	8007b38 <_printf_i+0xa8>
 8007ac2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007ac6:	2b15      	cmp	r3, #21
 8007ac8:	d8f6      	bhi.n	8007ab8 <_printf_i+0x28>
 8007aca:	a101      	add	r1, pc, #4	@ (adr r1, 8007ad0 <_printf_i+0x40>)
 8007acc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ad0:	08007b29 	.word	0x08007b29
 8007ad4:	08007b3d 	.word	0x08007b3d
 8007ad8:	08007ab9 	.word	0x08007ab9
 8007adc:	08007ab9 	.word	0x08007ab9
 8007ae0:	08007ab9 	.word	0x08007ab9
 8007ae4:	08007ab9 	.word	0x08007ab9
 8007ae8:	08007b3d 	.word	0x08007b3d
 8007aec:	08007ab9 	.word	0x08007ab9
 8007af0:	08007ab9 	.word	0x08007ab9
 8007af4:	08007ab9 	.word	0x08007ab9
 8007af8:	08007ab9 	.word	0x08007ab9
 8007afc:	08007c3d 	.word	0x08007c3d
 8007b00:	08007b67 	.word	0x08007b67
 8007b04:	08007bf7 	.word	0x08007bf7
 8007b08:	08007ab9 	.word	0x08007ab9
 8007b0c:	08007ab9 	.word	0x08007ab9
 8007b10:	08007c5f 	.word	0x08007c5f
 8007b14:	08007ab9 	.word	0x08007ab9
 8007b18:	08007b67 	.word	0x08007b67
 8007b1c:	08007ab9 	.word	0x08007ab9
 8007b20:	08007ab9 	.word	0x08007ab9
 8007b24:	08007bff 	.word	0x08007bff
 8007b28:	6833      	ldr	r3, [r6, #0]
 8007b2a:	1d1a      	adds	r2, r3, #4
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	6032      	str	r2, [r6, #0]
 8007b30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007b34:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007b38:	2301      	movs	r3, #1
 8007b3a:	e09d      	b.n	8007c78 <_printf_i+0x1e8>
 8007b3c:	6833      	ldr	r3, [r6, #0]
 8007b3e:	6820      	ldr	r0, [r4, #0]
 8007b40:	1d19      	adds	r1, r3, #4
 8007b42:	6031      	str	r1, [r6, #0]
 8007b44:	0606      	lsls	r6, r0, #24
 8007b46:	d501      	bpl.n	8007b4c <_printf_i+0xbc>
 8007b48:	681d      	ldr	r5, [r3, #0]
 8007b4a:	e003      	b.n	8007b54 <_printf_i+0xc4>
 8007b4c:	0645      	lsls	r5, r0, #25
 8007b4e:	d5fb      	bpl.n	8007b48 <_printf_i+0xb8>
 8007b50:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007b54:	2d00      	cmp	r5, #0
 8007b56:	da03      	bge.n	8007b60 <_printf_i+0xd0>
 8007b58:	232d      	movs	r3, #45	@ 0x2d
 8007b5a:	426d      	negs	r5, r5
 8007b5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b60:	4859      	ldr	r0, [pc, #356]	@ (8007cc8 <_printf_i+0x238>)
 8007b62:	230a      	movs	r3, #10
 8007b64:	e011      	b.n	8007b8a <_printf_i+0xfa>
 8007b66:	6821      	ldr	r1, [r4, #0]
 8007b68:	6833      	ldr	r3, [r6, #0]
 8007b6a:	0608      	lsls	r0, r1, #24
 8007b6c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007b70:	d402      	bmi.n	8007b78 <_printf_i+0xe8>
 8007b72:	0649      	lsls	r1, r1, #25
 8007b74:	bf48      	it	mi
 8007b76:	b2ad      	uxthmi	r5, r5
 8007b78:	2f6f      	cmp	r7, #111	@ 0x6f
 8007b7a:	4853      	ldr	r0, [pc, #332]	@ (8007cc8 <_printf_i+0x238>)
 8007b7c:	6033      	str	r3, [r6, #0]
 8007b7e:	bf14      	ite	ne
 8007b80:	230a      	movne	r3, #10
 8007b82:	2308      	moveq	r3, #8
 8007b84:	2100      	movs	r1, #0
 8007b86:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007b8a:	6866      	ldr	r6, [r4, #4]
 8007b8c:	60a6      	str	r6, [r4, #8]
 8007b8e:	2e00      	cmp	r6, #0
 8007b90:	bfa2      	ittt	ge
 8007b92:	6821      	ldrge	r1, [r4, #0]
 8007b94:	f021 0104 	bicge.w	r1, r1, #4
 8007b98:	6021      	strge	r1, [r4, #0]
 8007b9a:	b90d      	cbnz	r5, 8007ba0 <_printf_i+0x110>
 8007b9c:	2e00      	cmp	r6, #0
 8007b9e:	d04b      	beq.n	8007c38 <_printf_i+0x1a8>
 8007ba0:	4616      	mov	r6, r2
 8007ba2:	fbb5 f1f3 	udiv	r1, r5, r3
 8007ba6:	fb03 5711 	mls	r7, r3, r1, r5
 8007baa:	5dc7      	ldrb	r7, [r0, r7]
 8007bac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007bb0:	462f      	mov	r7, r5
 8007bb2:	42bb      	cmp	r3, r7
 8007bb4:	460d      	mov	r5, r1
 8007bb6:	d9f4      	bls.n	8007ba2 <_printf_i+0x112>
 8007bb8:	2b08      	cmp	r3, #8
 8007bba:	d10b      	bne.n	8007bd4 <_printf_i+0x144>
 8007bbc:	6823      	ldr	r3, [r4, #0]
 8007bbe:	07df      	lsls	r7, r3, #31
 8007bc0:	d508      	bpl.n	8007bd4 <_printf_i+0x144>
 8007bc2:	6923      	ldr	r3, [r4, #16]
 8007bc4:	6861      	ldr	r1, [r4, #4]
 8007bc6:	4299      	cmp	r1, r3
 8007bc8:	bfde      	ittt	le
 8007bca:	2330      	movle	r3, #48	@ 0x30
 8007bcc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007bd0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007bd4:	1b92      	subs	r2, r2, r6
 8007bd6:	6122      	str	r2, [r4, #16]
 8007bd8:	f8cd a000 	str.w	sl, [sp]
 8007bdc:	464b      	mov	r3, r9
 8007bde:	aa03      	add	r2, sp, #12
 8007be0:	4621      	mov	r1, r4
 8007be2:	4640      	mov	r0, r8
 8007be4:	f7ff fee6 	bl	80079b4 <_printf_common>
 8007be8:	3001      	adds	r0, #1
 8007bea:	d14a      	bne.n	8007c82 <_printf_i+0x1f2>
 8007bec:	f04f 30ff 	mov.w	r0, #4294967295
 8007bf0:	b004      	add	sp, #16
 8007bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bf6:	6823      	ldr	r3, [r4, #0]
 8007bf8:	f043 0320 	orr.w	r3, r3, #32
 8007bfc:	6023      	str	r3, [r4, #0]
 8007bfe:	4833      	ldr	r0, [pc, #204]	@ (8007ccc <_printf_i+0x23c>)
 8007c00:	2778      	movs	r7, #120	@ 0x78
 8007c02:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007c06:	6823      	ldr	r3, [r4, #0]
 8007c08:	6831      	ldr	r1, [r6, #0]
 8007c0a:	061f      	lsls	r7, r3, #24
 8007c0c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007c10:	d402      	bmi.n	8007c18 <_printf_i+0x188>
 8007c12:	065f      	lsls	r7, r3, #25
 8007c14:	bf48      	it	mi
 8007c16:	b2ad      	uxthmi	r5, r5
 8007c18:	6031      	str	r1, [r6, #0]
 8007c1a:	07d9      	lsls	r1, r3, #31
 8007c1c:	bf44      	itt	mi
 8007c1e:	f043 0320 	orrmi.w	r3, r3, #32
 8007c22:	6023      	strmi	r3, [r4, #0]
 8007c24:	b11d      	cbz	r5, 8007c2e <_printf_i+0x19e>
 8007c26:	2310      	movs	r3, #16
 8007c28:	e7ac      	b.n	8007b84 <_printf_i+0xf4>
 8007c2a:	4827      	ldr	r0, [pc, #156]	@ (8007cc8 <_printf_i+0x238>)
 8007c2c:	e7e9      	b.n	8007c02 <_printf_i+0x172>
 8007c2e:	6823      	ldr	r3, [r4, #0]
 8007c30:	f023 0320 	bic.w	r3, r3, #32
 8007c34:	6023      	str	r3, [r4, #0]
 8007c36:	e7f6      	b.n	8007c26 <_printf_i+0x196>
 8007c38:	4616      	mov	r6, r2
 8007c3a:	e7bd      	b.n	8007bb8 <_printf_i+0x128>
 8007c3c:	6833      	ldr	r3, [r6, #0]
 8007c3e:	6825      	ldr	r5, [r4, #0]
 8007c40:	6961      	ldr	r1, [r4, #20]
 8007c42:	1d18      	adds	r0, r3, #4
 8007c44:	6030      	str	r0, [r6, #0]
 8007c46:	062e      	lsls	r6, r5, #24
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	d501      	bpl.n	8007c50 <_printf_i+0x1c0>
 8007c4c:	6019      	str	r1, [r3, #0]
 8007c4e:	e002      	b.n	8007c56 <_printf_i+0x1c6>
 8007c50:	0668      	lsls	r0, r5, #25
 8007c52:	d5fb      	bpl.n	8007c4c <_printf_i+0x1bc>
 8007c54:	8019      	strh	r1, [r3, #0]
 8007c56:	2300      	movs	r3, #0
 8007c58:	6123      	str	r3, [r4, #16]
 8007c5a:	4616      	mov	r6, r2
 8007c5c:	e7bc      	b.n	8007bd8 <_printf_i+0x148>
 8007c5e:	6833      	ldr	r3, [r6, #0]
 8007c60:	1d1a      	adds	r2, r3, #4
 8007c62:	6032      	str	r2, [r6, #0]
 8007c64:	681e      	ldr	r6, [r3, #0]
 8007c66:	6862      	ldr	r2, [r4, #4]
 8007c68:	2100      	movs	r1, #0
 8007c6a:	4630      	mov	r0, r6
 8007c6c:	f7f8 fb38 	bl	80002e0 <memchr>
 8007c70:	b108      	cbz	r0, 8007c76 <_printf_i+0x1e6>
 8007c72:	1b80      	subs	r0, r0, r6
 8007c74:	6060      	str	r0, [r4, #4]
 8007c76:	6863      	ldr	r3, [r4, #4]
 8007c78:	6123      	str	r3, [r4, #16]
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c80:	e7aa      	b.n	8007bd8 <_printf_i+0x148>
 8007c82:	6923      	ldr	r3, [r4, #16]
 8007c84:	4632      	mov	r2, r6
 8007c86:	4649      	mov	r1, r9
 8007c88:	4640      	mov	r0, r8
 8007c8a:	47d0      	blx	sl
 8007c8c:	3001      	adds	r0, #1
 8007c8e:	d0ad      	beq.n	8007bec <_printf_i+0x15c>
 8007c90:	6823      	ldr	r3, [r4, #0]
 8007c92:	079b      	lsls	r3, r3, #30
 8007c94:	d413      	bmi.n	8007cbe <_printf_i+0x22e>
 8007c96:	68e0      	ldr	r0, [r4, #12]
 8007c98:	9b03      	ldr	r3, [sp, #12]
 8007c9a:	4298      	cmp	r0, r3
 8007c9c:	bfb8      	it	lt
 8007c9e:	4618      	movlt	r0, r3
 8007ca0:	e7a6      	b.n	8007bf0 <_printf_i+0x160>
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	4632      	mov	r2, r6
 8007ca6:	4649      	mov	r1, r9
 8007ca8:	4640      	mov	r0, r8
 8007caa:	47d0      	blx	sl
 8007cac:	3001      	adds	r0, #1
 8007cae:	d09d      	beq.n	8007bec <_printf_i+0x15c>
 8007cb0:	3501      	adds	r5, #1
 8007cb2:	68e3      	ldr	r3, [r4, #12]
 8007cb4:	9903      	ldr	r1, [sp, #12]
 8007cb6:	1a5b      	subs	r3, r3, r1
 8007cb8:	42ab      	cmp	r3, r5
 8007cba:	dcf2      	bgt.n	8007ca2 <_printf_i+0x212>
 8007cbc:	e7eb      	b.n	8007c96 <_printf_i+0x206>
 8007cbe:	2500      	movs	r5, #0
 8007cc0:	f104 0619 	add.w	r6, r4, #25
 8007cc4:	e7f5      	b.n	8007cb2 <_printf_i+0x222>
 8007cc6:	bf00      	nop
 8007cc8:	08009ed2 	.word	0x08009ed2
 8007ccc:	08009ee3 	.word	0x08009ee3

08007cd0 <std>:
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	b510      	push	{r4, lr}
 8007cd4:	4604      	mov	r4, r0
 8007cd6:	e9c0 3300 	strd	r3, r3, [r0]
 8007cda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007cde:	6083      	str	r3, [r0, #8]
 8007ce0:	8181      	strh	r1, [r0, #12]
 8007ce2:	6643      	str	r3, [r0, #100]	@ 0x64
 8007ce4:	81c2      	strh	r2, [r0, #14]
 8007ce6:	6183      	str	r3, [r0, #24]
 8007ce8:	4619      	mov	r1, r3
 8007cea:	2208      	movs	r2, #8
 8007cec:	305c      	adds	r0, #92	@ 0x5c
 8007cee:	f000 f9f9 	bl	80080e4 <memset>
 8007cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8007d28 <std+0x58>)
 8007cf4:	6263      	str	r3, [r4, #36]	@ 0x24
 8007cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8007d2c <std+0x5c>)
 8007cf8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8007d30 <std+0x60>)
 8007cfc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8007d34 <std+0x64>)
 8007d00:	6323      	str	r3, [r4, #48]	@ 0x30
 8007d02:	4b0d      	ldr	r3, [pc, #52]	@ (8007d38 <std+0x68>)
 8007d04:	6224      	str	r4, [r4, #32]
 8007d06:	429c      	cmp	r4, r3
 8007d08:	d006      	beq.n	8007d18 <std+0x48>
 8007d0a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007d0e:	4294      	cmp	r4, r2
 8007d10:	d002      	beq.n	8007d18 <std+0x48>
 8007d12:	33d0      	adds	r3, #208	@ 0xd0
 8007d14:	429c      	cmp	r4, r3
 8007d16:	d105      	bne.n	8007d24 <std+0x54>
 8007d18:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007d1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d20:	f000 ba5c 	b.w	80081dc <__retarget_lock_init_recursive>
 8007d24:	bd10      	pop	{r4, pc}
 8007d26:	bf00      	nop
 8007d28:	08007f35 	.word	0x08007f35
 8007d2c:	08007f57 	.word	0x08007f57
 8007d30:	08007f8f 	.word	0x08007f8f
 8007d34:	08007fb3 	.word	0x08007fb3
 8007d38:	240009ec 	.word	0x240009ec

08007d3c <stdio_exit_handler>:
 8007d3c:	4a02      	ldr	r2, [pc, #8]	@ (8007d48 <stdio_exit_handler+0xc>)
 8007d3e:	4903      	ldr	r1, [pc, #12]	@ (8007d4c <stdio_exit_handler+0x10>)
 8007d40:	4803      	ldr	r0, [pc, #12]	@ (8007d50 <stdio_exit_handler+0x14>)
 8007d42:	f000 b869 	b.w	8007e18 <_fwalk_sglue>
 8007d46:	bf00      	nop
 8007d48:	20000010 	.word	0x20000010
 8007d4c:	08009a4d 	.word	0x08009a4d
 8007d50:	20000020 	.word	0x20000020

08007d54 <cleanup_stdio>:
 8007d54:	6841      	ldr	r1, [r0, #4]
 8007d56:	4b0c      	ldr	r3, [pc, #48]	@ (8007d88 <cleanup_stdio+0x34>)
 8007d58:	4299      	cmp	r1, r3
 8007d5a:	b510      	push	{r4, lr}
 8007d5c:	4604      	mov	r4, r0
 8007d5e:	d001      	beq.n	8007d64 <cleanup_stdio+0x10>
 8007d60:	f001 fe74 	bl	8009a4c <_fflush_r>
 8007d64:	68a1      	ldr	r1, [r4, #8]
 8007d66:	4b09      	ldr	r3, [pc, #36]	@ (8007d8c <cleanup_stdio+0x38>)
 8007d68:	4299      	cmp	r1, r3
 8007d6a:	d002      	beq.n	8007d72 <cleanup_stdio+0x1e>
 8007d6c:	4620      	mov	r0, r4
 8007d6e:	f001 fe6d 	bl	8009a4c <_fflush_r>
 8007d72:	68e1      	ldr	r1, [r4, #12]
 8007d74:	4b06      	ldr	r3, [pc, #24]	@ (8007d90 <cleanup_stdio+0x3c>)
 8007d76:	4299      	cmp	r1, r3
 8007d78:	d004      	beq.n	8007d84 <cleanup_stdio+0x30>
 8007d7a:	4620      	mov	r0, r4
 8007d7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d80:	f001 be64 	b.w	8009a4c <_fflush_r>
 8007d84:	bd10      	pop	{r4, pc}
 8007d86:	bf00      	nop
 8007d88:	240009ec 	.word	0x240009ec
 8007d8c:	24000a54 	.word	0x24000a54
 8007d90:	24000abc 	.word	0x24000abc

08007d94 <global_stdio_init.part.0>:
 8007d94:	b510      	push	{r4, lr}
 8007d96:	4b0b      	ldr	r3, [pc, #44]	@ (8007dc4 <global_stdio_init.part.0+0x30>)
 8007d98:	4c0b      	ldr	r4, [pc, #44]	@ (8007dc8 <global_stdio_init.part.0+0x34>)
 8007d9a:	4a0c      	ldr	r2, [pc, #48]	@ (8007dcc <global_stdio_init.part.0+0x38>)
 8007d9c:	601a      	str	r2, [r3, #0]
 8007d9e:	4620      	mov	r0, r4
 8007da0:	2200      	movs	r2, #0
 8007da2:	2104      	movs	r1, #4
 8007da4:	f7ff ff94 	bl	8007cd0 <std>
 8007da8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007dac:	2201      	movs	r2, #1
 8007dae:	2109      	movs	r1, #9
 8007db0:	f7ff ff8e 	bl	8007cd0 <std>
 8007db4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007db8:	2202      	movs	r2, #2
 8007dba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007dbe:	2112      	movs	r1, #18
 8007dc0:	f7ff bf86 	b.w	8007cd0 <std>
 8007dc4:	24000b24 	.word	0x24000b24
 8007dc8:	240009ec 	.word	0x240009ec
 8007dcc:	08007d3d 	.word	0x08007d3d

08007dd0 <__sfp_lock_acquire>:
 8007dd0:	4801      	ldr	r0, [pc, #4]	@ (8007dd8 <__sfp_lock_acquire+0x8>)
 8007dd2:	f000 ba04 	b.w	80081de <__retarget_lock_acquire_recursive>
 8007dd6:	bf00      	nop
 8007dd8:	24000b2d 	.word	0x24000b2d

08007ddc <__sfp_lock_release>:
 8007ddc:	4801      	ldr	r0, [pc, #4]	@ (8007de4 <__sfp_lock_release+0x8>)
 8007dde:	f000 b9ff 	b.w	80081e0 <__retarget_lock_release_recursive>
 8007de2:	bf00      	nop
 8007de4:	24000b2d 	.word	0x24000b2d

08007de8 <__sinit>:
 8007de8:	b510      	push	{r4, lr}
 8007dea:	4604      	mov	r4, r0
 8007dec:	f7ff fff0 	bl	8007dd0 <__sfp_lock_acquire>
 8007df0:	6a23      	ldr	r3, [r4, #32]
 8007df2:	b11b      	cbz	r3, 8007dfc <__sinit+0x14>
 8007df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007df8:	f7ff bff0 	b.w	8007ddc <__sfp_lock_release>
 8007dfc:	4b04      	ldr	r3, [pc, #16]	@ (8007e10 <__sinit+0x28>)
 8007dfe:	6223      	str	r3, [r4, #32]
 8007e00:	4b04      	ldr	r3, [pc, #16]	@ (8007e14 <__sinit+0x2c>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d1f5      	bne.n	8007df4 <__sinit+0xc>
 8007e08:	f7ff ffc4 	bl	8007d94 <global_stdio_init.part.0>
 8007e0c:	e7f2      	b.n	8007df4 <__sinit+0xc>
 8007e0e:	bf00      	nop
 8007e10:	08007d55 	.word	0x08007d55
 8007e14:	24000b24 	.word	0x24000b24

08007e18 <_fwalk_sglue>:
 8007e18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e1c:	4607      	mov	r7, r0
 8007e1e:	4688      	mov	r8, r1
 8007e20:	4614      	mov	r4, r2
 8007e22:	2600      	movs	r6, #0
 8007e24:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e28:	f1b9 0901 	subs.w	r9, r9, #1
 8007e2c:	d505      	bpl.n	8007e3a <_fwalk_sglue+0x22>
 8007e2e:	6824      	ldr	r4, [r4, #0]
 8007e30:	2c00      	cmp	r4, #0
 8007e32:	d1f7      	bne.n	8007e24 <_fwalk_sglue+0xc>
 8007e34:	4630      	mov	r0, r6
 8007e36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e3a:	89ab      	ldrh	r3, [r5, #12]
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d907      	bls.n	8007e50 <_fwalk_sglue+0x38>
 8007e40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e44:	3301      	adds	r3, #1
 8007e46:	d003      	beq.n	8007e50 <_fwalk_sglue+0x38>
 8007e48:	4629      	mov	r1, r5
 8007e4a:	4638      	mov	r0, r7
 8007e4c:	47c0      	blx	r8
 8007e4e:	4306      	orrs	r6, r0
 8007e50:	3568      	adds	r5, #104	@ 0x68
 8007e52:	e7e9      	b.n	8007e28 <_fwalk_sglue+0x10>

08007e54 <iprintf>:
 8007e54:	b40f      	push	{r0, r1, r2, r3}
 8007e56:	b507      	push	{r0, r1, r2, lr}
 8007e58:	4906      	ldr	r1, [pc, #24]	@ (8007e74 <iprintf+0x20>)
 8007e5a:	ab04      	add	r3, sp, #16
 8007e5c:	6808      	ldr	r0, [r1, #0]
 8007e5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e62:	6881      	ldr	r1, [r0, #8]
 8007e64:	9301      	str	r3, [sp, #4]
 8007e66:	f001 fc55 	bl	8009714 <_vfiprintf_r>
 8007e6a:	b003      	add	sp, #12
 8007e6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e70:	b004      	add	sp, #16
 8007e72:	4770      	bx	lr
 8007e74:	2000001c 	.word	0x2000001c

08007e78 <_puts_r>:
 8007e78:	6a03      	ldr	r3, [r0, #32]
 8007e7a:	b570      	push	{r4, r5, r6, lr}
 8007e7c:	6884      	ldr	r4, [r0, #8]
 8007e7e:	4605      	mov	r5, r0
 8007e80:	460e      	mov	r6, r1
 8007e82:	b90b      	cbnz	r3, 8007e88 <_puts_r+0x10>
 8007e84:	f7ff ffb0 	bl	8007de8 <__sinit>
 8007e88:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007e8a:	07db      	lsls	r3, r3, #31
 8007e8c:	d405      	bmi.n	8007e9a <_puts_r+0x22>
 8007e8e:	89a3      	ldrh	r3, [r4, #12]
 8007e90:	0598      	lsls	r0, r3, #22
 8007e92:	d402      	bmi.n	8007e9a <_puts_r+0x22>
 8007e94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007e96:	f000 f9a2 	bl	80081de <__retarget_lock_acquire_recursive>
 8007e9a:	89a3      	ldrh	r3, [r4, #12]
 8007e9c:	0719      	lsls	r1, r3, #28
 8007e9e:	d502      	bpl.n	8007ea6 <_puts_r+0x2e>
 8007ea0:	6923      	ldr	r3, [r4, #16]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d135      	bne.n	8007f12 <_puts_r+0x9a>
 8007ea6:	4621      	mov	r1, r4
 8007ea8:	4628      	mov	r0, r5
 8007eaa:	f000 f8c5 	bl	8008038 <__swsetup_r>
 8007eae:	b380      	cbz	r0, 8007f12 <_puts_r+0x9a>
 8007eb0:	f04f 35ff 	mov.w	r5, #4294967295
 8007eb4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007eb6:	07da      	lsls	r2, r3, #31
 8007eb8:	d405      	bmi.n	8007ec6 <_puts_r+0x4e>
 8007eba:	89a3      	ldrh	r3, [r4, #12]
 8007ebc:	059b      	lsls	r3, r3, #22
 8007ebe:	d402      	bmi.n	8007ec6 <_puts_r+0x4e>
 8007ec0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ec2:	f000 f98d 	bl	80081e0 <__retarget_lock_release_recursive>
 8007ec6:	4628      	mov	r0, r5
 8007ec8:	bd70      	pop	{r4, r5, r6, pc}
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	da04      	bge.n	8007ed8 <_puts_r+0x60>
 8007ece:	69a2      	ldr	r2, [r4, #24]
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	dc17      	bgt.n	8007f04 <_puts_r+0x8c>
 8007ed4:	290a      	cmp	r1, #10
 8007ed6:	d015      	beq.n	8007f04 <_puts_r+0x8c>
 8007ed8:	6823      	ldr	r3, [r4, #0]
 8007eda:	1c5a      	adds	r2, r3, #1
 8007edc:	6022      	str	r2, [r4, #0]
 8007ede:	7019      	strb	r1, [r3, #0]
 8007ee0:	68a3      	ldr	r3, [r4, #8]
 8007ee2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007ee6:	3b01      	subs	r3, #1
 8007ee8:	60a3      	str	r3, [r4, #8]
 8007eea:	2900      	cmp	r1, #0
 8007eec:	d1ed      	bne.n	8007eca <_puts_r+0x52>
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	da11      	bge.n	8007f16 <_puts_r+0x9e>
 8007ef2:	4622      	mov	r2, r4
 8007ef4:	210a      	movs	r1, #10
 8007ef6:	4628      	mov	r0, r5
 8007ef8:	f000 f85f 	bl	8007fba <__swbuf_r>
 8007efc:	3001      	adds	r0, #1
 8007efe:	d0d7      	beq.n	8007eb0 <_puts_r+0x38>
 8007f00:	250a      	movs	r5, #10
 8007f02:	e7d7      	b.n	8007eb4 <_puts_r+0x3c>
 8007f04:	4622      	mov	r2, r4
 8007f06:	4628      	mov	r0, r5
 8007f08:	f000 f857 	bl	8007fba <__swbuf_r>
 8007f0c:	3001      	adds	r0, #1
 8007f0e:	d1e7      	bne.n	8007ee0 <_puts_r+0x68>
 8007f10:	e7ce      	b.n	8007eb0 <_puts_r+0x38>
 8007f12:	3e01      	subs	r6, #1
 8007f14:	e7e4      	b.n	8007ee0 <_puts_r+0x68>
 8007f16:	6823      	ldr	r3, [r4, #0]
 8007f18:	1c5a      	adds	r2, r3, #1
 8007f1a:	6022      	str	r2, [r4, #0]
 8007f1c:	220a      	movs	r2, #10
 8007f1e:	701a      	strb	r2, [r3, #0]
 8007f20:	e7ee      	b.n	8007f00 <_puts_r+0x88>
	...

08007f24 <puts>:
 8007f24:	4b02      	ldr	r3, [pc, #8]	@ (8007f30 <puts+0xc>)
 8007f26:	4601      	mov	r1, r0
 8007f28:	6818      	ldr	r0, [r3, #0]
 8007f2a:	f7ff bfa5 	b.w	8007e78 <_puts_r>
 8007f2e:	bf00      	nop
 8007f30:	2000001c 	.word	0x2000001c

08007f34 <__sread>:
 8007f34:	b510      	push	{r4, lr}
 8007f36:	460c      	mov	r4, r1
 8007f38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f3c:	f000 f900 	bl	8008140 <_read_r>
 8007f40:	2800      	cmp	r0, #0
 8007f42:	bfab      	itete	ge
 8007f44:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007f46:	89a3      	ldrhlt	r3, [r4, #12]
 8007f48:	181b      	addge	r3, r3, r0
 8007f4a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007f4e:	bfac      	ite	ge
 8007f50:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007f52:	81a3      	strhlt	r3, [r4, #12]
 8007f54:	bd10      	pop	{r4, pc}

08007f56 <__swrite>:
 8007f56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f5a:	461f      	mov	r7, r3
 8007f5c:	898b      	ldrh	r3, [r1, #12]
 8007f5e:	05db      	lsls	r3, r3, #23
 8007f60:	4605      	mov	r5, r0
 8007f62:	460c      	mov	r4, r1
 8007f64:	4616      	mov	r6, r2
 8007f66:	d505      	bpl.n	8007f74 <__swrite+0x1e>
 8007f68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f6c:	2302      	movs	r3, #2
 8007f6e:	2200      	movs	r2, #0
 8007f70:	f000 f8d4 	bl	800811c <_lseek_r>
 8007f74:	89a3      	ldrh	r3, [r4, #12]
 8007f76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f7a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007f7e:	81a3      	strh	r3, [r4, #12]
 8007f80:	4632      	mov	r2, r6
 8007f82:	463b      	mov	r3, r7
 8007f84:	4628      	mov	r0, r5
 8007f86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f8a:	f000 b8eb 	b.w	8008164 <_write_r>

08007f8e <__sseek>:
 8007f8e:	b510      	push	{r4, lr}
 8007f90:	460c      	mov	r4, r1
 8007f92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f96:	f000 f8c1 	bl	800811c <_lseek_r>
 8007f9a:	1c43      	adds	r3, r0, #1
 8007f9c:	89a3      	ldrh	r3, [r4, #12]
 8007f9e:	bf15      	itete	ne
 8007fa0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007fa2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007fa6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007faa:	81a3      	strheq	r3, [r4, #12]
 8007fac:	bf18      	it	ne
 8007fae:	81a3      	strhne	r3, [r4, #12]
 8007fb0:	bd10      	pop	{r4, pc}

08007fb2 <__sclose>:
 8007fb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fb6:	f000 b8a1 	b.w	80080fc <_close_r>

08007fba <__swbuf_r>:
 8007fba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fbc:	460e      	mov	r6, r1
 8007fbe:	4614      	mov	r4, r2
 8007fc0:	4605      	mov	r5, r0
 8007fc2:	b118      	cbz	r0, 8007fcc <__swbuf_r+0x12>
 8007fc4:	6a03      	ldr	r3, [r0, #32]
 8007fc6:	b90b      	cbnz	r3, 8007fcc <__swbuf_r+0x12>
 8007fc8:	f7ff ff0e 	bl	8007de8 <__sinit>
 8007fcc:	69a3      	ldr	r3, [r4, #24]
 8007fce:	60a3      	str	r3, [r4, #8]
 8007fd0:	89a3      	ldrh	r3, [r4, #12]
 8007fd2:	071a      	lsls	r2, r3, #28
 8007fd4:	d501      	bpl.n	8007fda <__swbuf_r+0x20>
 8007fd6:	6923      	ldr	r3, [r4, #16]
 8007fd8:	b943      	cbnz	r3, 8007fec <__swbuf_r+0x32>
 8007fda:	4621      	mov	r1, r4
 8007fdc:	4628      	mov	r0, r5
 8007fde:	f000 f82b 	bl	8008038 <__swsetup_r>
 8007fe2:	b118      	cbz	r0, 8007fec <__swbuf_r+0x32>
 8007fe4:	f04f 37ff 	mov.w	r7, #4294967295
 8007fe8:	4638      	mov	r0, r7
 8007fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fec:	6823      	ldr	r3, [r4, #0]
 8007fee:	6922      	ldr	r2, [r4, #16]
 8007ff0:	1a98      	subs	r0, r3, r2
 8007ff2:	6963      	ldr	r3, [r4, #20]
 8007ff4:	b2f6      	uxtb	r6, r6
 8007ff6:	4283      	cmp	r3, r0
 8007ff8:	4637      	mov	r7, r6
 8007ffa:	dc05      	bgt.n	8008008 <__swbuf_r+0x4e>
 8007ffc:	4621      	mov	r1, r4
 8007ffe:	4628      	mov	r0, r5
 8008000:	f001 fd24 	bl	8009a4c <_fflush_r>
 8008004:	2800      	cmp	r0, #0
 8008006:	d1ed      	bne.n	8007fe4 <__swbuf_r+0x2a>
 8008008:	68a3      	ldr	r3, [r4, #8]
 800800a:	3b01      	subs	r3, #1
 800800c:	60a3      	str	r3, [r4, #8]
 800800e:	6823      	ldr	r3, [r4, #0]
 8008010:	1c5a      	adds	r2, r3, #1
 8008012:	6022      	str	r2, [r4, #0]
 8008014:	701e      	strb	r6, [r3, #0]
 8008016:	6962      	ldr	r2, [r4, #20]
 8008018:	1c43      	adds	r3, r0, #1
 800801a:	429a      	cmp	r2, r3
 800801c:	d004      	beq.n	8008028 <__swbuf_r+0x6e>
 800801e:	89a3      	ldrh	r3, [r4, #12]
 8008020:	07db      	lsls	r3, r3, #31
 8008022:	d5e1      	bpl.n	8007fe8 <__swbuf_r+0x2e>
 8008024:	2e0a      	cmp	r6, #10
 8008026:	d1df      	bne.n	8007fe8 <__swbuf_r+0x2e>
 8008028:	4621      	mov	r1, r4
 800802a:	4628      	mov	r0, r5
 800802c:	f001 fd0e 	bl	8009a4c <_fflush_r>
 8008030:	2800      	cmp	r0, #0
 8008032:	d0d9      	beq.n	8007fe8 <__swbuf_r+0x2e>
 8008034:	e7d6      	b.n	8007fe4 <__swbuf_r+0x2a>
	...

08008038 <__swsetup_r>:
 8008038:	b538      	push	{r3, r4, r5, lr}
 800803a:	4b29      	ldr	r3, [pc, #164]	@ (80080e0 <__swsetup_r+0xa8>)
 800803c:	4605      	mov	r5, r0
 800803e:	6818      	ldr	r0, [r3, #0]
 8008040:	460c      	mov	r4, r1
 8008042:	b118      	cbz	r0, 800804c <__swsetup_r+0x14>
 8008044:	6a03      	ldr	r3, [r0, #32]
 8008046:	b90b      	cbnz	r3, 800804c <__swsetup_r+0x14>
 8008048:	f7ff fece 	bl	8007de8 <__sinit>
 800804c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008050:	0719      	lsls	r1, r3, #28
 8008052:	d422      	bmi.n	800809a <__swsetup_r+0x62>
 8008054:	06da      	lsls	r2, r3, #27
 8008056:	d407      	bmi.n	8008068 <__swsetup_r+0x30>
 8008058:	2209      	movs	r2, #9
 800805a:	602a      	str	r2, [r5, #0]
 800805c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008060:	81a3      	strh	r3, [r4, #12]
 8008062:	f04f 30ff 	mov.w	r0, #4294967295
 8008066:	e033      	b.n	80080d0 <__swsetup_r+0x98>
 8008068:	0758      	lsls	r0, r3, #29
 800806a:	d512      	bpl.n	8008092 <__swsetup_r+0x5a>
 800806c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800806e:	b141      	cbz	r1, 8008082 <__swsetup_r+0x4a>
 8008070:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008074:	4299      	cmp	r1, r3
 8008076:	d002      	beq.n	800807e <__swsetup_r+0x46>
 8008078:	4628      	mov	r0, r5
 800807a:	f000 fe9f 	bl	8008dbc <_free_r>
 800807e:	2300      	movs	r3, #0
 8008080:	6363      	str	r3, [r4, #52]	@ 0x34
 8008082:	89a3      	ldrh	r3, [r4, #12]
 8008084:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008088:	81a3      	strh	r3, [r4, #12]
 800808a:	2300      	movs	r3, #0
 800808c:	6063      	str	r3, [r4, #4]
 800808e:	6923      	ldr	r3, [r4, #16]
 8008090:	6023      	str	r3, [r4, #0]
 8008092:	89a3      	ldrh	r3, [r4, #12]
 8008094:	f043 0308 	orr.w	r3, r3, #8
 8008098:	81a3      	strh	r3, [r4, #12]
 800809a:	6923      	ldr	r3, [r4, #16]
 800809c:	b94b      	cbnz	r3, 80080b2 <__swsetup_r+0x7a>
 800809e:	89a3      	ldrh	r3, [r4, #12]
 80080a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80080a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080a8:	d003      	beq.n	80080b2 <__swsetup_r+0x7a>
 80080aa:	4621      	mov	r1, r4
 80080ac:	4628      	mov	r0, r5
 80080ae:	f001 fd1b 	bl	8009ae8 <__smakebuf_r>
 80080b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080b6:	f013 0201 	ands.w	r2, r3, #1
 80080ba:	d00a      	beq.n	80080d2 <__swsetup_r+0x9a>
 80080bc:	2200      	movs	r2, #0
 80080be:	60a2      	str	r2, [r4, #8]
 80080c0:	6962      	ldr	r2, [r4, #20]
 80080c2:	4252      	negs	r2, r2
 80080c4:	61a2      	str	r2, [r4, #24]
 80080c6:	6922      	ldr	r2, [r4, #16]
 80080c8:	b942      	cbnz	r2, 80080dc <__swsetup_r+0xa4>
 80080ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80080ce:	d1c5      	bne.n	800805c <__swsetup_r+0x24>
 80080d0:	bd38      	pop	{r3, r4, r5, pc}
 80080d2:	0799      	lsls	r1, r3, #30
 80080d4:	bf58      	it	pl
 80080d6:	6962      	ldrpl	r2, [r4, #20]
 80080d8:	60a2      	str	r2, [r4, #8]
 80080da:	e7f4      	b.n	80080c6 <__swsetup_r+0x8e>
 80080dc:	2000      	movs	r0, #0
 80080de:	e7f7      	b.n	80080d0 <__swsetup_r+0x98>
 80080e0:	2000001c 	.word	0x2000001c

080080e4 <memset>:
 80080e4:	4402      	add	r2, r0
 80080e6:	4603      	mov	r3, r0
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d100      	bne.n	80080ee <memset+0xa>
 80080ec:	4770      	bx	lr
 80080ee:	f803 1b01 	strb.w	r1, [r3], #1
 80080f2:	e7f9      	b.n	80080e8 <memset+0x4>

080080f4 <_localeconv_r>:
 80080f4:	4800      	ldr	r0, [pc, #0]	@ (80080f8 <_localeconv_r+0x4>)
 80080f6:	4770      	bx	lr
 80080f8:	2000015c 	.word	0x2000015c

080080fc <_close_r>:
 80080fc:	b538      	push	{r3, r4, r5, lr}
 80080fe:	4d06      	ldr	r5, [pc, #24]	@ (8008118 <_close_r+0x1c>)
 8008100:	2300      	movs	r3, #0
 8008102:	4604      	mov	r4, r0
 8008104:	4608      	mov	r0, r1
 8008106:	602b      	str	r3, [r5, #0]
 8008108:	f7f9 f84a 	bl	80011a0 <_close>
 800810c:	1c43      	adds	r3, r0, #1
 800810e:	d102      	bne.n	8008116 <_close_r+0x1a>
 8008110:	682b      	ldr	r3, [r5, #0]
 8008112:	b103      	cbz	r3, 8008116 <_close_r+0x1a>
 8008114:	6023      	str	r3, [r4, #0]
 8008116:	bd38      	pop	{r3, r4, r5, pc}
 8008118:	24000b28 	.word	0x24000b28

0800811c <_lseek_r>:
 800811c:	b538      	push	{r3, r4, r5, lr}
 800811e:	4d07      	ldr	r5, [pc, #28]	@ (800813c <_lseek_r+0x20>)
 8008120:	4604      	mov	r4, r0
 8008122:	4608      	mov	r0, r1
 8008124:	4611      	mov	r1, r2
 8008126:	2200      	movs	r2, #0
 8008128:	602a      	str	r2, [r5, #0]
 800812a:	461a      	mov	r2, r3
 800812c:	f7f9 f842 	bl	80011b4 <_lseek>
 8008130:	1c43      	adds	r3, r0, #1
 8008132:	d102      	bne.n	800813a <_lseek_r+0x1e>
 8008134:	682b      	ldr	r3, [r5, #0]
 8008136:	b103      	cbz	r3, 800813a <_lseek_r+0x1e>
 8008138:	6023      	str	r3, [r4, #0]
 800813a:	bd38      	pop	{r3, r4, r5, pc}
 800813c:	24000b28 	.word	0x24000b28

08008140 <_read_r>:
 8008140:	b538      	push	{r3, r4, r5, lr}
 8008142:	4d07      	ldr	r5, [pc, #28]	@ (8008160 <_read_r+0x20>)
 8008144:	4604      	mov	r4, r0
 8008146:	4608      	mov	r0, r1
 8008148:	4611      	mov	r1, r2
 800814a:	2200      	movs	r2, #0
 800814c:	602a      	str	r2, [r5, #0]
 800814e:	461a      	mov	r2, r3
 8008150:	f7f9 f80c 	bl	800116c <_read>
 8008154:	1c43      	adds	r3, r0, #1
 8008156:	d102      	bne.n	800815e <_read_r+0x1e>
 8008158:	682b      	ldr	r3, [r5, #0]
 800815a:	b103      	cbz	r3, 800815e <_read_r+0x1e>
 800815c:	6023      	str	r3, [r4, #0]
 800815e:	bd38      	pop	{r3, r4, r5, pc}
 8008160:	24000b28 	.word	0x24000b28

08008164 <_write_r>:
 8008164:	b538      	push	{r3, r4, r5, lr}
 8008166:	4d07      	ldr	r5, [pc, #28]	@ (8008184 <_write_r+0x20>)
 8008168:	4604      	mov	r4, r0
 800816a:	4608      	mov	r0, r1
 800816c:	4611      	mov	r1, r2
 800816e:	2200      	movs	r2, #0
 8008170:	602a      	str	r2, [r5, #0]
 8008172:	461a      	mov	r2, r3
 8008174:	f7f9 f807 	bl	8001186 <_write>
 8008178:	1c43      	adds	r3, r0, #1
 800817a:	d102      	bne.n	8008182 <_write_r+0x1e>
 800817c:	682b      	ldr	r3, [r5, #0]
 800817e:	b103      	cbz	r3, 8008182 <_write_r+0x1e>
 8008180:	6023      	str	r3, [r4, #0]
 8008182:	bd38      	pop	{r3, r4, r5, pc}
 8008184:	24000b28 	.word	0x24000b28

08008188 <__errno>:
 8008188:	4b01      	ldr	r3, [pc, #4]	@ (8008190 <__errno+0x8>)
 800818a:	6818      	ldr	r0, [r3, #0]
 800818c:	4770      	bx	lr
 800818e:	bf00      	nop
 8008190:	2000001c 	.word	0x2000001c

08008194 <__libc_init_array>:
 8008194:	b570      	push	{r4, r5, r6, lr}
 8008196:	4d0d      	ldr	r5, [pc, #52]	@ (80081cc <__libc_init_array+0x38>)
 8008198:	4c0d      	ldr	r4, [pc, #52]	@ (80081d0 <__libc_init_array+0x3c>)
 800819a:	1b64      	subs	r4, r4, r5
 800819c:	10a4      	asrs	r4, r4, #2
 800819e:	2600      	movs	r6, #0
 80081a0:	42a6      	cmp	r6, r4
 80081a2:	d109      	bne.n	80081b8 <__libc_init_array+0x24>
 80081a4:	4d0b      	ldr	r5, [pc, #44]	@ (80081d4 <__libc_init_array+0x40>)
 80081a6:	4c0c      	ldr	r4, [pc, #48]	@ (80081d8 <__libc_init_array+0x44>)
 80081a8:	f001 fdbc 	bl	8009d24 <_init>
 80081ac:	1b64      	subs	r4, r4, r5
 80081ae:	10a4      	asrs	r4, r4, #2
 80081b0:	2600      	movs	r6, #0
 80081b2:	42a6      	cmp	r6, r4
 80081b4:	d105      	bne.n	80081c2 <__libc_init_array+0x2e>
 80081b6:	bd70      	pop	{r4, r5, r6, pc}
 80081b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80081bc:	4798      	blx	r3
 80081be:	3601      	adds	r6, #1
 80081c0:	e7ee      	b.n	80081a0 <__libc_init_array+0xc>
 80081c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80081c6:	4798      	blx	r3
 80081c8:	3601      	adds	r6, #1
 80081ca:	e7f2      	b.n	80081b2 <__libc_init_array+0x1e>
 80081cc:	0800a238 	.word	0x0800a238
 80081d0:	0800a238 	.word	0x0800a238
 80081d4:	0800a238 	.word	0x0800a238
 80081d8:	0800a23c 	.word	0x0800a23c

080081dc <__retarget_lock_init_recursive>:
 80081dc:	4770      	bx	lr

080081de <__retarget_lock_acquire_recursive>:
 80081de:	4770      	bx	lr

080081e0 <__retarget_lock_release_recursive>:
 80081e0:	4770      	bx	lr

080081e2 <memcpy>:
 80081e2:	440a      	add	r2, r1
 80081e4:	4291      	cmp	r1, r2
 80081e6:	f100 33ff 	add.w	r3, r0, #4294967295
 80081ea:	d100      	bne.n	80081ee <memcpy+0xc>
 80081ec:	4770      	bx	lr
 80081ee:	b510      	push	{r4, lr}
 80081f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081f8:	4291      	cmp	r1, r2
 80081fa:	d1f9      	bne.n	80081f0 <memcpy+0xe>
 80081fc:	bd10      	pop	{r4, pc}

080081fe <quorem>:
 80081fe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008202:	6903      	ldr	r3, [r0, #16]
 8008204:	690c      	ldr	r4, [r1, #16]
 8008206:	42a3      	cmp	r3, r4
 8008208:	4607      	mov	r7, r0
 800820a:	db7e      	blt.n	800830a <quorem+0x10c>
 800820c:	3c01      	subs	r4, #1
 800820e:	f101 0814 	add.w	r8, r1, #20
 8008212:	00a3      	lsls	r3, r4, #2
 8008214:	f100 0514 	add.w	r5, r0, #20
 8008218:	9300      	str	r3, [sp, #0]
 800821a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800821e:	9301      	str	r3, [sp, #4]
 8008220:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008224:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008228:	3301      	adds	r3, #1
 800822a:	429a      	cmp	r2, r3
 800822c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008230:	fbb2 f6f3 	udiv	r6, r2, r3
 8008234:	d32e      	bcc.n	8008294 <quorem+0x96>
 8008236:	f04f 0a00 	mov.w	sl, #0
 800823a:	46c4      	mov	ip, r8
 800823c:	46ae      	mov	lr, r5
 800823e:	46d3      	mov	fp, sl
 8008240:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008244:	b298      	uxth	r0, r3
 8008246:	fb06 a000 	mla	r0, r6, r0, sl
 800824a:	0c02      	lsrs	r2, r0, #16
 800824c:	0c1b      	lsrs	r3, r3, #16
 800824e:	fb06 2303 	mla	r3, r6, r3, r2
 8008252:	f8de 2000 	ldr.w	r2, [lr]
 8008256:	b280      	uxth	r0, r0
 8008258:	b292      	uxth	r2, r2
 800825a:	1a12      	subs	r2, r2, r0
 800825c:	445a      	add	r2, fp
 800825e:	f8de 0000 	ldr.w	r0, [lr]
 8008262:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008266:	b29b      	uxth	r3, r3
 8008268:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800826c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008270:	b292      	uxth	r2, r2
 8008272:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008276:	45e1      	cmp	r9, ip
 8008278:	f84e 2b04 	str.w	r2, [lr], #4
 800827c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008280:	d2de      	bcs.n	8008240 <quorem+0x42>
 8008282:	9b00      	ldr	r3, [sp, #0]
 8008284:	58eb      	ldr	r3, [r5, r3]
 8008286:	b92b      	cbnz	r3, 8008294 <quorem+0x96>
 8008288:	9b01      	ldr	r3, [sp, #4]
 800828a:	3b04      	subs	r3, #4
 800828c:	429d      	cmp	r5, r3
 800828e:	461a      	mov	r2, r3
 8008290:	d32f      	bcc.n	80082f2 <quorem+0xf4>
 8008292:	613c      	str	r4, [r7, #16]
 8008294:	4638      	mov	r0, r7
 8008296:	f001 f90b 	bl	80094b0 <__mcmp>
 800829a:	2800      	cmp	r0, #0
 800829c:	db25      	blt.n	80082ea <quorem+0xec>
 800829e:	4629      	mov	r1, r5
 80082a0:	2000      	movs	r0, #0
 80082a2:	f858 2b04 	ldr.w	r2, [r8], #4
 80082a6:	f8d1 c000 	ldr.w	ip, [r1]
 80082aa:	fa1f fe82 	uxth.w	lr, r2
 80082ae:	fa1f f38c 	uxth.w	r3, ip
 80082b2:	eba3 030e 	sub.w	r3, r3, lr
 80082b6:	4403      	add	r3, r0
 80082b8:	0c12      	lsrs	r2, r2, #16
 80082ba:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80082be:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80082c2:	b29b      	uxth	r3, r3
 80082c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80082c8:	45c1      	cmp	r9, r8
 80082ca:	f841 3b04 	str.w	r3, [r1], #4
 80082ce:	ea4f 4022 	mov.w	r0, r2, asr #16
 80082d2:	d2e6      	bcs.n	80082a2 <quorem+0xa4>
 80082d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80082d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80082dc:	b922      	cbnz	r2, 80082e8 <quorem+0xea>
 80082de:	3b04      	subs	r3, #4
 80082e0:	429d      	cmp	r5, r3
 80082e2:	461a      	mov	r2, r3
 80082e4:	d30b      	bcc.n	80082fe <quorem+0x100>
 80082e6:	613c      	str	r4, [r7, #16]
 80082e8:	3601      	adds	r6, #1
 80082ea:	4630      	mov	r0, r6
 80082ec:	b003      	add	sp, #12
 80082ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082f2:	6812      	ldr	r2, [r2, #0]
 80082f4:	3b04      	subs	r3, #4
 80082f6:	2a00      	cmp	r2, #0
 80082f8:	d1cb      	bne.n	8008292 <quorem+0x94>
 80082fa:	3c01      	subs	r4, #1
 80082fc:	e7c6      	b.n	800828c <quorem+0x8e>
 80082fe:	6812      	ldr	r2, [r2, #0]
 8008300:	3b04      	subs	r3, #4
 8008302:	2a00      	cmp	r2, #0
 8008304:	d1ef      	bne.n	80082e6 <quorem+0xe8>
 8008306:	3c01      	subs	r4, #1
 8008308:	e7ea      	b.n	80082e0 <quorem+0xe2>
 800830a:	2000      	movs	r0, #0
 800830c:	e7ee      	b.n	80082ec <quorem+0xee>
	...

08008310 <_dtoa_r>:
 8008310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008314:	ed2d 8b02 	vpush	{d8}
 8008318:	69c7      	ldr	r7, [r0, #28]
 800831a:	b091      	sub	sp, #68	@ 0x44
 800831c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008320:	ec55 4b10 	vmov	r4, r5, d0
 8008324:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8008326:	9107      	str	r1, [sp, #28]
 8008328:	4681      	mov	r9, r0
 800832a:	9209      	str	r2, [sp, #36]	@ 0x24
 800832c:	930d      	str	r3, [sp, #52]	@ 0x34
 800832e:	b97f      	cbnz	r7, 8008350 <_dtoa_r+0x40>
 8008330:	2010      	movs	r0, #16
 8008332:	f000 fd8d 	bl	8008e50 <malloc>
 8008336:	4602      	mov	r2, r0
 8008338:	f8c9 001c 	str.w	r0, [r9, #28]
 800833c:	b920      	cbnz	r0, 8008348 <_dtoa_r+0x38>
 800833e:	4ba0      	ldr	r3, [pc, #640]	@ (80085c0 <_dtoa_r+0x2b0>)
 8008340:	21ef      	movs	r1, #239	@ 0xef
 8008342:	48a0      	ldr	r0, [pc, #640]	@ (80085c4 <_dtoa_r+0x2b4>)
 8008344:	f001 fc3e 	bl	8009bc4 <__assert_func>
 8008348:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800834c:	6007      	str	r7, [r0, #0]
 800834e:	60c7      	str	r7, [r0, #12]
 8008350:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008354:	6819      	ldr	r1, [r3, #0]
 8008356:	b159      	cbz	r1, 8008370 <_dtoa_r+0x60>
 8008358:	685a      	ldr	r2, [r3, #4]
 800835a:	604a      	str	r2, [r1, #4]
 800835c:	2301      	movs	r3, #1
 800835e:	4093      	lsls	r3, r2
 8008360:	608b      	str	r3, [r1, #8]
 8008362:	4648      	mov	r0, r9
 8008364:	f000 fe6a 	bl	800903c <_Bfree>
 8008368:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800836c:	2200      	movs	r2, #0
 800836e:	601a      	str	r2, [r3, #0]
 8008370:	1e2b      	subs	r3, r5, #0
 8008372:	bfbb      	ittet	lt
 8008374:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008378:	9303      	strlt	r3, [sp, #12]
 800837a:	2300      	movge	r3, #0
 800837c:	2201      	movlt	r2, #1
 800837e:	bfac      	ite	ge
 8008380:	6033      	strge	r3, [r6, #0]
 8008382:	6032      	strlt	r2, [r6, #0]
 8008384:	4b90      	ldr	r3, [pc, #576]	@ (80085c8 <_dtoa_r+0x2b8>)
 8008386:	9e03      	ldr	r6, [sp, #12]
 8008388:	43b3      	bics	r3, r6
 800838a:	d110      	bne.n	80083ae <_dtoa_r+0x9e>
 800838c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800838e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008392:	6013      	str	r3, [r2, #0]
 8008394:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8008398:	4323      	orrs	r3, r4
 800839a:	f000 84de 	beq.w	8008d5a <_dtoa_r+0xa4a>
 800839e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80083a0:	4f8a      	ldr	r7, [pc, #552]	@ (80085cc <_dtoa_r+0x2bc>)
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	f000 84e0 	beq.w	8008d68 <_dtoa_r+0xa58>
 80083a8:	1cfb      	adds	r3, r7, #3
 80083aa:	f000 bcdb 	b.w	8008d64 <_dtoa_r+0xa54>
 80083ae:	ed9d 8b02 	vldr	d8, [sp, #8]
 80083b2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80083b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083ba:	d10a      	bne.n	80083d2 <_dtoa_r+0xc2>
 80083bc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80083be:	2301      	movs	r3, #1
 80083c0:	6013      	str	r3, [r2, #0]
 80083c2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80083c4:	b113      	cbz	r3, 80083cc <_dtoa_r+0xbc>
 80083c6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80083c8:	4b81      	ldr	r3, [pc, #516]	@ (80085d0 <_dtoa_r+0x2c0>)
 80083ca:	6013      	str	r3, [r2, #0]
 80083cc:	4f81      	ldr	r7, [pc, #516]	@ (80085d4 <_dtoa_r+0x2c4>)
 80083ce:	f000 bccb 	b.w	8008d68 <_dtoa_r+0xa58>
 80083d2:	aa0e      	add	r2, sp, #56	@ 0x38
 80083d4:	a90f      	add	r1, sp, #60	@ 0x3c
 80083d6:	4648      	mov	r0, r9
 80083d8:	eeb0 0b48 	vmov.f64	d0, d8
 80083dc:	f001 f918 	bl	8009610 <__d2b>
 80083e0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80083e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80083e6:	9001      	str	r0, [sp, #4]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d045      	beq.n	8008478 <_dtoa_r+0x168>
 80083ec:	eeb0 7b48 	vmov.f64	d7, d8
 80083f0:	ee18 1a90 	vmov	r1, s17
 80083f4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80083f8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80083fc:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8008400:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8008404:	2500      	movs	r5, #0
 8008406:	ee07 1a90 	vmov	s15, r1
 800840a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800840e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80085a8 <_dtoa_r+0x298>
 8008412:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008416:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80085b0 <_dtoa_r+0x2a0>
 800841a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800841e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80085b8 <_dtoa_r+0x2a8>
 8008422:	ee07 3a90 	vmov	s15, r3
 8008426:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800842a:	eeb0 7b46 	vmov.f64	d7, d6
 800842e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8008432:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8008436:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800843a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800843e:	ee16 8a90 	vmov	r8, s13
 8008442:	d508      	bpl.n	8008456 <_dtoa_r+0x146>
 8008444:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8008448:	eeb4 6b47 	vcmp.f64	d6, d7
 800844c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008450:	bf18      	it	ne
 8008452:	f108 38ff 	addne.w	r8, r8, #4294967295
 8008456:	f1b8 0f16 	cmp.w	r8, #22
 800845a:	d82b      	bhi.n	80084b4 <_dtoa_r+0x1a4>
 800845c:	495e      	ldr	r1, [pc, #376]	@ (80085d8 <_dtoa_r+0x2c8>)
 800845e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8008462:	ed91 7b00 	vldr	d7, [r1]
 8008466:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800846a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800846e:	d501      	bpl.n	8008474 <_dtoa_r+0x164>
 8008470:	f108 38ff 	add.w	r8, r8, #4294967295
 8008474:	2100      	movs	r1, #0
 8008476:	e01e      	b.n	80084b6 <_dtoa_r+0x1a6>
 8008478:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800847a:	4413      	add	r3, r2
 800847c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8008480:	2920      	cmp	r1, #32
 8008482:	bfc1      	itttt	gt
 8008484:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8008488:	408e      	lslgt	r6, r1
 800848a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800848e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8008492:	bfd6      	itet	le
 8008494:	f1c1 0120 	rsble	r1, r1, #32
 8008498:	4331      	orrgt	r1, r6
 800849a:	fa04 f101 	lslle.w	r1, r4, r1
 800849e:	ee07 1a90 	vmov	s15, r1
 80084a2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80084a6:	3b01      	subs	r3, #1
 80084a8:	ee17 1a90 	vmov	r1, s15
 80084ac:	2501      	movs	r5, #1
 80084ae:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 80084b2:	e7a8      	b.n	8008406 <_dtoa_r+0xf6>
 80084b4:	2101      	movs	r1, #1
 80084b6:	1ad2      	subs	r2, r2, r3
 80084b8:	1e53      	subs	r3, r2, #1
 80084ba:	9306      	str	r3, [sp, #24]
 80084bc:	bf45      	ittet	mi
 80084be:	f1c2 0301 	rsbmi	r3, r2, #1
 80084c2:	9305      	strmi	r3, [sp, #20]
 80084c4:	2300      	movpl	r3, #0
 80084c6:	2300      	movmi	r3, #0
 80084c8:	bf4c      	ite	mi
 80084ca:	9306      	strmi	r3, [sp, #24]
 80084cc:	9305      	strpl	r3, [sp, #20]
 80084ce:	f1b8 0f00 	cmp.w	r8, #0
 80084d2:	910c      	str	r1, [sp, #48]	@ 0x30
 80084d4:	db18      	blt.n	8008508 <_dtoa_r+0x1f8>
 80084d6:	9b06      	ldr	r3, [sp, #24]
 80084d8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80084dc:	4443      	add	r3, r8
 80084de:	9306      	str	r3, [sp, #24]
 80084e0:	2300      	movs	r3, #0
 80084e2:	9a07      	ldr	r2, [sp, #28]
 80084e4:	2a09      	cmp	r2, #9
 80084e6:	d849      	bhi.n	800857c <_dtoa_r+0x26c>
 80084e8:	2a05      	cmp	r2, #5
 80084ea:	bfc4      	itt	gt
 80084ec:	3a04      	subgt	r2, #4
 80084ee:	9207      	strgt	r2, [sp, #28]
 80084f0:	9a07      	ldr	r2, [sp, #28]
 80084f2:	f1a2 0202 	sub.w	r2, r2, #2
 80084f6:	bfcc      	ite	gt
 80084f8:	2400      	movgt	r4, #0
 80084fa:	2401      	movle	r4, #1
 80084fc:	2a03      	cmp	r2, #3
 80084fe:	d848      	bhi.n	8008592 <_dtoa_r+0x282>
 8008500:	e8df f002 	tbb	[pc, r2]
 8008504:	3a2c2e0b 	.word	0x3a2c2e0b
 8008508:	9b05      	ldr	r3, [sp, #20]
 800850a:	2200      	movs	r2, #0
 800850c:	eba3 0308 	sub.w	r3, r3, r8
 8008510:	9305      	str	r3, [sp, #20]
 8008512:	920a      	str	r2, [sp, #40]	@ 0x28
 8008514:	f1c8 0300 	rsb	r3, r8, #0
 8008518:	e7e3      	b.n	80084e2 <_dtoa_r+0x1d2>
 800851a:	2200      	movs	r2, #0
 800851c:	9208      	str	r2, [sp, #32]
 800851e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008520:	2a00      	cmp	r2, #0
 8008522:	dc39      	bgt.n	8008598 <_dtoa_r+0x288>
 8008524:	f04f 0b01 	mov.w	fp, #1
 8008528:	46da      	mov	sl, fp
 800852a:	465a      	mov	r2, fp
 800852c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8008530:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8008534:	2100      	movs	r1, #0
 8008536:	2004      	movs	r0, #4
 8008538:	f100 0614 	add.w	r6, r0, #20
 800853c:	4296      	cmp	r6, r2
 800853e:	d930      	bls.n	80085a2 <_dtoa_r+0x292>
 8008540:	6079      	str	r1, [r7, #4]
 8008542:	4648      	mov	r0, r9
 8008544:	9304      	str	r3, [sp, #16]
 8008546:	f000 fd39 	bl	8008fbc <_Balloc>
 800854a:	9b04      	ldr	r3, [sp, #16]
 800854c:	4607      	mov	r7, r0
 800854e:	2800      	cmp	r0, #0
 8008550:	d146      	bne.n	80085e0 <_dtoa_r+0x2d0>
 8008552:	4b22      	ldr	r3, [pc, #136]	@ (80085dc <_dtoa_r+0x2cc>)
 8008554:	4602      	mov	r2, r0
 8008556:	f240 11af 	movw	r1, #431	@ 0x1af
 800855a:	e6f2      	b.n	8008342 <_dtoa_r+0x32>
 800855c:	2201      	movs	r2, #1
 800855e:	e7dd      	b.n	800851c <_dtoa_r+0x20c>
 8008560:	2200      	movs	r2, #0
 8008562:	9208      	str	r2, [sp, #32]
 8008564:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008566:	eb08 0b02 	add.w	fp, r8, r2
 800856a:	f10b 0a01 	add.w	sl, fp, #1
 800856e:	4652      	mov	r2, sl
 8008570:	2a01      	cmp	r2, #1
 8008572:	bfb8      	it	lt
 8008574:	2201      	movlt	r2, #1
 8008576:	e7db      	b.n	8008530 <_dtoa_r+0x220>
 8008578:	2201      	movs	r2, #1
 800857a:	e7f2      	b.n	8008562 <_dtoa_r+0x252>
 800857c:	2401      	movs	r4, #1
 800857e:	2200      	movs	r2, #0
 8008580:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8008584:	f04f 3bff 	mov.w	fp, #4294967295
 8008588:	2100      	movs	r1, #0
 800858a:	46da      	mov	sl, fp
 800858c:	2212      	movs	r2, #18
 800858e:	9109      	str	r1, [sp, #36]	@ 0x24
 8008590:	e7ce      	b.n	8008530 <_dtoa_r+0x220>
 8008592:	2201      	movs	r2, #1
 8008594:	9208      	str	r2, [sp, #32]
 8008596:	e7f5      	b.n	8008584 <_dtoa_r+0x274>
 8008598:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800859c:	46da      	mov	sl, fp
 800859e:	465a      	mov	r2, fp
 80085a0:	e7c6      	b.n	8008530 <_dtoa_r+0x220>
 80085a2:	3101      	adds	r1, #1
 80085a4:	0040      	lsls	r0, r0, #1
 80085a6:	e7c7      	b.n	8008538 <_dtoa_r+0x228>
 80085a8:	636f4361 	.word	0x636f4361
 80085ac:	3fd287a7 	.word	0x3fd287a7
 80085b0:	8b60c8b3 	.word	0x8b60c8b3
 80085b4:	3fc68a28 	.word	0x3fc68a28
 80085b8:	509f79fb 	.word	0x509f79fb
 80085bc:	3fd34413 	.word	0x3fd34413
 80085c0:	08009f01 	.word	0x08009f01
 80085c4:	08009f18 	.word	0x08009f18
 80085c8:	7ff00000 	.word	0x7ff00000
 80085cc:	08009efd 	.word	0x08009efd
 80085d0:	08009ed1 	.word	0x08009ed1
 80085d4:	08009ed0 	.word	0x08009ed0
 80085d8:	0800a010 	.word	0x0800a010
 80085dc:	08009f70 	.word	0x08009f70
 80085e0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80085e4:	f1ba 0f0e 	cmp.w	sl, #14
 80085e8:	6010      	str	r0, [r2, #0]
 80085ea:	d86f      	bhi.n	80086cc <_dtoa_r+0x3bc>
 80085ec:	2c00      	cmp	r4, #0
 80085ee:	d06d      	beq.n	80086cc <_dtoa_r+0x3bc>
 80085f0:	f1b8 0f00 	cmp.w	r8, #0
 80085f4:	f340 80c2 	ble.w	800877c <_dtoa_r+0x46c>
 80085f8:	4aca      	ldr	r2, [pc, #808]	@ (8008924 <_dtoa_r+0x614>)
 80085fa:	f008 010f 	and.w	r1, r8, #15
 80085fe:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8008602:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8008606:	ed92 7b00 	vldr	d7, [r2]
 800860a:	ea4f 1128 	mov.w	r1, r8, asr #4
 800860e:	f000 80a9 	beq.w	8008764 <_dtoa_r+0x454>
 8008612:	4ac5      	ldr	r2, [pc, #788]	@ (8008928 <_dtoa_r+0x618>)
 8008614:	ed92 6b08 	vldr	d6, [r2, #32]
 8008618:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800861c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8008620:	f001 010f 	and.w	r1, r1, #15
 8008624:	2203      	movs	r2, #3
 8008626:	48c0      	ldr	r0, [pc, #768]	@ (8008928 <_dtoa_r+0x618>)
 8008628:	2900      	cmp	r1, #0
 800862a:	f040 809d 	bne.w	8008768 <_dtoa_r+0x458>
 800862e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008632:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008636:	ed8d 7b02 	vstr	d7, [sp, #8]
 800863a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800863c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008640:	2900      	cmp	r1, #0
 8008642:	f000 80c1 	beq.w	80087c8 <_dtoa_r+0x4b8>
 8008646:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800864a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800864e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008652:	f140 80b9 	bpl.w	80087c8 <_dtoa_r+0x4b8>
 8008656:	f1ba 0f00 	cmp.w	sl, #0
 800865a:	f000 80b5 	beq.w	80087c8 <_dtoa_r+0x4b8>
 800865e:	f1bb 0f00 	cmp.w	fp, #0
 8008662:	dd31      	ble.n	80086c8 <_dtoa_r+0x3b8>
 8008664:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8008668:	ee27 7b06 	vmul.f64	d7, d7, d6
 800866c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008670:	f108 31ff 	add.w	r1, r8, #4294967295
 8008674:	9104      	str	r1, [sp, #16]
 8008676:	3201      	adds	r2, #1
 8008678:	465c      	mov	r4, fp
 800867a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800867e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8008682:	ee07 2a90 	vmov	s15, r2
 8008686:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800868a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800868e:	ee15 2a90 	vmov	r2, s11
 8008692:	ec51 0b15 	vmov	r0, r1, d5
 8008696:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800869a:	2c00      	cmp	r4, #0
 800869c:	f040 8098 	bne.w	80087d0 <_dtoa_r+0x4c0>
 80086a0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80086a4:	ee36 6b47 	vsub.f64	d6, d6, d7
 80086a8:	ec41 0b17 	vmov	d7, r0, r1
 80086ac:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80086b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086b4:	f300 8261 	bgt.w	8008b7a <_dtoa_r+0x86a>
 80086b8:	eeb1 7b47 	vneg.f64	d7, d7
 80086bc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80086c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086c4:	f100 80f5 	bmi.w	80088b2 <_dtoa_r+0x5a2>
 80086c8:	ed8d 8b02 	vstr	d8, [sp, #8]
 80086cc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80086ce:	2a00      	cmp	r2, #0
 80086d0:	f2c0 812c 	blt.w	800892c <_dtoa_r+0x61c>
 80086d4:	f1b8 0f0e 	cmp.w	r8, #14
 80086d8:	f300 8128 	bgt.w	800892c <_dtoa_r+0x61c>
 80086dc:	4b91      	ldr	r3, [pc, #580]	@ (8008924 <_dtoa_r+0x614>)
 80086de:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80086e2:	ed93 6b00 	vldr	d6, [r3]
 80086e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	da03      	bge.n	80086f4 <_dtoa_r+0x3e4>
 80086ec:	f1ba 0f00 	cmp.w	sl, #0
 80086f0:	f340 80d2 	ble.w	8008898 <_dtoa_r+0x588>
 80086f4:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 80086f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80086fc:	463e      	mov	r6, r7
 80086fe:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8008702:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8008706:	ee15 3a10 	vmov	r3, s10
 800870a:	3330      	adds	r3, #48	@ 0x30
 800870c:	f806 3b01 	strb.w	r3, [r6], #1
 8008710:	1bf3      	subs	r3, r6, r7
 8008712:	459a      	cmp	sl, r3
 8008714:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8008718:	eea3 7b46 	vfms.f64	d7, d3, d6
 800871c:	f040 80f8 	bne.w	8008910 <_dtoa_r+0x600>
 8008720:	ee37 7b07 	vadd.f64	d7, d7, d7
 8008724:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800872c:	f300 80dd 	bgt.w	80088ea <_dtoa_r+0x5da>
 8008730:	eeb4 7b46 	vcmp.f64	d7, d6
 8008734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008738:	d104      	bne.n	8008744 <_dtoa_r+0x434>
 800873a:	ee15 3a10 	vmov	r3, s10
 800873e:	07db      	lsls	r3, r3, #31
 8008740:	f100 80d3 	bmi.w	80088ea <_dtoa_r+0x5da>
 8008744:	9901      	ldr	r1, [sp, #4]
 8008746:	4648      	mov	r0, r9
 8008748:	f000 fc78 	bl	800903c <_Bfree>
 800874c:	2300      	movs	r3, #0
 800874e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008750:	7033      	strb	r3, [r6, #0]
 8008752:	f108 0301 	add.w	r3, r8, #1
 8008756:	6013      	str	r3, [r2, #0]
 8008758:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800875a:	2b00      	cmp	r3, #0
 800875c:	f000 8304 	beq.w	8008d68 <_dtoa_r+0xa58>
 8008760:	601e      	str	r6, [r3, #0]
 8008762:	e301      	b.n	8008d68 <_dtoa_r+0xa58>
 8008764:	2202      	movs	r2, #2
 8008766:	e75e      	b.n	8008626 <_dtoa_r+0x316>
 8008768:	07cc      	lsls	r4, r1, #31
 800876a:	d504      	bpl.n	8008776 <_dtoa_r+0x466>
 800876c:	ed90 6b00 	vldr	d6, [r0]
 8008770:	3201      	adds	r2, #1
 8008772:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008776:	1049      	asrs	r1, r1, #1
 8008778:	3008      	adds	r0, #8
 800877a:	e755      	b.n	8008628 <_dtoa_r+0x318>
 800877c:	d022      	beq.n	80087c4 <_dtoa_r+0x4b4>
 800877e:	f1c8 0100 	rsb	r1, r8, #0
 8008782:	4a68      	ldr	r2, [pc, #416]	@ (8008924 <_dtoa_r+0x614>)
 8008784:	f001 000f 	and.w	r0, r1, #15
 8008788:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800878c:	ed92 7b00 	vldr	d7, [r2]
 8008790:	ee28 7b07 	vmul.f64	d7, d8, d7
 8008794:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008798:	4863      	ldr	r0, [pc, #396]	@ (8008928 <_dtoa_r+0x618>)
 800879a:	1109      	asrs	r1, r1, #4
 800879c:	2400      	movs	r4, #0
 800879e:	2202      	movs	r2, #2
 80087a0:	b929      	cbnz	r1, 80087ae <_dtoa_r+0x49e>
 80087a2:	2c00      	cmp	r4, #0
 80087a4:	f43f af49 	beq.w	800863a <_dtoa_r+0x32a>
 80087a8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80087ac:	e745      	b.n	800863a <_dtoa_r+0x32a>
 80087ae:	07ce      	lsls	r6, r1, #31
 80087b0:	d505      	bpl.n	80087be <_dtoa_r+0x4ae>
 80087b2:	ed90 6b00 	vldr	d6, [r0]
 80087b6:	3201      	adds	r2, #1
 80087b8:	2401      	movs	r4, #1
 80087ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 80087be:	1049      	asrs	r1, r1, #1
 80087c0:	3008      	adds	r0, #8
 80087c2:	e7ed      	b.n	80087a0 <_dtoa_r+0x490>
 80087c4:	2202      	movs	r2, #2
 80087c6:	e738      	b.n	800863a <_dtoa_r+0x32a>
 80087c8:	f8cd 8010 	str.w	r8, [sp, #16]
 80087cc:	4654      	mov	r4, sl
 80087ce:	e754      	b.n	800867a <_dtoa_r+0x36a>
 80087d0:	4a54      	ldr	r2, [pc, #336]	@ (8008924 <_dtoa_r+0x614>)
 80087d2:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80087d6:	ed12 4b02 	vldr	d4, [r2, #-8]
 80087da:	9a08      	ldr	r2, [sp, #32]
 80087dc:	ec41 0b17 	vmov	d7, r0, r1
 80087e0:	443c      	add	r4, r7
 80087e2:	b34a      	cbz	r2, 8008838 <_dtoa_r+0x528>
 80087e4:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 80087e8:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 80087ec:	463e      	mov	r6, r7
 80087ee:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80087f2:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80087f6:	ee35 7b47 	vsub.f64	d7, d5, d7
 80087fa:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80087fe:	ee14 2a90 	vmov	r2, s9
 8008802:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008806:	3230      	adds	r2, #48	@ 0x30
 8008808:	ee36 6b45 	vsub.f64	d6, d6, d5
 800880c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008814:	f806 2b01 	strb.w	r2, [r6], #1
 8008818:	d438      	bmi.n	800888c <_dtoa_r+0x57c>
 800881a:	ee32 5b46 	vsub.f64	d5, d2, d6
 800881e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8008822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008826:	d462      	bmi.n	80088ee <_dtoa_r+0x5de>
 8008828:	42a6      	cmp	r6, r4
 800882a:	f43f af4d 	beq.w	80086c8 <_dtoa_r+0x3b8>
 800882e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8008832:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008836:	e7e0      	b.n	80087fa <_dtoa_r+0x4ea>
 8008838:	4621      	mov	r1, r4
 800883a:	463e      	mov	r6, r7
 800883c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008840:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8008844:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008848:	ee14 2a90 	vmov	r2, s9
 800884c:	3230      	adds	r2, #48	@ 0x30
 800884e:	f806 2b01 	strb.w	r2, [r6], #1
 8008852:	42a6      	cmp	r6, r4
 8008854:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008858:	ee36 6b45 	vsub.f64	d6, d6, d5
 800885c:	d119      	bne.n	8008892 <_dtoa_r+0x582>
 800885e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8008862:	ee37 4b05 	vadd.f64	d4, d7, d5
 8008866:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800886a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800886e:	dc3e      	bgt.n	80088ee <_dtoa_r+0x5de>
 8008870:	ee35 5b47 	vsub.f64	d5, d5, d7
 8008874:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8008878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800887c:	f57f af24 	bpl.w	80086c8 <_dtoa_r+0x3b8>
 8008880:	460e      	mov	r6, r1
 8008882:	3901      	subs	r1, #1
 8008884:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008888:	2b30      	cmp	r3, #48	@ 0x30
 800888a:	d0f9      	beq.n	8008880 <_dtoa_r+0x570>
 800888c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008890:	e758      	b.n	8008744 <_dtoa_r+0x434>
 8008892:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008896:	e7d5      	b.n	8008844 <_dtoa_r+0x534>
 8008898:	d10b      	bne.n	80088b2 <_dtoa_r+0x5a2>
 800889a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800889e:	ee26 6b07 	vmul.f64	d6, d6, d7
 80088a2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80088a6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80088aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088ae:	f2c0 8161 	blt.w	8008b74 <_dtoa_r+0x864>
 80088b2:	2400      	movs	r4, #0
 80088b4:	4625      	mov	r5, r4
 80088b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088b8:	43db      	mvns	r3, r3
 80088ba:	9304      	str	r3, [sp, #16]
 80088bc:	463e      	mov	r6, r7
 80088be:	f04f 0800 	mov.w	r8, #0
 80088c2:	4621      	mov	r1, r4
 80088c4:	4648      	mov	r0, r9
 80088c6:	f000 fbb9 	bl	800903c <_Bfree>
 80088ca:	2d00      	cmp	r5, #0
 80088cc:	d0de      	beq.n	800888c <_dtoa_r+0x57c>
 80088ce:	f1b8 0f00 	cmp.w	r8, #0
 80088d2:	d005      	beq.n	80088e0 <_dtoa_r+0x5d0>
 80088d4:	45a8      	cmp	r8, r5
 80088d6:	d003      	beq.n	80088e0 <_dtoa_r+0x5d0>
 80088d8:	4641      	mov	r1, r8
 80088da:	4648      	mov	r0, r9
 80088dc:	f000 fbae 	bl	800903c <_Bfree>
 80088e0:	4629      	mov	r1, r5
 80088e2:	4648      	mov	r0, r9
 80088e4:	f000 fbaa 	bl	800903c <_Bfree>
 80088e8:	e7d0      	b.n	800888c <_dtoa_r+0x57c>
 80088ea:	f8cd 8010 	str.w	r8, [sp, #16]
 80088ee:	4633      	mov	r3, r6
 80088f0:	461e      	mov	r6, r3
 80088f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80088f6:	2a39      	cmp	r2, #57	@ 0x39
 80088f8:	d106      	bne.n	8008908 <_dtoa_r+0x5f8>
 80088fa:	429f      	cmp	r7, r3
 80088fc:	d1f8      	bne.n	80088f0 <_dtoa_r+0x5e0>
 80088fe:	9a04      	ldr	r2, [sp, #16]
 8008900:	3201      	adds	r2, #1
 8008902:	9204      	str	r2, [sp, #16]
 8008904:	2230      	movs	r2, #48	@ 0x30
 8008906:	703a      	strb	r2, [r7, #0]
 8008908:	781a      	ldrb	r2, [r3, #0]
 800890a:	3201      	adds	r2, #1
 800890c:	701a      	strb	r2, [r3, #0]
 800890e:	e7bd      	b.n	800888c <_dtoa_r+0x57c>
 8008910:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008914:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800891c:	f47f aeef 	bne.w	80086fe <_dtoa_r+0x3ee>
 8008920:	e710      	b.n	8008744 <_dtoa_r+0x434>
 8008922:	bf00      	nop
 8008924:	0800a010 	.word	0x0800a010
 8008928:	08009fe8 	.word	0x08009fe8
 800892c:	9908      	ldr	r1, [sp, #32]
 800892e:	2900      	cmp	r1, #0
 8008930:	f000 80e3 	beq.w	8008afa <_dtoa_r+0x7ea>
 8008934:	9907      	ldr	r1, [sp, #28]
 8008936:	2901      	cmp	r1, #1
 8008938:	f300 80c8 	bgt.w	8008acc <_dtoa_r+0x7bc>
 800893c:	2d00      	cmp	r5, #0
 800893e:	f000 80c1 	beq.w	8008ac4 <_dtoa_r+0x7b4>
 8008942:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008946:	9e05      	ldr	r6, [sp, #20]
 8008948:	461c      	mov	r4, r3
 800894a:	9304      	str	r3, [sp, #16]
 800894c:	9b05      	ldr	r3, [sp, #20]
 800894e:	4413      	add	r3, r2
 8008950:	9305      	str	r3, [sp, #20]
 8008952:	9b06      	ldr	r3, [sp, #24]
 8008954:	2101      	movs	r1, #1
 8008956:	4413      	add	r3, r2
 8008958:	4648      	mov	r0, r9
 800895a:	9306      	str	r3, [sp, #24]
 800895c:	f000 fc22 	bl	80091a4 <__i2b>
 8008960:	9b04      	ldr	r3, [sp, #16]
 8008962:	4605      	mov	r5, r0
 8008964:	b166      	cbz	r6, 8008980 <_dtoa_r+0x670>
 8008966:	9a06      	ldr	r2, [sp, #24]
 8008968:	2a00      	cmp	r2, #0
 800896a:	dd09      	ble.n	8008980 <_dtoa_r+0x670>
 800896c:	42b2      	cmp	r2, r6
 800896e:	9905      	ldr	r1, [sp, #20]
 8008970:	bfa8      	it	ge
 8008972:	4632      	movge	r2, r6
 8008974:	1a89      	subs	r1, r1, r2
 8008976:	9105      	str	r1, [sp, #20]
 8008978:	9906      	ldr	r1, [sp, #24]
 800897a:	1ab6      	subs	r6, r6, r2
 800897c:	1a8a      	subs	r2, r1, r2
 800897e:	9206      	str	r2, [sp, #24]
 8008980:	b1fb      	cbz	r3, 80089c2 <_dtoa_r+0x6b2>
 8008982:	9a08      	ldr	r2, [sp, #32]
 8008984:	2a00      	cmp	r2, #0
 8008986:	f000 80bc 	beq.w	8008b02 <_dtoa_r+0x7f2>
 800898a:	b19c      	cbz	r4, 80089b4 <_dtoa_r+0x6a4>
 800898c:	4629      	mov	r1, r5
 800898e:	4622      	mov	r2, r4
 8008990:	4648      	mov	r0, r9
 8008992:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008994:	f000 fcc6 	bl	8009324 <__pow5mult>
 8008998:	9a01      	ldr	r2, [sp, #4]
 800899a:	4601      	mov	r1, r0
 800899c:	4605      	mov	r5, r0
 800899e:	4648      	mov	r0, r9
 80089a0:	f000 fc16 	bl	80091d0 <__multiply>
 80089a4:	9901      	ldr	r1, [sp, #4]
 80089a6:	9004      	str	r0, [sp, #16]
 80089a8:	4648      	mov	r0, r9
 80089aa:	f000 fb47 	bl	800903c <_Bfree>
 80089ae:	9a04      	ldr	r2, [sp, #16]
 80089b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80089b2:	9201      	str	r2, [sp, #4]
 80089b4:	1b1a      	subs	r2, r3, r4
 80089b6:	d004      	beq.n	80089c2 <_dtoa_r+0x6b2>
 80089b8:	9901      	ldr	r1, [sp, #4]
 80089ba:	4648      	mov	r0, r9
 80089bc:	f000 fcb2 	bl	8009324 <__pow5mult>
 80089c0:	9001      	str	r0, [sp, #4]
 80089c2:	2101      	movs	r1, #1
 80089c4:	4648      	mov	r0, r9
 80089c6:	f000 fbed 	bl	80091a4 <__i2b>
 80089ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80089cc:	4604      	mov	r4, r0
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	f000 81d0 	beq.w	8008d74 <_dtoa_r+0xa64>
 80089d4:	461a      	mov	r2, r3
 80089d6:	4601      	mov	r1, r0
 80089d8:	4648      	mov	r0, r9
 80089da:	f000 fca3 	bl	8009324 <__pow5mult>
 80089de:	9b07      	ldr	r3, [sp, #28]
 80089e0:	2b01      	cmp	r3, #1
 80089e2:	4604      	mov	r4, r0
 80089e4:	f300 8095 	bgt.w	8008b12 <_dtoa_r+0x802>
 80089e8:	9b02      	ldr	r3, [sp, #8]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	f040 808b 	bne.w	8008b06 <_dtoa_r+0x7f6>
 80089f0:	9b03      	ldr	r3, [sp, #12]
 80089f2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80089f6:	2a00      	cmp	r2, #0
 80089f8:	f040 8087 	bne.w	8008b0a <_dtoa_r+0x7fa>
 80089fc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008a00:	0d12      	lsrs	r2, r2, #20
 8008a02:	0512      	lsls	r2, r2, #20
 8008a04:	2a00      	cmp	r2, #0
 8008a06:	f000 8082 	beq.w	8008b0e <_dtoa_r+0x7fe>
 8008a0a:	9b05      	ldr	r3, [sp, #20]
 8008a0c:	3301      	adds	r3, #1
 8008a0e:	9305      	str	r3, [sp, #20]
 8008a10:	9b06      	ldr	r3, [sp, #24]
 8008a12:	3301      	adds	r3, #1
 8008a14:	9306      	str	r3, [sp, #24]
 8008a16:	2301      	movs	r3, #1
 8008a18:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a1a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	f000 81af 	beq.w	8008d80 <_dtoa_r+0xa70>
 8008a22:	6922      	ldr	r2, [r4, #16]
 8008a24:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008a28:	6910      	ldr	r0, [r2, #16]
 8008a2a:	f000 fb6f 	bl	800910c <__hi0bits>
 8008a2e:	f1c0 0020 	rsb	r0, r0, #32
 8008a32:	9b06      	ldr	r3, [sp, #24]
 8008a34:	4418      	add	r0, r3
 8008a36:	f010 001f 	ands.w	r0, r0, #31
 8008a3a:	d076      	beq.n	8008b2a <_dtoa_r+0x81a>
 8008a3c:	f1c0 0220 	rsb	r2, r0, #32
 8008a40:	2a04      	cmp	r2, #4
 8008a42:	dd69      	ble.n	8008b18 <_dtoa_r+0x808>
 8008a44:	9b05      	ldr	r3, [sp, #20]
 8008a46:	f1c0 001c 	rsb	r0, r0, #28
 8008a4a:	4403      	add	r3, r0
 8008a4c:	9305      	str	r3, [sp, #20]
 8008a4e:	9b06      	ldr	r3, [sp, #24]
 8008a50:	4406      	add	r6, r0
 8008a52:	4403      	add	r3, r0
 8008a54:	9306      	str	r3, [sp, #24]
 8008a56:	9b05      	ldr	r3, [sp, #20]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	dd05      	ble.n	8008a68 <_dtoa_r+0x758>
 8008a5c:	9901      	ldr	r1, [sp, #4]
 8008a5e:	461a      	mov	r2, r3
 8008a60:	4648      	mov	r0, r9
 8008a62:	f000 fcb9 	bl	80093d8 <__lshift>
 8008a66:	9001      	str	r0, [sp, #4]
 8008a68:	9b06      	ldr	r3, [sp, #24]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	dd05      	ble.n	8008a7a <_dtoa_r+0x76a>
 8008a6e:	4621      	mov	r1, r4
 8008a70:	461a      	mov	r2, r3
 8008a72:	4648      	mov	r0, r9
 8008a74:	f000 fcb0 	bl	80093d8 <__lshift>
 8008a78:	4604      	mov	r4, r0
 8008a7a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d056      	beq.n	8008b2e <_dtoa_r+0x81e>
 8008a80:	9801      	ldr	r0, [sp, #4]
 8008a82:	4621      	mov	r1, r4
 8008a84:	f000 fd14 	bl	80094b0 <__mcmp>
 8008a88:	2800      	cmp	r0, #0
 8008a8a:	da50      	bge.n	8008b2e <_dtoa_r+0x81e>
 8008a8c:	f108 33ff 	add.w	r3, r8, #4294967295
 8008a90:	9304      	str	r3, [sp, #16]
 8008a92:	9901      	ldr	r1, [sp, #4]
 8008a94:	2300      	movs	r3, #0
 8008a96:	220a      	movs	r2, #10
 8008a98:	4648      	mov	r0, r9
 8008a9a:	f000 faf1 	bl	8009080 <__multadd>
 8008a9e:	9b08      	ldr	r3, [sp, #32]
 8008aa0:	9001      	str	r0, [sp, #4]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	f000 816e 	beq.w	8008d84 <_dtoa_r+0xa74>
 8008aa8:	4629      	mov	r1, r5
 8008aaa:	2300      	movs	r3, #0
 8008aac:	220a      	movs	r2, #10
 8008aae:	4648      	mov	r0, r9
 8008ab0:	f000 fae6 	bl	8009080 <__multadd>
 8008ab4:	f1bb 0f00 	cmp.w	fp, #0
 8008ab8:	4605      	mov	r5, r0
 8008aba:	dc64      	bgt.n	8008b86 <_dtoa_r+0x876>
 8008abc:	9b07      	ldr	r3, [sp, #28]
 8008abe:	2b02      	cmp	r3, #2
 8008ac0:	dc3e      	bgt.n	8008b40 <_dtoa_r+0x830>
 8008ac2:	e060      	b.n	8008b86 <_dtoa_r+0x876>
 8008ac4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008ac6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008aca:	e73c      	b.n	8008946 <_dtoa_r+0x636>
 8008acc:	f10a 34ff 	add.w	r4, sl, #4294967295
 8008ad0:	42a3      	cmp	r3, r4
 8008ad2:	bfbf      	itttt	lt
 8008ad4:	1ae2      	sublt	r2, r4, r3
 8008ad6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008ad8:	189b      	addlt	r3, r3, r2
 8008ada:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8008adc:	bfae      	itee	ge
 8008ade:	1b1c      	subge	r4, r3, r4
 8008ae0:	4623      	movlt	r3, r4
 8008ae2:	2400      	movlt	r4, #0
 8008ae4:	f1ba 0f00 	cmp.w	sl, #0
 8008ae8:	bfb5      	itete	lt
 8008aea:	9a05      	ldrlt	r2, [sp, #20]
 8008aec:	9e05      	ldrge	r6, [sp, #20]
 8008aee:	eba2 060a 	sublt.w	r6, r2, sl
 8008af2:	4652      	movge	r2, sl
 8008af4:	bfb8      	it	lt
 8008af6:	2200      	movlt	r2, #0
 8008af8:	e727      	b.n	800894a <_dtoa_r+0x63a>
 8008afa:	9e05      	ldr	r6, [sp, #20]
 8008afc:	9d08      	ldr	r5, [sp, #32]
 8008afe:	461c      	mov	r4, r3
 8008b00:	e730      	b.n	8008964 <_dtoa_r+0x654>
 8008b02:	461a      	mov	r2, r3
 8008b04:	e758      	b.n	80089b8 <_dtoa_r+0x6a8>
 8008b06:	2300      	movs	r3, #0
 8008b08:	e786      	b.n	8008a18 <_dtoa_r+0x708>
 8008b0a:	9b02      	ldr	r3, [sp, #8]
 8008b0c:	e784      	b.n	8008a18 <_dtoa_r+0x708>
 8008b0e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008b10:	e783      	b.n	8008a1a <_dtoa_r+0x70a>
 8008b12:	2300      	movs	r3, #0
 8008b14:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008b16:	e784      	b.n	8008a22 <_dtoa_r+0x712>
 8008b18:	d09d      	beq.n	8008a56 <_dtoa_r+0x746>
 8008b1a:	9b05      	ldr	r3, [sp, #20]
 8008b1c:	321c      	adds	r2, #28
 8008b1e:	4413      	add	r3, r2
 8008b20:	9305      	str	r3, [sp, #20]
 8008b22:	9b06      	ldr	r3, [sp, #24]
 8008b24:	4416      	add	r6, r2
 8008b26:	4413      	add	r3, r2
 8008b28:	e794      	b.n	8008a54 <_dtoa_r+0x744>
 8008b2a:	4602      	mov	r2, r0
 8008b2c:	e7f5      	b.n	8008b1a <_dtoa_r+0x80a>
 8008b2e:	f1ba 0f00 	cmp.w	sl, #0
 8008b32:	f8cd 8010 	str.w	r8, [sp, #16]
 8008b36:	46d3      	mov	fp, sl
 8008b38:	dc21      	bgt.n	8008b7e <_dtoa_r+0x86e>
 8008b3a:	9b07      	ldr	r3, [sp, #28]
 8008b3c:	2b02      	cmp	r3, #2
 8008b3e:	dd1e      	ble.n	8008b7e <_dtoa_r+0x86e>
 8008b40:	f1bb 0f00 	cmp.w	fp, #0
 8008b44:	f47f aeb7 	bne.w	80088b6 <_dtoa_r+0x5a6>
 8008b48:	4621      	mov	r1, r4
 8008b4a:	465b      	mov	r3, fp
 8008b4c:	2205      	movs	r2, #5
 8008b4e:	4648      	mov	r0, r9
 8008b50:	f000 fa96 	bl	8009080 <__multadd>
 8008b54:	4601      	mov	r1, r0
 8008b56:	4604      	mov	r4, r0
 8008b58:	9801      	ldr	r0, [sp, #4]
 8008b5a:	f000 fca9 	bl	80094b0 <__mcmp>
 8008b5e:	2800      	cmp	r0, #0
 8008b60:	f77f aea9 	ble.w	80088b6 <_dtoa_r+0x5a6>
 8008b64:	463e      	mov	r6, r7
 8008b66:	2331      	movs	r3, #49	@ 0x31
 8008b68:	f806 3b01 	strb.w	r3, [r6], #1
 8008b6c:	9b04      	ldr	r3, [sp, #16]
 8008b6e:	3301      	adds	r3, #1
 8008b70:	9304      	str	r3, [sp, #16]
 8008b72:	e6a4      	b.n	80088be <_dtoa_r+0x5ae>
 8008b74:	f8cd 8010 	str.w	r8, [sp, #16]
 8008b78:	4654      	mov	r4, sl
 8008b7a:	4625      	mov	r5, r4
 8008b7c:	e7f2      	b.n	8008b64 <_dtoa_r+0x854>
 8008b7e:	9b08      	ldr	r3, [sp, #32]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	f000 8103 	beq.w	8008d8c <_dtoa_r+0xa7c>
 8008b86:	2e00      	cmp	r6, #0
 8008b88:	dd05      	ble.n	8008b96 <_dtoa_r+0x886>
 8008b8a:	4629      	mov	r1, r5
 8008b8c:	4632      	mov	r2, r6
 8008b8e:	4648      	mov	r0, r9
 8008b90:	f000 fc22 	bl	80093d8 <__lshift>
 8008b94:	4605      	mov	r5, r0
 8008b96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d058      	beq.n	8008c4e <_dtoa_r+0x93e>
 8008b9c:	6869      	ldr	r1, [r5, #4]
 8008b9e:	4648      	mov	r0, r9
 8008ba0:	f000 fa0c 	bl	8008fbc <_Balloc>
 8008ba4:	4606      	mov	r6, r0
 8008ba6:	b928      	cbnz	r0, 8008bb4 <_dtoa_r+0x8a4>
 8008ba8:	4b82      	ldr	r3, [pc, #520]	@ (8008db4 <_dtoa_r+0xaa4>)
 8008baa:	4602      	mov	r2, r0
 8008bac:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008bb0:	f7ff bbc7 	b.w	8008342 <_dtoa_r+0x32>
 8008bb4:	692a      	ldr	r2, [r5, #16]
 8008bb6:	3202      	adds	r2, #2
 8008bb8:	0092      	lsls	r2, r2, #2
 8008bba:	f105 010c 	add.w	r1, r5, #12
 8008bbe:	300c      	adds	r0, #12
 8008bc0:	f7ff fb0f 	bl	80081e2 <memcpy>
 8008bc4:	2201      	movs	r2, #1
 8008bc6:	4631      	mov	r1, r6
 8008bc8:	4648      	mov	r0, r9
 8008bca:	f000 fc05 	bl	80093d8 <__lshift>
 8008bce:	1c7b      	adds	r3, r7, #1
 8008bd0:	9305      	str	r3, [sp, #20]
 8008bd2:	eb07 030b 	add.w	r3, r7, fp
 8008bd6:	9309      	str	r3, [sp, #36]	@ 0x24
 8008bd8:	9b02      	ldr	r3, [sp, #8]
 8008bda:	f003 0301 	and.w	r3, r3, #1
 8008bde:	46a8      	mov	r8, r5
 8008be0:	9308      	str	r3, [sp, #32]
 8008be2:	4605      	mov	r5, r0
 8008be4:	9b05      	ldr	r3, [sp, #20]
 8008be6:	9801      	ldr	r0, [sp, #4]
 8008be8:	4621      	mov	r1, r4
 8008bea:	f103 3bff 	add.w	fp, r3, #4294967295
 8008bee:	f7ff fb06 	bl	80081fe <quorem>
 8008bf2:	4641      	mov	r1, r8
 8008bf4:	9002      	str	r0, [sp, #8]
 8008bf6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8008bfa:	9801      	ldr	r0, [sp, #4]
 8008bfc:	f000 fc58 	bl	80094b0 <__mcmp>
 8008c00:	462a      	mov	r2, r5
 8008c02:	9006      	str	r0, [sp, #24]
 8008c04:	4621      	mov	r1, r4
 8008c06:	4648      	mov	r0, r9
 8008c08:	f000 fc6e 	bl	80094e8 <__mdiff>
 8008c0c:	68c2      	ldr	r2, [r0, #12]
 8008c0e:	4606      	mov	r6, r0
 8008c10:	b9fa      	cbnz	r2, 8008c52 <_dtoa_r+0x942>
 8008c12:	4601      	mov	r1, r0
 8008c14:	9801      	ldr	r0, [sp, #4]
 8008c16:	f000 fc4b 	bl	80094b0 <__mcmp>
 8008c1a:	4602      	mov	r2, r0
 8008c1c:	4631      	mov	r1, r6
 8008c1e:	4648      	mov	r0, r9
 8008c20:	920a      	str	r2, [sp, #40]	@ 0x28
 8008c22:	f000 fa0b 	bl	800903c <_Bfree>
 8008c26:	9b07      	ldr	r3, [sp, #28]
 8008c28:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008c2a:	9e05      	ldr	r6, [sp, #20]
 8008c2c:	ea43 0102 	orr.w	r1, r3, r2
 8008c30:	9b08      	ldr	r3, [sp, #32]
 8008c32:	4319      	orrs	r1, r3
 8008c34:	d10f      	bne.n	8008c56 <_dtoa_r+0x946>
 8008c36:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8008c3a:	d028      	beq.n	8008c8e <_dtoa_r+0x97e>
 8008c3c:	9b06      	ldr	r3, [sp, #24]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	dd02      	ble.n	8008c48 <_dtoa_r+0x938>
 8008c42:	9b02      	ldr	r3, [sp, #8]
 8008c44:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8008c48:	f88b a000 	strb.w	sl, [fp]
 8008c4c:	e639      	b.n	80088c2 <_dtoa_r+0x5b2>
 8008c4e:	4628      	mov	r0, r5
 8008c50:	e7bd      	b.n	8008bce <_dtoa_r+0x8be>
 8008c52:	2201      	movs	r2, #1
 8008c54:	e7e2      	b.n	8008c1c <_dtoa_r+0x90c>
 8008c56:	9b06      	ldr	r3, [sp, #24]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	db04      	blt.n	8008c66 <_dtoa_r+0x956>
 8008c5c:	9907      	ldr	r1, [sp, #28]
 8008c5e:	430b      	orrs	r3, r1
 8008c60:	9908      	ldr	r1, [sp, #32]
 8008c62:	430b      	orrs	r3, r1
 8008c64:	d120      	bne.n	8008ca8 <_dtoa_r+0x998>
 8008c66:	2a00      	cmp	r2, #0
 8008c68:	ddee      	ble.n	8008c48 <_dtoa_r+0x938>
 8008c6a:	9901      	ldr	r1, [sp, #4]
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	4648      	mov	r0, r9
 8008c70:	f000 fbb2 	bl	80093d8 <__lshift>
 8008c74:	4621      	mov	r1, r4
 8008c76:	9001      	str	r0, [sp, #4]
 8008c78:	f000 fc1a 	bl	80094b0 <__mcmp>
 8008c7c:	2800      	cmp	r0, #0
 8008c7e:	dc03      	bgt.n	8008c88 <_dtoa_r+0x978>
 8008c80:	d1e2      	bne.n	8008c48 <_dtoa_r+0x938>
 8008c82:	f01a 0f01 	tst.w	sl, #1
 8008c86:	d0df      	beq.n	8008c48 <_dtoa_r+0x938>
 8008c88:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8008c8c:	d1d9      	bne.n	8008c42 <_dtoa_r+0x932>
 8008c8e:	2339      	movs	r3, #57	@ 0x39
 8008c90:	f88b 3000 	strb.w	r3, [fp]
 8008c94:	4633      	mov	r3, r6
 8008c96:	461e      	mov	r6, r3
 8008c98:	3b01      	subs	r3, #1
 8008c9a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008c9e:	2a39      	cmp	r2, #57	@ 0x39
 8008ca0:	d053      	beq.n	8008d4a <_dtoa_r+0xa3a>
 8008ca2:	3201      	adds	r2, #1
 8008ca4:	701a      	strb	r2, [r3, #0]
 8008ca6:	e60c      	b.n	80088c2 <_dtoa_r+0x5b2>
 8008ca8:	2a00      	cmp	r2, #0
 8008caa:	dd07      	ble.n	8008cbc <_dtoa_r+0x9ac>
 8008cac:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8008cb0:	d0ed      	beq.n	8008c8e <_dtoa_r+0x97e>
 8008cb2:	f10a 0301 	add.w	r3, sl, #1
 8008cb6:	f88b 3000 	strb.w	r3, [fp]
 8008cba:	e602      	b.n	80088c2 <_dtoa_r+0x5b2>
 8008cbc:	9b05      	ldr	r3, [sp, #20]
 8008cbe:	9a05      	ldr	r2, [sp, #20]
 8008cc0:	f803 ac01 	strb.w	sl, [r3, #-1]
 8008cc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d029      	beq.n	8008d1e <_dtoa_r+0xa0e>
 8008cca:	9901      	ldr	r1, [sp, #4]
 8008ccc:	2300      	movs	r3, #0
 8008cce:	220a      	movs	r2, #10
 8008cd0:	4648      	mov	r0, r9
 8008cd2:	f000 f9d5 	bl	8009080 <__multadd>
 8008cd6:	45a8      	cmp	r8, r5
 8008cd8:	9001      	str	r0, [sp, #4]
 8008cda:	f04f 0300 	mov.w	r3, #0
 8008cde:	f04f 020a 	mov.w	r2, #10
 8008ce2:	4641      	mov	r1, r8
 8008ce4:	4648      	mov	r0, r9
 8008ce6:	d107      	bne.n	8008cf8 <_dtoa_r+0x9e8>
 8008ce8:	f000 f9ca 	bl	8009080 <__multadd>
 8008cec:	4680      	mov	r8, r0
 8008cee:	4605      	mov	r5, r0
 8008cf0:	9b05      	ldr	r3, [sp, #20]
 8008cf2:	3301      	adds	r3, #1
 8008cf4:	9305      	str	r3, [sp, #20]
 8008cf6:	e775      	b.n	8008be4 <_dtoa_r+0x8d4>
 8008cf8:	f000 f9c2 	bl	8009080 <__multadd>
 8008cfc:	4629      	mov	r1, r5
 8008cfe:	4680      	mov	r8, r0
 8008d00:	2300      	movs	r3, #0
 8008d02:	220a      	movs	r2, #10
 8008d04:	4648      	mov	r0, r9
 8008d06:	f000 f9bb 	bl	8009080 <__multadd>
 8008d0a:	4605      	mov	r5, r0
 8008d0c:	e7f0      	b.n	8008cf0 <_dtoa_r+0x9e0>
 8008d0e:	f1bb 0f00 	cmp.w	fp, #0
 8008d12:	bfcc      	ite	gt
 8008d14:	465e      	movgt	r6, fp
 8008d16:	2601      	movle	r6, #1
 8008d18:	443e      	add	r6, r7
 8008d1a:	f04f 0800 	mov.w	r8, #0
 8008d1e:	9901      	ldr	r1, [sp, #4]
 8008d20:	2201      	movs	r2, #1
 8008d22:	4648      	mov	r0, r9
 8008d24:	f000 fb58 	bl	80093d8 <__lshift>
 8008d28:	4621      	mov	r1, r4
 8008d2a:	9001      	str	r0, [sp, #4]
 8008d2c:	f000 fbc0 	bl	80094b0 <__mcmp>
 8008d30:	2800      	cmp	r0, #0
 8008d32:	dcaf      	bgt.n	8008c94 <_dtoa_r+0x984>
 8008d34:	d102      	bne.n	8008d3c <_dtoa_r+0xa2c>
 8008d36:	f01a 0f01 	tst.w	sl, #1
 8008d3a:	d1ab      	bne.n	8008c94 <_dtoa_r+0x984>
 8008d3c:	4633      	mov	r3, r6
 8008d3e:	461e      	mov	r6, r3
 8008d40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d44:	2a30      	cmp	r2, #48	@ 0x30
 8008d46:	d0fa      	beq.n	8008d3e <_dtoa_r+0xa2e>
 8008d48:	e5bb      	b.n	80088c2 <_dtoa_r+0x5b2>
 8008d4a:	429f      	cmp	r7, r3
 8008d4c:	d1a3      	bne.n	8008c96 <_dtoa_r+0x986>
 8008d4e:	9b04      	ldr	r3, [sp, #16]
 8008d50:	3301      	adds	r3, #1
 8008d52:	9304      	str	r3, [sp, #16]
 8008d54:	2331      	movs	r3, #49	@ 0x31
 8008d56:	703b      	strb	r3, [r7, #0]
 8008d58:	e5b3      	b.n	80088c2 <_dtoa_r+0x5b2>
 8008d5a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008d5c:	4f16      	ldr	r7, [pc, #88]	@ (8008db8 <_dtoa_r+0xaa8>)
 8008d5e:	b11b      	cbz	r3, 8008d68 <_dtoa_r+0xa58>
 8008d60:	f107 0308 	add.w	r3, r7, #8
 8008d64:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8008d66:	6013      	str	r3, [r2, #0]
 8008d68:	4638      	mov	r0, r7
 8008d6a:	b011      	add	sp, #68	@ 0x44
 8008d6c:	ecbd 8b02 	vpop	{d8}
 8008d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d74:	9b07      	ldr	r3, [sp, #28]
 8008d76:	2b01      	cmp	r3, #1
 8008d78:	f77f ae36 	ble.w	80089e8 <_dtoa_r+0x6d8>
 8008d7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d7e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008d80:	2001      	movs	r0, #1
 8008d82:	e656      	b.n	8008a32 <_dtoa_r+0x722>
 8008d84:	f1bb 0f00 	cmp.w	fp, #0
 8008d88:	f77f aed7 	ble.w	8008b3a <_dtoa_r+0x82a>
 8008d8c:	463e      	mov	r6, r7
 8008d8e:	9801      	ldr	r0, [sp, #4]
 8008d90:	4621      	mov	r1, r4
 8008d92:	f7ff fa34 	bl	80081fe <quorem>
 8008d96:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8008d9a:	f806 ab01 	strb.w	sl, [r6], #1
 8008d9e:	1bf2      	subs	r2, r6, r7
 8008da0:	4593      	cmp	fp, r2
 8008da2:	ddb4      	ble.n	8008d0e <_dtoa_r+0x9fe>
 8008da4:	9901      	ldr	r1, [sp, #4]
 8008da6:	2300      	movs	r3, #0
 8008da8:	220a      	movs	r2, #10
 8008daa:	4648      	mov	r0, r9
 8008dac:	f000 f968 	bl	8009080 <__multadd>
 8008db0:	9001      	str	r0, [sp, #4]
 8008db2:	e7ec      	b.n	8008d8e <_dtoa_r+0xa7e>
 8008db4:	08009f70 	.word	0x08009f70
 8008db8:	08009ef4 	.word	0x08009ef4

08008dbc <_free_r>:
 8008dbc:	b538      	push	{r3, r4, r5, lr}
 8008dbe:	4605      	mov	r5, r0
 8008dc0:	2900      	cmp	r1, #0
 8008dc2:	d041      	beq.n	8008e48 <_free_r+0x8c>
 8008dc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dc8:	1f0c      	subs	r4, r1, #4
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	bfb8      	it	lt
 8008dce:	18e4      	addlt	r4, r4, r3
 8008dd0:	f000 f8e8 	bl	8008fa4 <__malloc_lock>
 8008dd4:	4a1d      	ldr	r2, [pc, #116]	@ (8008e4c <_free_r+0x90>)
 8008dd6:	6813      	ldr	r3, [r2, #0]
 8008dd8:	b933      	cbnz	r3, 8008de8 <_free_r+0x2c>
 8008dda:	6063      	str	r3, [r4, #4]
 8008ddc:	6014      	str	r4, [r2, #0]
 8008dde:	4628      	mov	r0, r5
 8008de0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008de4:	f000 b8e4 	b.w	8008fb0 <__malloc_unlock>
 8008de8:	42a3      	cmp	r3, r4
 8008dea:	d908      	bls.n	8008dfe <_free_r+0x42>
 8008dec:	6820      	ldr	r0, [r4, #0]
 8008dee:	1821      	adds	r1, r4, r0
 8008df0:	428b      	cmp	r3, r1
 8008df2:	bf01      	itttt	eq
 8008df4:	6819      	ldreq	r1, [r3, #0]
 8008df6:	685b      	ldreq	r3, [r3, #4]
 8008df8:	1809      	addeq	r1, r1, r0
 8008dfa:	6021      	streq	r1, [r4, #0]
 8008dfc:	e7ed      	b.n	8008dda <_free_r+0x1e>
 8008dfe:	461a      	mov	r2, r3
 8008e00:	685b      	ldr	r3, [r3, #4]
 8008e02:	b10b      	cbz	r3, 8008e08 <_free_r+0x4c>
 8008e04:	42a3      	cmp	r3, r4
 8008e06:	d9fa      	bls.n	8008dfe <_free_r+0x42>
 8008e08:	6811      	ldr	r1, [r2, #0]
 8008e0a:	1850      	adds	r0, r2, r1
 8008e0c:	42a0      	cmp	r0, r4
 8008e0e:	d10b      	bne.n	8008e28 <_free_r+0x6c>
 8008e10:	6820      	ldr	r0, [r4, #0]
 8008e12:	4401      	add	r1, r0
 8008e14:	1850      	adds	r0, r2, r1
 8008e16:	4283      	cmp	r3, r0
 8008e18:	6011      	str	r1, [r2, #0]
 8008e1a:	d1e0      	bne.n	8008dde <_free_r+0x22>
 8008e1c:	6818      	ldr	r0, [r3, #0]
 8008e1e:	685b      	ldr	r3, [r3, #4]
 8008e20:	6053      	str	r3, [r2, #4]
 8008e22:	4408      	add	r0, r1
 8008e24:	6010      	str	r0, [r2, #0]
 8008e26:	e7da      	b.n	8008dde <_free_r+0x22>
 8008e28:	d902      	bls.n	8008e30 <_free_r+0x74>
 8008e2a:	230c      	movs	r3, #12
 8008e2c:	602b      	str	r3, [r5, #0]
 8008e2e:	e7d6      	b.n	8008dde <_free_r+0x22>
 8008e30:	6820      	ldr	r0, [r4, #0]
 8008e32:	1821      	adds	r1, r4, r0
 8008e34:	428b      	cmp	r3, r1
 8008e36:	bf04      	itt	eq
 8008e38:	6819      	ldreq	r1, [r3, #0]
 8008e3a:	685b      	ldreq	r3, [r3, #4]
 8008e3c:	6063      	str	r3, [r4, #4]
 8008e3e:	bf04      	itt	eq
 8008e40:	1809      	addeq	r1, r1, r0
 8008e42:	6021      	streq	r1, [r4, #0]
 8008e44:	6054      	str	r4, [r2, #4]
 8008e46:	e7ca      	b.n	8008dde <_free_r+0x22>
 8008e48:	bd38      	pop	{r3, r4, r5, pc}
 8008e4a:	bf00      	nop
 8008e4c:	24000b34 	.word	0x24000b34

08008e50 <malloc>:
 8008e50:	4b02      	ldr	r3, [pc, #8]	@ (8008e5c <malloc+0xc>)
 8008e52:	4601      	mov	r1, r0
 8008e54:	6818      	ldr	r0, [r3, #0]
 8008e56:	f000 b825 	b.w	8008ea4 <_malloc_r>
 8008e5a:	bf00      	nop
 8008e5c:	2000001c 	.word	0x2000001c

08008e60 <sbrk_aligned>:
 8008e60:	b570      	push	{r4, r5, r6, lr}
 8008e62:	4e0f      	ldr	r6, [pc, #60]	@ (8008ea0 <sbrk_aligned+0x40>)
 8008e64:	460c      	mov	r4, r1
 8008e66:	6831      	ldr	r1, [r6, #0]
 8008e68:	4605      	mov	r5, r0
 8008e6a:	b911      	cbnz	r1, 8008e72 <sbrk_aligned+0x12>
 8008e6c:	f000 fe9a 	bl	8009ba4 <_sbrk_r>
 8008e70:	6030      	str	r0, [r6, #0]
 8008e72:	4621      	mov	r1, r4
 8008e74:	4628      	mov	r0, r5
 8008e76:	f000 fe95 	bl	8009ba4 <_sbrk_r>
 8008e7a:	1c43      	adds	r3, r0, #1
 8008e7c:	d103      	bne.n	8008e86 <sbrk_aligned+0x26>
 8008e7e:	f04f 34ff 	mov.w	r4, #4294967295
 8008e82:	4620      	mov	r0, r4
 8008e84:	bd70      	pop	{r4, r5, r6, pc}
 8008e86:	1cc4      	adds	r4, r0, #3
 8008e88:	f024 0403 	bic.w	r4, r4, #3
 8008e8c:	42a0      	cmp	r0, r4
 8008e8e:	d0f8      	beq.n	8008e82 <sbrk_aligned+0x22>
 8008e90:	1a21      	subs	r1, r4, r0
 8008e92:	4628      	mov	r0, r5
 8008e94:	f000 fe86 	bl	8009ba4 <_sbrk_r>
 8008e98:	3001      	adds	r0, #1
 8008e9a:	d1f2      	bne.n	8008e82 <sbrk_aligned+0x22>
 8008e9c:	e7ef      	b.n	8008e7e <sbrk_aligned+0x1e>
 8008e9e:	bf00      	nop
 8008ea0:	24000b30 	.word	0x24000b30

08008ea4 <_malloc_r>:
 8008ea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ea8:	1ccd      	adds	r5, r1, #3
 8008eaa:	f025 0503 	bic.w	r5, r5, #3
 8008eae:	3508      	adds	r5, #8
 8008eb0:	2d0c      	cmp	r5, #12
 8008eb2:	bf38      	it	cc
 8008eb4:	250c      	movcc	r5, #12
 8008eb6:	2d00      	cmp	r5, #0
 8008eb8:	4606      	mov	r6, r0
 8008eba:	db01      	blt.n	8008ec0 <_malloc_r+0x1c>
 8008ebc:	42a9      	cmp	r1, r5
 8008ebe:	d904      	bls.n	8008eca <_malloc_r+0x26>
 8008ec0:	230c      	movs	r3, #12
 8008ec2:	6033      	str	r3, [r6, #0]
 8008ec4:	2000      	movs	r0, #0
 8008ec6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008eca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008fa0 <_malloc_r+0xfc>
 8008ece:	f000 f869 	bl	8008fa4 <__malloc_lock>
 8008ed2:	f8d8 3000 	ldr.w	r3, [r8]
 8008ed6:	461c      	mov	r4, r3
 8008ed8:	bb44      	cbnz	r4, 8008f2c <_malloc_r+0x88>
 8008eda:	4629      	mov	r1, r5
 8008edc:	4630      	mov	r0, r6
 8008ede:	f7ff ffbf 	bl	8008e60 <sbrk_aligned>
 8008ee2:	1c43      	adds	r3, r0, #1
 8008ee4:	4604      	mov	r4, r0
 8008ee6:	d158      	bne.n	8008f9a <_malloc_r+0xf6>
 8008ee8:	f8d8 4000 	ldr.w	r4, [r8]
 8008eec:	4627      	mov	r7, r4
 8008eee:	2f00      	cmp	r7, #0
 8008ef0:	d143      	bne.n	8008f7a <_malloc_r+0xd6>
 8008ef2:	2c00      	cmp	r4, #0
 8008ef4:	d04b      	beq.n	8008f8e <_malloc_r+0xea>
 8008ef6:	6823      	ldr	r3, [r4, #0]
 8008ef8:	4639      	mov	r1, r7
 8008efa:	4630      	mov	r0, r6
 8008efc:	eb04 0903 	add.w	r9, r4, r3
 8008f00:	f000 fe50 	bl	8009ba4 <_sbrk_r>
 8008f04:	4581      	cmp	r9, r0
 8008f06:	d142      	bne.n	8008f8e <_malloc_r+0xea>
 8008f08:	6821      	ldr	r1, [r4, #0]
 8008f0a:	1a6d      	subs	r5, r5, r1
 8008f0c:	4629      	mov	r1, r5
 8008f0e:	4630      	mov	r0, r6
 8008f10:	f7ff ffa6 	bl	8008e60 <sbrk_aligned>
 8008f14:	3001      	adds	r0, #1
 8008f16:	d03a      	beq.n	8008f8e <_malloc_r+0xea>
 8008f18:	6823      	ldr	r3, [r4, #0]
 8008f1a:	442b      	add	r3, r5
 8008f1c:	6023      	str	r3, [r4, #0]
 8008f1e:	f8d8 3000 	ldr.w	r3, [r8]
 8008f22:	685a      	ldr	r2, [r3, #4]
 8008f24:	bb62      	cbnz	r2, 8008f80 <_malloc_r+0xdc>
 8008f26:	f8c8 7000 	str.w	r7, [r8]
 8008f2a:	e00f      	b.n	8008f4c <_malloc_r+0xa8>
 8008f2c:	6822      	ldr	r2, [r4, #0]
 8008f2e:	1b52      	subs	r2, r2, r5
 8008f30:	d420      	bmi.n	8008f74 <_malloc_r+0xd0>
 8008f32:	2a0b      	cmp	r2, #11
 8008f34:	d917      	bls.n	8008f66 <_malloc_r+0xc2>
 8008f36:	1961      	adds	r1, r4, r5
 8008f38:	42a3      	cmp	r3, r4
 8008f3a:	6025      	str	r5, [r4, #0]
 8008f3c:	bf18      	it	ne
 8008f3e:	6059      	strne	r1, [r3, #4]
 8008f40:	6863      	ldr	r3, [r4, #4]
 8008f42:	bf08      	it	eq
 8008f44:	f8c8 1000 	streq.w	r1, [r8]
 8008f48:	5162      	str	r2, [r4, r5]
 8008f4a:	604b      	str	r3, [r1, #4]
 8008f4c:	4630      	mov	r0, r6
 8008f4e:	f000 f82f 	bl	8008fb0 <__malloc_unlock>
 8008f52:	f104 000b 	add.w	r0, r4, #11
 8008f56:	1d23      	adds	r3, r4, #4
 8008f58:	f020 0007 	bic.w	r0, r0, #7
 8008f5c:	1ac2      	subs	r2, r0, r3
 8008f5e:	bf1c      	itt	ne
 8008f60:	1a1b      	subne	r3, r3, r0
 8008f62:	50a3      	strne	r3, [r4, r2]
 8008f64:	e7af      	b.n	8008ec6 <_malloc_r+0x22>
 8008f66:	6862      	ldr	r2, [r4, #4]
 8008f68:	42a3      	cmp	r3, r4
 8008f6a:	bf0c      	ite	eq
 8008f6c:	f8c8 2000 	streq.w	r2, [r8]
 8008f70:	605a      	strne	r2, [r3, #4]
 8008f72:	e7eb      	b.n	8008f4c <_malloc_r+0xa8>
 8008f74:	4623      	mov	r3, r4
 8008f76:	6864      	ldr	r4, [r4, #4]
 8008f78:	e7ae      	b.n	8008ed8 <_malloc_r+0x34>
 8008f7a:	463c      	mov	r4, r7
 8008f7c:	687f      	ldr	r7, [r7, #4]
 8008f7e:	e7b6      	b.n	8008eee <_malloc_r+0x4a>
 8008f80:	461a      	mov	r2, r3
 8008f82:	685b      	ldr	r3, [r3, #4]
 8008f84:	42a3      	cmp	r3, r4
 8008f86:	d1fb      	bne.n	8008f80 <_malloc_r+0xdc>
 8008f88:	2300      	movs	r3, #0
 8008f8a:	6053      	str	r3, [r2, #4]
 8008f8c:	e7de      	b.n	8008f4c <_malloc_r+0xa8>
 8008f8e:	230c      	movs	r3, #12
 8008f90:	6033      	str	r3, [r6, #0]
 8008f92:	4630      	mov	r0, r6
 8008f94:	f000 f80c 	bl	8008fb0 <__malloc_unlock>
 8008f98:	e794      	b.n	8008ec4 <_malloc_r+0x20>
 8008f9a:	6005      	str	r5, [r0, #0]
 8008f9c:	e7d6      	b.n	8008f4c <_malloc_r+0xa8>
 8008f9e:	bf00      	nop
 8008fa0:	24000b34 	.word	0x24000b34

08008fa4 <__malloc_lock>:
 8008fa4:	4801      	ldr	r0, [pc, #4]	@ (8008fac <__malloc_lock+0x8>)
 8008fa6:	f7ff b91a 	b.w	80081de <__retarget_lock_acquire_recursive>
 8008faa:	bf00      	nop
 8008fac:	24000b2c 	.word	0x24000b2c

08008fb0 <__malloc_unlock>:
 8008fb0:	4801      	ldr	r0, [pc, #4]	@ (8008fb8 <__malloc_unlock+0x8>)
 8008fb2:	f7ff b915 	b.w	80081e0 <__retarget_lock_release_recursive>
 8008fb6:	bf00      	nop
 8008fb8:	24000b2c 	.word	0x24000b2c

08008fbc <_Balloc>:
 8008fbc:	b570      	push	{r4, r5, r6, lr}
 8008fbe:	69c6      	ldr	r6, [r0, #28]
 8008fc0:	4604      	mov	r4, r0
 8008fc2:	460d      	mov	r5, r1
 8008fc4:	b976      	cbnz	r6, 8008fe4 <_Balloc+0x28>
 8008fc6:	2010      	movs	r0, #16
 8008fc8:	f7ff ff42 	bl	8008e50 <malloc>
 8008fcc:	4602      	mov	r2, r0
 8008fce:	61e0      	str	r0, [r4, #28]
 8008fd0:	b920      	cbnz	r0, 8008fdc <_Balloc+0x20>
 8008fd2:	4b18      	ldr	r3, [pc, #96]	@ (8009034 <_Balloc+0x78>)
 8008fd4:	4818      	ldr	r0, [pc, #96]	@ (8009038 <_Balloc+0x7c>)
 8008fd6:	216b      	movs	r1, #107	@ 0x6b
 8008fd8:	f000 fdf4 	bl	8009bc4 <__assert_func>
 8008fdc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008fe0:	6006      	str	r6, [r0, #0]
 8008fe2:	60c6      	str	r6, [r0, #12]
 8008fe4:	69e6      	ldr	r6, [r4, #28]
 8008fe6:	68f3      	ldr	r3, [r6, #12]
 8008fe8:	b183      	cbz	r3, 800900c <_Balloc+0x50>
 8008fea:	69e3      	ldr	r3, [r4, #28]
 8008fec:	68db      	ldr	r3, [r3, #12]
 8008fee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008ff2:	b9b8      	cbnz	r0, 8009024 <_Balloc+0x68>
 8008ff4:	2101      	movs	r1, #1
 8008ff6:	fa01 f605 	lsl.w	r6, r1, r5
 8008ffa:	1d72      	adds	r2, r6, #5
 8008ffc:	0092      	lsls	r2, r2, #2
 8008ffe:	4620      	mov	r0, r4
 8009000:	f000 fdfe 	bl	8009c00 <_calloc_r>
 8009004:	b160      	cbz	r0, 8009020 <_Balloc+0x64>
 8009006:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800900a:	e00e      	b.n	800902a <_Balloc+0x6e>
 800900c:	2221      	movs	r2, #33	@ 0x21
 800900e:	2104      	movs	r1, #4
 8009010:	4620      	mov	r0, r4
 8009012:	f000 fdf5 	bl	8009c00 <_calloc_r>
 8009016:	69e3      	ldr	r3, [r4, #28]
 8009018:	60f0      	str	r0, [r6, #12]
 800901a:	68db      	ldr	r3, [r3, #12]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d1e4      	bne.n	8008fea <_Balloc+0x2e>
 8009020:	2000      	movs	r0, #0
 8009022:	bd70      	pop	{r4, r5, r6, pc}
 8009024:	6802      	ldr	r2, [r0, #0]
 8009026:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800902a:	2300      	movs	r3, #0
 800902c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009030:	e7f7      	b.n	8009022 <_Balloc+0x66>
 8009032:	bf00      	nop
 8009034:	08009f01 	.word	0x08009f01
 8009038:	08009f81 	.word	0x08009f81

0800903c <_Bfree>:
 800903c:	b570      	push	{r4, r5, r6, lr}
 800903e:	69c6      	ldr	r6, [r0, #28]
 8009040:	4605      	mov	r5, r0
 8009042:	460c      	mov	r4, r1
 8009044:	b976      	cbnz	r6, 8009064 <_Bfree+0x28>
 8009046:	2010      	movs	r0, #16
 8009048:	f7ff ff02 	bl	8008e50 <malloc>
 800904c:	4602      	mov	r2, r0
 800904e:	61e8      	str	r0, [r5, #28]
 8009050:	b920      	cbnz	r0, 800905c <_Bfree+0x20>
 8009052:	4b09      	ldr	r3, [pc, #36]	@ (8009078 <_Bfree+0x3c>)
 8009054:	4809      	ldr	r0, [pc, #36]	@ (800907c <_Bfree+0x40>)
 8009056:	218f      	movs	r1, #143	@ 0x8f
 8009058:	f000 fdb4 	bl	8009bc4 <__assert_func>
 800905c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009060:	6006      	str	r6, [r0, #0]
 8009062:	60c6      	str	r6, [r0, #12]
 8009064:	b13c      	cbz	r4, 8009076 <_Bfree+0x3a>
 8009066:	69eb      	ldr	r3, [r5, #28]
 8009068:	6862      	ldr	r2, [r4, #4]
 800906a:	68db      	ldr	r3, [r3, #12]
 800906c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009070:	6021      	str	r1, [r4, #0]
 8009072:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009076:	bd70      	pop	{r4, r5, r6, pc}
 8009078:	08009f01 	.word	0x08009f01
 800907c:	08009f81 	.word	0x08009f81

08009080 <__multadd>:
 8009080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009084:	690d      	ldr	r5, [r1, #16]
 8009086:	4607      	mov	r7, r0
 8009088:	460c      	mov	r4, r1
 800908a:	461e      	mov	r6, r3
 800908c:	f101 0c14 	add.w	ip, r1, #20
 8009090:	2000      	movs	r0, #0
 8009092:	f8dc 3000 	ldr.w	r3, [ip]
 8009096:	b299      	uxth	r1, r3
 8009098:	fb02 6101 	mla	r1, r2, r1, r6
 800909c:	0c1e      	lsrs	r6, r3, #16
 800909e:	0c0b      	lsrs	r3, r1, #16
 80090a0:	fb02 3306 	mla	r3, r2, r6, r3
 80090a4:	b289      	uxth	r1, r1
 80090a6:	3001      	adds	r0, #1
 80090a8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80090ac:	4285      	cmp	r5, r0
 80090ae:	f84c 1b04 	str.w	r1, [ip], #4
 80090b2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80090b6:	dcec      	bgt.n	8009092 <__multadd+0x12>
 80090b8:	b30e      	cbz	r6, 80090fe <__multadd+0x7e>
 80090ba:	68a3      	ldr	r3, [r4, #8]
 80090bc:	42ab      	cmp	r3, r5
 80090be:	dc19      	bgt.n	80090f4 <__multadd+0x74>
 80090c0:	6861      	ldr	r1, [r4, #4]
 80090c2:	4638      	mov	r0, r7
 80090c4:	3101      	adds	r1, #1
 80090c6:	f7ff ff79 	bl	8008fbc <_Balloc>
 80090ca:	4680      	mov	r8, r0
 80090cc:	b928      	cbnz	r0, 80090da <__multadd+0x5a>
 80090ce:	4602      	mov	r2, r0
 80090d0:	4b0c      	ldr	r3, [pc, #48]	@ (8009104 <__multadd+0x84>)
 80090d2:	480d      	ldr	r0, [pc, #52]	@ (8009108 <__multadd+0x88>)
 80090d4:	21ba      	movs	r1, #186	@ 0xba
 80090d6:	f000 fd75 	bl	8009bc4 <__assert_func>
 80090da:	6922      	ldr	r2, [r4, #16]
 80090dc:	3202      	adds	r2, #2
 80090de:	f104 010c 	add.w	r1, r4, #12
 80090e2:	0092      	lsls	r2, r2, #2
 80090e4:	300c      	adds	r0, #12
 80090e6:	f7ff f87c 	bl	80081e2 <memcpy>
 80090ea:	4621      	mov	r1, r4
 80090ec:	4638      	mov	r0, r7
 80090ee:	f7ff ffa5 	bl	800903c <_Bfree>
 80090f2:	4644      	mov	r4, r8
 80090f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80090f8:	3501      	adds	r5, #1
 80090fa:	615e      	str	r6, [r3, #20]
 80090fc:	6125      	str	r5, [r4, #16]
 80090fe:	4620      	mov	r0, r4
 8009100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009104:	08009f70 	.word	0x08009f70
 8009108:	08009f81 	.word	0x08009f81

0800910c <__hi0bits>:
 800910c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009110:	4603      	mov	r3, r0
 8009112:	bf36      	itet	cc
 8009114:	0403      	lslcc	r3, r0, #16
 8009116:	2000      	movcs	r0, #0
 8009118:	2010      	movcc	r0, #16
 800911a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800911e:	bf3c      	itt	cc
 8009120:	021b      	lslcc	r3, r3, #8
 8009122:	3008      	addcc	r0, #8
 8009124:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009128:	bf3c      	itt	cc
 800912a:	011b      	lslcc	r3, r3, #4
 800912c:	3004      	addcc	r0, #4
 800912e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009132:	bf3c      	itt	cc
 8009134:	009b      	lslcc	r3, r3, #2
 8009136:	3002      	addcc	r0, #2
 8009138:	2b00      	cmp	r3, #0
 800913a:	db05      	blt.n	8009148 <__hi0bits+0x3c>
 800913c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009140:	f100 0001 	add.w	r0, r0, #1
 8009144:	bf08      	it	eq
 8009146:	2020      	moveq	r0, #32
 8009148:	4770      	bx	lr

0800914a <__lo0bits>:
 800914a:	6803      	ldr	r3, [r0, #0]
 800914c:	4602      	mov	r2, r0
 800914e:	f013 0007 	ands.w	r0, r3, #7
 8009152:	d00b      	beq.n	800916c <__lo0bits+0x22>
 8009154:	07d9      	lsls	r1, r3, #31
 8009156:	d421      	bmi.n	800919c <__lo0bits+0x52>
 8009158:	0798      	lsls	r0, r3, #30
 800915a:	bf49      	itett	mi
 800915c:	085b      	lsrmi	r3, r3, #1
 800915e:	089b      	lsrpl	r3, r3, #2
 8009160:	2001      	movmi	r0, #1
 8009162:	6013      	strmi	r3, [r2, #0]
 8009164:	bf5c      	itt	pl
 8009166:	6013      	strpl	r3, [r2, #0]
 8009168:	2002      	movpl	r0, #2
 800916a:	4770      	bx	lr
 800916c:	b299      	uxth	r1, r3
 800916e:	b909      	cbnz	r1, 8009174 <__lo0bits+0x2a>
 8009170:	0c1b      	lsrs	r3, r3, #16
 8009172:	2010      	movs	r0, #16
 8009174:	b2d9      	uxtb	r1, r3
 8009176:	b909      	cbnz	r1, 800917c <__lo0bits+0x32>
 8009178:	3008      	adds	r0, #8
 800917a:	0a1b      	lsrs	r3, r3, #8
 800917c:	0719      	lsls	r1, r3, #28
 800917e:	bf04      	itt	eq
 8009180:	091b      	lsreq	r3, r3, #4
 8009182:	3004      	addeq	r0, #4
 8009184:	0799      	lsls	r1, r3, #30
 8009186:	bf04      	itt	eq
 8009188:	089b      	lsreq	r3, r3, #2
 800918a:	3002      	addeq	r0, #2
 800918c:	07d9      	lsls	r1, r3, #31
 800918e:	d403      	bmi.n	8009198 <__lo0bits+0x4e>
 8009190:	085b      	lsrs	r3, r3, #1
 8009192:	f100 0001 	add.w	r0, r0, #1
 8009196:	d003      	beq.n	80091a0 <__lo0bits+0x56>
 8009198:	6013      	str	r3, [r2, #0]
 800919a:	4770      	bx	lr
 800919c:	2000      	movs	r0, #0
 800919e:	4770      	bx	lr
 80091a0:	2020      	movs	r0, #32
 80091a2:	4770      	bx	lr

080091a4 <__i2b>:
 80091a4:	b510      	push	{r4, lr}
 80091a6:	460c      	mov	r4, r1
 80091a8:	2101      	movs	r1, #1
 80091aa:	f7ff ff07 	bl	8008fbc <_Balloc>
 80091ae:	4602      	mov	r2, r0
 80091b0:	b928      	cbnz	r0, 80091be <__i2b+0x1a>
 80091b2:	4b05      	ldr	r3, [pc, #20]	@ (80091c8 <__i2b+0x24>)
 80091b4:	4805      	ldr	r0, [pc, #20]	@ (80091cc <__i2b+0x28>)
 80091b6:	f240 1145 	movw	r1, #325	@ 0x145
 80091ba:	f000 fd03 	bl	8009bc4 <__assert_func>
 80091be:	2301      	movs	r3, #1
 80091c0:	6144      	str	r4, [r0, #20]
 80091c2:	6103      	str	r3, [r0, #16]
 80091c4:	bd10      	pop	{r4, pc}
 80091c6:	bf00      	nop
 80091c8:	08009f70 	.word	0x08009f70
 80091cc:	08009f81 	.word	0x08009f81

080091d0 <__multiply>:
 80091d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091d4:	4614      	mov	r4, r2
 80091d6:	690a      	ldr	r2, [r1, #16]
 80091d8:	6923      	ldr	r3, [r4, #16]
 80091da:	429a      	cmp	r2, r3
 80091dc:	bfa8      	it	ge
 80091de:	4623      	movge	r3, r4
 80091e0:	460f      	mov	r7, r1
 80091e2:	bfa4      	itt	ge
 80091e4:	460c      	movge	r4, r1
 80091e6:	461f      	movge	r7, r3
 80091e8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80091ec:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80091f0:	68a3      	ldr	r3, [r4, #8]
 80091f2:	6861      	ldr	r1, [r4, #4]
 80091f4:	eb0a 0609 	add.w	r6, sl, r9
 80091f8:	42b3      	cmp	r3, r6
 80091fa:	b085      	sub	sp, #20
 80091fc:	bfb8      	it	lt
 80091fe:	3101      	addlt	r1, #1
 8009200:	f7ff fedc 	bl	8008fbc <_Balloc>
 8009204:	b930      	cbnz	r0, 8009214 <__multiply+0x44>
 8009206:	4602      	mov	r2, r0
 8009208:	4b44      	ldr	r3, [pc, #272]	@ (800931c <__multiply+0x14c>)
 800920a:	4845      	ldr	r0, [pc, #276]	@ (8009320 <__multiply+0x150>)
 800920c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009210:	f000 fcd8 	bl	8009bc4 <__assert_func>
 8009214:	f100 0514 	add.w	r5, r0, #20
 8009218:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800921c:	462b      	mov	r3, r5
 800921e:	2200      	movs	r2, #0
 8009220:	4543      	cmp	r3, r8
 8009222:	d321      	bcc.n	8009268 <__multiply+0x98>
 8009224:	f107 0114 	add.w	r1, r7, #20
 8009228:	f104 0214 	add.w	r2, r4, #20
 800922c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009230:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009234:	9302      	str	r3, [sp, #8]
 8009236:	1b13      	subs	r3, r2, r4
 8009238:	3b15      	subs	r3, #21
 800923a:	f023 0303 	bic.w	r3, r3, #3
 800923e:	3304      	adds	r3, #4
 8009240:	f104 0715 	add.w	r7, r4, #21
 8009244:	42ba      	cmp	r2, r7
 8009246:	bf38      	it	cc
 8009248:	2304      	movcc	r3, #4
 800924a:	9301      	str	r3, [sp, #4]
 800924c:	9b02      	ldr	r3, [sp, #8]
 800924e:	9103      	str	r1, [sp, #12]
 8009250:	428b      	cmp	r3, r1
 8009252:	d80c      	bhi.n	800926e <__multiply+0x9e>
 8009254:	2e00      	cmp	r6, #0
 8009256:	dd03      	ble.n	8009260 <__multiply+0x90>
 8009258:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800925c:	2b00      	cmp	r3, #0
 800925e:	d05b      	beq.n	8009318 <__multiply+0x148>
 8009260:	6106      	str	r6, [r0, #16]
 8009262:	b005      	add	sp, #20
 8009264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009268:	f843 2b04 	str.w	r2, [r3], #4
 800926c:	e7d8      	b.n	8009220 <__multiply+0x50>
 800926e:	f8b1 a000 	ldrh.w	sl, [r1]
 8009272:	f1ba 0f00 	cmp.w	sl, #0
 8009276:	d024      	beq.n	80092c2 <__multiply+0xf2>
 8009278:	f104 0e14 	add.w	lr, r4, #20
 800927c:	46a9      	mov	r9, r5
 800927e:	f04f 0c00 	mov.w	ip, #0
 8009282:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009286:	f8d9 3000 	ldr.w	r3, [r9]
 800928a:	fa1f fb87 	uxth.w	fp, r7
 800928e:	b29b      	uxth	r3, r3
 8009290:	fb0a 330b 	mla	r3, sl, fp, r3
 8009294:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009298:	f8d9 7000 	ldr.w	r7, [r9]
 800929c:	4463      	add	r3, ip
 800929e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80092a2:	fb0a c70b 	mla	r7, sl, fp, ip
 80092a6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80092aa:	b29b      	uxth	r3, r3
 80092ac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80092b0:	4572      	cmp	r2, lr
 80092b2:	f849 3b04 	str.w	r3, [r9], #4
 80092b6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80092ba:	d8e2      	bhi.n	8009282 <__multiply+0xb2>
 80092bc:	9b01      	ldr	r3, [sp, #4]
 80092be:	f845 c003 	str.w	ip, [r5, r3]
 80092c2:	9b03      	ldr	r3, [sp, #12]
 80092c4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80092c8:	3104      	adds	r1, #4
 80092ca:	f1b9 0f00 	cmp.w	r9, #0
 80092ce:	d021      	beq.n	8009314 <__multiply+0x144>
 80092d0:	682b      	ldr	r3, [r5, #0]
 80092d2:	f104 0c14 	add.w	ip, r4, #20
 80092d6:	46ae      	mov	lr, r5
 80092d8:	f04f 0a00 	mov.w	sl, #0
 80092dc:	f8bc b000 	ldrh.w	fp, [ip]
 80092e0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80092e4:	fb09 770b 	mla	r7, r9, fp, r7
 80092e8:	4457      	add	r7, sl
 80092ea:	b29b      	uxth	r3, r3
 80092ec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80092f0:	f84e 3b04 	str.w	r3, [lr], #4
 80092f4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80092f8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80092fc:	f8be 3000 	ldrh.w	r3, [lr]
 8009300:	fb09 330a 	mla	r3, r9, sl, r3
 8009304:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009308:	4562      	cmp	r2, ip
 800930a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800930e:	d8e5      	bhi.n	80092dc <__multiply+0x10c>
 8009310:	9f01      	ldr	r7, [sp, #4]
 8009312:	51eb      	str	r3, [r5, r7]
 8009314:	3504      	adds	r5, #4
 8009316:	e799      	b.n	800924c <__multiply+0x7c>
 8009318:	3e01      	subs	r6, #1
 800931a:	e79b      	b.n	8009254 <__multiply+0x84>
 800931c:	08009f70 	.word	0x08009f70
 8009320:	08009f81 	.word	0x08009f81

08009324 <__pow5mult>:
 8009324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009328:	4615      	mov	r5, r2
 800932a:	f012 0203 	ands.w	r2, r2, #3
 800932e:	4607      	mov	r7, r0
 8009330:	460e      	mov	r6, r1
 8009332:	d007      	beq.n	8009344 <__pow5mult+0x20>
 8009334:	4c25      	ldr	r4, [pc, #148]	@ (80093cc <__pow5mult+0xa8>)
 8009336:	3a01      	subs	r2, #1
 8009338:	2300      	movs	r3, #0
 800933a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800933e:	f7ff fe9f 	bl	8009080 <__multadd>
 8009342:	4606      	mov	r6, r0
 8009344:	10ad      	asrs	r5, r5, #2
 8009346:	d03d      	beq.n	80093c4 <__pow5mult+0xa0>
 8009348:	69fc      	ldr	r4, [r7, #28]
 800934a:	b97c      	cbnz	r4, 800936c <__pow5mult+0x48>
 800934c:	2010      	movs	r0, #16
 800934e:	f7ff fd7f 	bl	8008e50 <malloc>
 8009352:	4602      	mov	r2, r0
 8009354:	61f8      	str	r0, [r7, #28]
 8009356:	b928      	cbnz	r0, 8009364 <__pow5mult+0x40>
 8009358:	4b1d      	ldr	r3, [pc, #116]	@ (80093d0 <__pow5mult+0xac>)
 800935a:	481e      	ldr	r0, [pc, #120]	@ (80093d4 <__pow5mult+0xb0>)
 800935c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009360:	f000 fc30 	bl	8009bc4 <__assert_func>
 8009364:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009368:	6004      	str	r4, [r0, #0]
 800936a:	60c4      	str	r4, [r0, #12]
 800936c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009370:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009374:	b94c      	cbnz	r4, 800938a <__pow5mult+0x66>
 8009376:	f240 2171 	movw	r1, #625	@ 0x271
 800937a:	4638      	mov	r0, r7
 800937c:	f7ff ff12 	bl	80091a4 <__i2b>
 8009380:	2300      	movs	r3, #0
 8009382:	f8c8 0008 	str.w	r0, [r8, #8]
 8009386:	4604      	mov	r4, r0
 8009388:	6003      	str	r3, [r0, #0]
 800938a:	f04f 0900 	mov.w	r9, #0
 800938e:	07eb      	lsls	r3, r5, #31
 8009390:	d50a      	bpl.n	80093a8 <__pow5mult+0x84>
 8009392:	4631      	mov	r1, r6
 8009394:	4622      	mov	r2, r4
 8009396:	4638      	mov	r0, r7
 8009398:	f7ff ff1a 	bl	80091d0 <__multiply>
 800939c:	4631      	mov	r1, r6
 800939e:	4680      	mov	r8, r0
 80093a0:	4638      	mov	r0, r7
 80093a2:	f7ff fe4b 	bl	800903c <_Bfree>
 80093a6:	4646      	mov	r6, r8
 80093a8:	106d      	asrs	r5, r5, #1
 80093aa:	d00b      	beq.n	80093c4 <__pow5mult+0xa0>
 80093ac:	6820      	ldr	r0, [r4, #0]
 80093ae:	b938      	cbnz	r0, 80093c0 <__pow5mult+0x9c>
 80093b0:	4622      	mov	r2, r4
 80093b2:	4621      	mov	r1, r4
 80093b4:	4638      	mov	r0, r7
 80093b6:	f7ff ff0b 	bl	80091d0 <__multiply>
 80093ba:	6020      	str	r0, [r4, #0]
 80093bc:	f8c0 9000 	str.w	r9, [r0]
 80093c0:	4604      	mov	r4, r0
 80093c2:	e7e4      	b.n	800938e <__pow5mult+0x6a>
 80093c4:	4630      	mov	r0, r6
 80093c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093ca:	bf00      	nop
 80093cc:	08009fdc 	.word	0x08009fdc
 80093d0:	08009f01 	.word	0x08009f01
 80093d4:	08009f81 	.word	0x08009f81

080093d8 <__lshift>:
 80093d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093dc:	460c      	mov	r4, r1
 80093de:	6849      	ldr	r1, [r1, #4]
 80093e0:	6923      	ldr	r3, [r4, #16]
 80093e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80093e6:	68a3      	ldr	r3, [r4, #8]
 80093e8:	4607      	mov	r7, r0
 80093ea:	4691      	mov	r9, r2
 80093ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80093f0:	f108 0601 	add.w	r6, r8, #1
 80093f4:	42b3      	cmp	r3, r6
 80093f6:	db0b      	blt.n	8009410 <__lshift+0x38>
 80093f8:	4638      	mov	r0, r7
 80093fa:	f7ff fddf 	bl	8008fbc <_Balloc>
 80093fe:	4605      	mov	r5, r0
 8009400:	b948      	cbnz	r0, 8009416 <__lshift+0x3e>
 8009402:	4602      	mov	r2, r0
 8009404:	4b28      	ldr	r3, [pc, #160]	@ (80094a8 <__lshift+0xd0>)
 8009406:	4829      	ldr	r0, [pc, #164]	@ (80094ac <__lshift+0xd4>)
 8009408:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800940c:	f000 fbda 	bl	8009bc4 <__assert_func>
 8009410:	3101      	adds	r1, #1
 8009412:	005b      	lsls	r3, r3, #1
 8009414:	e7ee      	b.n	80093f4 <__lshift+0x1c>
 8009416:	2300      	movs	r3, #0
 8009418:	f100 0114 	add.w	r1, r0, #20
 800941c:	f100 0210 	add.w	r2, r0, #16
 8009420:	4618      	mov	r0, r3
 8009422:	4553      	cmp	r3, sl
 8009424:	db33      	blt.n	800948e <__lshift+0xb6>
 8009426:	6920      	ldr	r0, [r4, #16]
 8009428:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800942c:	f104 0314 	add.w	r3, r4, #20
 8009430:	f019 091f 	ands.w	r9, r9, #31
 8009434:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009438:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800943c:	d02b      	beq.n	8009496 <__lshift+0xbe>
 800943e:	f1c9 0e20 	rsb	lr, r9, #32
 8009442:	468a      	mov	sl, r1
 8009444:	2200      	movs	r2, #0
 8009446:	6818      	ldr	r0, [r3, #0]
 8009448:	fa00 f009 	lsl.w	r0, r0, r9
 800944c:	4310      	orrs	r0, r2
 800944e:	f84a 0b04 	str.w	r0, [sl], #4
 8009452:	f853 2b04 	ldr.w	r2, [r3], #4
 8009456:	459c      	cmp	ip, r3
 8009458:	fa22 f20e 	lsr.w	r2, r2, lr
 800945c:	d8f3      	bhi.n	8009446 <__lshift+0x6e>
 800945e:	ebac 0304 	sub.w	r3, ip, r4
 8009462:	3b15      	subs	r3, #21
 8009464:	f023 0303 	bic.w	r3, r3, #3
 8009468:	3304      	adds	r3, #4
 800946a:	f104 0015 	add.w	r0, r4, #21
 800946e:	4584      	cmp	ip, r0
 8009470:	bf38      	it	cc
 8009472:	2304      	movcc	r3, #4
 8009474:	50ca      	str	r2, [r1, r3]
 8009476:	b10a      	cbz	r2, 800947c <__lshift+0xa4>
 8009478:	f108 0602 	add.w	r6, r8, #2
 800947c:	3e01      	subs	r6, #1
 800947e:	4638      	mov	r0, r7
 8009480:	612e      	str	r6, [r5, #16]
 8009482:	4621      	mov	r1, r4
 8009484:	f7ff fdda 	bl	800903c <_Bfree>
 8009488:	4628      	mov	r0, r5
 800948a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800948e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009492:	3301      	adds	r3, #1
 8009494:	e7c5      	b.n	8009422 <__lshift+0x4a>
 8009496:	3904      	subs	r1, #4
 8009498:	f853 2b04 	ldr.w	r2, [r3], #4
 800949c:	f841 2f04 	str.w	r2, [r1, #4]!
 80094a0:	459c      	cmp	ip, r3
 80094a2:	d8f9      	bhi.n	8009498 <__lshift+0xc0>
 80094a4:	e7ea      	b.n	800947c <__lshift+0xa4>
 80094a6:	bf00      	nop
 80094a8:	08009f70 	.word	0x08009f70
 80094ac:	08009f81 	.word	0x08009f81

080094b0 <__mcmp>:
 80094b0:	690a      	ldr	r2, [r1, #16]
 80094b2:	4603      	mov	r3, r0
 80094b4:	6900      	ldr	r0, [r0, #16]
 80094b6:	1a80      	subs	r0, r0, r2
 80094b8:	b530      	push	{r4, r5, lr}
 80094ba:	d10e      	bne.n	80094da <__mcmp+0x2a>
 80094bc:	3314      	adds	r3, #20
 80094be:	3114      	adds	r1, #20
 80094c0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80094c4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80094c8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80094cc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80094d0:	4295      	cmp	r5, r2
 80094d2:	d003      	beq.n	80094dc <__mcmp+0x2c>
 80094d4:	d205      	bcs.n	80094e2 <__mcmp+0x32>
 80094d6:	f04f 30ff 	mov.w	r0, #4294967295
 80094da:	bd30      	pop	{r4, r5, pc}
 80094dc:	42a3      	cmp	r3, r4
 80094de:	d3f3      	bcc.n	80094c8 <__mcmp+0x18>
 80094e0:	e7fb      	b.n	80094da <__mcmp+0x2a>
 80094e2:	2001      	movs	r0, #1
 80094e4:	e7f9      	b.n	80094da <__mcmp+0x2a>
	...

080094e8 <__mdiff>:
 80094e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094ec:	4689      	mov	r9, r1
 80094ee:	4606      	mov	r6, r0
 80094f0:	4611      	mov	r1, r2
 80094f2:	4648      	mov	r0, r9
 80094f4:	4614      	mov	r4, r2
 80094f6:	f7ff ffdb 	bl	80094b0 <__mcmp>
 80094fa:	1e05      	subs	r5, r0, #0
 80094fc:	d112      	bne.n	8009524 <__mdiff+0x3c>
 80094fe:	4629      	mov	r1, r5
 8009500:	4630      	mov	r0, r6
 8009502:	f7ff fd5b 	bl	8008fbc <_Balloc>
 8009506:	4602      	mov	r2, r0
 8009508:	b928      	cbnz	r0, 8009516 <__mdiff+0x2e>
 800950a:	4b3f      	ldr	r3, [pc, #252]	@ (8009608 <__mdiff+0x120>)
 800950c:	f240 2137 	movw	r1, #567	@ 0x237
 8009510:	483e      	ldr	r0, [pc, #248]	@ (800960c <__mdiff+0x124>)
 8009512:	f000 fb57 	bl	8009bc4 <__assert_func>
 8009516:	2301      	movs	r3, #1
 8009518:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800951c:	4610      	mov	r0, r2
 800951e:	b003      	add	sp, #12
 8009520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009524:	bfbc      	itt	lt
 8009526:	464b      	movlt	r3, r9
 8009528:	46a1      	movlt	r9, r4
 800952a:	4630      	mov	r0, r6
 800952c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009530:	bfba      	itte	lt
 8009532:	461c      	movlt	r4, r3
 8009534:	2501      	movlt	r5, #1
 8009536:	2500      	movge	r5, #0
 8009538:	f7ff fd40 	bl	8008fbc <_Balloc>
 800953c:	4602      	mov	r2, r0
 800953e:	b918      	cbnz	r0, 8009548 <__mdiff+0x60>
 8009540:	4b31      	ldr	r3, [pc, #196]	@ (8009608 <__mdiff+0x120>)
 8009542:	f240 2145 	movw	r1, #581	@ 0x245
 8009546:	e7e3      	b.n	8009510 <__mdiff+0x28>
 8009548:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800954c:	6926      	ldr	r6, [r4, #16]
 800954e:	60c5      	str	r5, [r0, #12]
 8009550:	f109 0310 	add.w	r3, r9, #16
 8009554:	f109 0514 	add.w	r5, r9, #20
 8009558:	f104 0e14 	add.w	lr, r4, #20
 800955c:	f100 0b14 	add.w	fp, r0, #20
 8009560:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009564:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009568:	9301      	str	r3, [sp, #4]
 800956a:	46d9      	mov	r9, fp
 800956c:	f04f 0c00 	mov.w	ip, #0
 8009570:	9b01      	ldr	r3, [sp, #4]
 8009572:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009576:	f853 af04 	ldr.w	sl, [r3, #4]!
 800957a:	9301      	str	r3, [sp, #4]
 800957c:	fa1f f38a 	uxth.w	r3, sl
 8009580:	4619      	mov	r1, r3
 8009582:	b283      	uxth	r3, r0
 8009584:	1acb      	subs	r3, r1, r3
 8009586:	0c00      	lsrs	r0, r0, #16
 8009588:	4463      	add	r3, ip
 800958a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800958e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009592:	b29b      	uxth	r3, r3
 8009594:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009598:	4576      	cmp	r6, lr
 800959a:	f849 3b04 	str.w	r3, [r9], #4
 800959e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80095a2:	d8e5      	bhi.n	8009570 <__mdiff+0x88>
 80095a4:	1b33      	subs	r3, r6, r4
 80095a6:	3b15      	subs	r3, #21
 80095a8:	f023 0303 	bic.w	r3, r3, #3
 80095ac:	3415      	adds	r4, #21
 80095ae:	3304      	adds	r3, #4
 80095b0:	42a6      	cmp	r6, r4
 80095b2:	bf38      	it	cc
 80095b4:	2304      	movcc	r3, #4
 80095b6:	441d      	add	r5, r3
 80095b8:	445b      	add	r3, fp
 80095ba:	461e      	mov	r6, r3
 80095bc:	462c      	mov	r4, r5
 80095be:	4544      	cmp	r4, r8
 80095c0:	d30e      	bcc.n	80095e0 <__mdiff+0xf8>
 80095c2:	f108 0103 	add.w	r1, r8, #3
 80095c6:	1b49      	subs	r1, r1, r5
 80095c8:	f021 0103 	bic.w	r1, r1, #3
 80095cc:	3d03      	subs	r5, #3
 80095ce:	45a8      	cmp	r8, r5
 80095d0:	bf38      	it	cc
 80095d2:	2100      	movcc	r1, #0
 80095d4:	440b      	add	r3, r1
 80095d6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80095da:	b191      	cbz	r1, 8009602 <__mdiff+0x11a>
 80095dc:	6117      	str	r7, [r2, #16]
 80095de:	e79d      	b.n	800951c <__mdiff+0x34>
 80095e0:	f854 1b04 	ldr.w	r1, [r4], #4
 80095e4:	46e6      	mov	lr, ip
 80095e6:	0c08      	lsrs	r0, r1, #16
 80095e8:	fa1c fc81 	uxtah	ip, ip, r1
 80095ec:	4471      	add	r1, lr
 80095ee:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80095f2:	b289      	uxth	r1, r1
 80095f4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80095f8:	f846 1b04 	str.w	r1, [r6], #4
 80095fc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009600:	e7dd      	b.n	80095be <__mdiff+0xd6>
 8009602:	3f01      	subs	r7, #1
 8009604:	e7e7      	b.n	80095d6 <__mdiff+0xee>
 8009606:	bf00      	nop
 8009608:	08009f70 	.word	0x08009f70
 800960c:	08009f81 	.word	0x08009f81

08009610 <__d2b>:
 8009610:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009614:	460f      	mov	r7, r1
 8009616:	2101      	movs	r1, #1
 8009618:	ec59 8b10 	vmov	r8, r9, d0
 800961c:	4616      	mov	r6, r2
 800961e:	f7ff fccd 	bl	8008fbc <_Balloc>
 8009622:	4604      	mov	r4, r0
 8009624:	b930      	cbnz	r0, 8009634 <__d2b+0x24>
 8009626:	4602      	mov	r2, r0
 8009628:	4b23      	ldr	r3, [pc, #140]	@ (80096b8 <__d2b+0xa8>)
 800962a:	4824      	ldr	r0, [pc, #144]	@ (80096bc <__d2b+0xac>)
 800962c:	f240 310f 	movw	r1, #783	@ 0x30f
 8009630:	f000 fac8 	bl	8009bc4 <__assert_func>
 8009634:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009638:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800963c:	b10d      	cbz	r5, 8009642 <__d2b+0x32>
 800963e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009642:	9301      	str	r3, [sp, #4]
 8009644:	f1b8 0300 	subs.w	r3, r8, #0
 8009648:	d023      	beq.n	8009692 <__d2b+0x82>
 800964a:	4668      	mov	r0, sp
 800964c:	9300      	str	r3, [sp, #0]
 800964e:	f7ff fd7c 	bl	800914a <__lo0bits>
 8009652:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009656:	b1d0      	cbz	r0, 800968e <__d2b+0x7e>
 8009658:	f1c0 0320 	rsb	r3, r0, #32
 800965c:	fa02 f303 	lsl.w	r3, r2, r3
 8009660:	430b      	orrs	r3, r1
 8009662:	40c2      	lsrs	r2, r0
 8009664:	6163      	str	r3, [r4, #20]
 8009666:	9201      	str	r2, [sp, #4]
 8009668:	9b01      	ldr	r3, [sp, #4]
 800966a:	61a3      	str	r3, [r4, #24]
 800966c:	2b00      	cmp	r3, #0
 800966e:	bf0c      	ite	eq
 8009670:	2201      	moveq	r2, #1
 8009672:	2202      	movne	r2, #2
 8009674:	6122      	str	r2, [r4, #16]
 8009676:	b1a5      	cbz	r5, 80096a2 <__d2b+0x92>
 8009678:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800967c:	4405      	add	r5, r0
 800967e:	603d      	str	r5, [r7, #0]
 8009680:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009684:	6030      	str	r0, [r6, #0]
 8009686:	4620      	mov	r0, r4
 8009688:	b003      	add	sp, #12
 800968a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800968e:	6161      	str	r1, [r4, #20]
 8009690:	e7ea      	b.n	8009668 <__d2b+0x58>
 8009692:	a801      	add	r0, sp, #4
 8009694:	f7ff fd59 	bl	800914a <__lo0bits>
 8009698:	9b01      	ldr	r3, [sp, #4]
 800969a:	6163      	str	r3, [r4, #20]
 800969c:	3020      	adds	r0, #32
 800969e:	2201      	movs	r2, #1
 80096a0:	e7e8      	b.n	8009674 <__d2b+0x64>
 80096a2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80096a6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80096aa:	6038      	str	r0, [r7, #0]
 80096ac:	6918      	ldr	r0, [r3, #16]
 80096ae:	f7ff fd2d 	bl	800910c <__hi0bits>
 80096b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80096b6:	e7e5      	b.n	8009684 <__d2b+0x74>
 80096b8:	08009f70 	.word	0x08009f70
 80096bc:	08009f81 	.word	0x08009f81

080096c0 <__sfputc_r>:
 80096c0:	6893      	ldr	r3, [r2, #8]
 80096c2:	3b01      	subs	r3, #1
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	b410      	push	{r4}
 80096c8:	6093      	str	r3, [r2, #8]
 80096ca:	da08      	bge.n	80096de <__sfputc_r+0x1e>
 80096cc:	6994      	ldr	r4, [r2, #24]
 80096ce:	42a3      	cmp	r3, r4
 80096d0:	db01      	blt.n	80096d6 <__sfputc_r+0x16>
 80096d2:	290a      	cmp	r1, #10
 80096d4:	d103      	bne.n	80096de <__sfputc_r+0x1e>
 80096d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80096da:	f7fe bc6e 	b.w	8007fba <__swbuf_r>
 80096de:	6813      	ldr	r3, [r2, #0]
 80096e0:	1c58      	adds	r0, r3, #1
 80096e2:	6010      	str	r0, [r2, #0]
 80096e4:	7019      	strb	r1, [r3, #0]
 80096e6:	4608      	mov	r0, r1
 80096e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80096ec:	4770      	bx	lr

080096ee <__sfputs_r>:
 80096ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096f0:	4606      	mov	r6, r0
 80096f2:	460f      	mov	r7, r1
 80096f4:	4614      	mov	r4, r2
 80096f6:	18d5      	adds	r5, r2, r3
 80096f8:	42ac      	cmp	r4, r5
 80096fa:	d101      	bne.n	8009700 <__sfputs_r+0x12>
 80096fc:	2000      	movs	r0, #0
 80096fe:	e007      	b.n	8009710 <__sfputs_r+0x22>
 8009700:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009704:	463a      	mov	r2, r7
 8009706:	4630      	mov	r0, r6
 8009708:	f7ff ffda 	bl	80096c0 <__sfputc_r>
 800970c:	1c43      	adds	r3, r0, #1
 800970e:	d1f3      	bne.n	80096f8 <__sfputs_r+0xa>
 8009710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009714 <_vfiprintf_r>:
 8009714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009718:	460d      	mov	r5, r1
 800971a:	b09d      	sub	sp, #116	@ 0x74
 800971c:	4614      	mov	r4, r2
 800971e:	4698      	mov	r8, r3
 8009720:	4606      	mov	r6, r0
 8009722:	b118      	cbz	r0, 800972c <_vfiprintf_r+0x18>
 8009724:	6a03      	ldr	r3, [r0, #32]
 8009726:	b90b      	cbnz	r3, 800972c <_vfiprintf_r+0x18>
 8009728:	f7fe fb5e 	bl	8007de8 <__sinit>
 800972c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800972e:	07d9      	lsls	r1, r3, #31
 8009730:	d405      	bmi.n	800973e <_vfiprintf_r+0x2a>
 8009732:	89ab      	ldrh	r3, [r5, #12]
 8009734:	059a      	lsls	r2, r3, #22
 8009736:	d402      	bmi.n	800973e <_vfiprintf_r+0x2a>
 8009738:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800973a:	f7fe fd50 	bl	80081de <__retarget_lock_acquire_recursive>
 800973e:	89ab      	ldrh	r3, [r5, #12]
 8009740:	071b      	lsls	r3, r3, #28
 8009742:	d501      	bpl.n	8009748 <_vfiprintf_r+0x34>
 8009744:	692b      	ldr	r3, [r5, #16]
 8009746:	b99b      	cbnz	r3, 8009770 <_vfiprintf_r+0x5c>
 8009748:	4629      	mov	r1, r5
 800974a:	4630      	mov	r0, r6
 800974c:	f7fe fc74 	bl	8008038 <__swsetup_r>
 8009750:	b170      	cbz	r0, 8009770 <_vfiprintf_r+0x5c>
 8009752:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009754:	07dc      	lsls	r4, r3, #31
 8009756:	d504      	bpl.n	8009762 <_vfiprintf_r+0x4e>
 8009758:	f04f 30ff 	mov.w	r0, #4294967295
 800975c:	b01d      	add	sp, #116	@ 0x74
 800975e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009762:	89ab      	ldrh	r3, [r5, #12]
 8009764:	0598      	lsls	r0, r3, #22
 8009766:	d4f7      	bmi.n	8009758 <_vfiprintf_r+0x44>
 8009768:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800976a:	f7fe fd39 	bl	80081e0 <__retarget_lock_release_recursive>
 800976e:	e7f3      	b.n	8009758 <_vfiprintf_r+0x44>
 8009770:	2300      	movs	r3, #0
 8009772:	9309      	str	r3, [sp, #36]	@ 0x24
 8009774:	2320      	movs	r3, #32
 8009776:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800977a:	f8cd 800c 	str.w	r8, [sp, #12]
 800977e:	2330      	movs	r3, #48	@ 0x30
 8009780:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009930 <_vfiprintf_r+0x21c>
 8009784:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009788:	f04f 0901 	mov.w	r9, #1
 800978c:	4623      	mov	r3, r4
 800978e:	469a      	mov	sl, r3
 8009790:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009794:	b10a      	cbz	r2, 800979a <_vfiprintf_r+0x86>
 8009796:	2a25      	cmp	r2, #37	@ 0x25
 8009798:	d1f9      	bne.n	800978e <_vfiprintf_r+0x7a>
 800979a:	ebba 0b04 	subs.w	fp, sl, r4
 800979e:	d00b      	beq.n	80097b8 <_vfiprintf_r+0xa4>
 80097a0:	465b      	mov	r3, fp
 80097a2:	4622      	mov	r2, r4
 80097a4:	4629      	mov	r1, r5
 80097a6:	4630      	mov	r0, r6
 80097a8:	f7ff ffa1 	bl	80096ee <__sfputs_r>
 80097ac:	3001      	adds	r0, #1
 80097ae:	f000 80a7 	beq.w	8009900 <_vfiprintf_r+0x1ec>
 80097b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80097b4:	445a      	add	r2, fp
 80097b6:	9209      	str	r2, [sp, #36]	@ 0x24
 80097b8:	f89a 3000 	ldrb.w	r3, [sl]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	f000 809f 	beq.w	8009900 <_vfiprintf_r+0x1ec>
 80097c2:	2300      	movs	r3, #0
 80097c4:	f04f 32ff 	mov.w	r2, #4294967295
 80097c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80097cc:	f10a 0a01 	add.w	sl, sl, #1
 80097d0:	9304      	str	r3, [sp, #16]
 80097d2:	9307      	str	r3, [sp, #28]
 80097d4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80097d8:	931a      	str	r3, [sp, #104]	@ 0x68
 80097da:	4654      	mov	r4, sl
 80097dc:	2205      	movs	r2, #5
 80097de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097e2:	4853      	ldr	r0, [pc, #332]	@ (8009930 <_vfiprintf_r+0x21c>)
 80097e4:	f7f6 fd7c 	bl	80002e0 <memchr>
 80097e8:	9a04      	ldr	r2, [sp, #16]
 80097ea:	b9d8      	cbnz	r0, 8009824 <_vfiprintf_r+0x110>
 80097ec:	06d1      	lsls	r1, r2, #27
 80097ee:	bf44      	itt	mi
 80097f0:	2320      	movmi	r3, #32
 80097f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80097f6:	0713      	lsls	r3, r2, #28
 80097f8:	bf44      	itt	mi
 80097fa:	232b      	movmi	r3, #43	@ 0x2b
 80097fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009800:	f89a 3000 	ldrb.w	r3, [sl]
 8009804:	2b2a      	cmp	r3, #42	@ 0x2a
 8009806:	d015      	beq.n	8009834 <_vfiprintf_r+0x120>
 8009808:	9a07      	ldr	r2, [sp, #28]
 800980a:	4654      	mov	r4, sl
 800980c:	2000      	movs	r0, #0
 800980e:	f04f 0c0a 	mov.w	ip, #10
 8009812:	4621      	mov	r1, r4
 8009814:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009818:	3b30      	subs	r3, #48	@ 0x30
 800981a:	2b09      	cmp	r3, #9
 800981c:	d94b      	bls.n	80098b6 <_vfiprintf_r+0x1a2>
 800981e:	b1b0      	cbz	r0, 800984e <_vfiprintf_r+0x13a>
 8009820:	9207      	str	r2, [sp, #28]
 8009822:	e014      	b.n	800984e <_vfiprintf_r+0x13a>
 8009824:	eba0 0308 	sub.w	r3, r0, r8
 8009828:	fa09 f303 	lsl.w	r3, r9, r3
 800982c:	4313      	orrs	r3, r2
 800982e:	9304      	str	r3, [sp, #16]
 8009830:	46a2      	mov	sl, r4
 8009832:	e7d2      	b.n	80097da <_vfiprintf_r+0xc6>
 8009834:	9b03      	ldr	r3, [sp, #12]
 8009836:	1d19      	adds	r1, r3, #4
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	9103      	str	r1, [sp, #12]
 800983c:	2b00      	cmp	r3, #0
 800983e:	bfbb      	ittet	lt
 8009840:	425b      	neglt	r3, r3
 8009842:	f042 0202 	orrlt.w	r2, r2, #2
 8009846:	9307      	strge	r3, [sp, #28]
 8009848:	9307      	strlt	r3, [sp, #28]
 800984a:	bfb8      	it	lt
 800984c:	9204      	strlt	r2, [sp, #16]
 800984e:	7823      	ldrb	r3, [r4, #0]
 8009850:	2b2e      	cmp	r3, #46	@ 0x2e
 8009852:	d10a      	bne.n	800986a <_vfiprintf_r+0x156>
 8009854:	7863      	ldrb	r3, [r4, #1]
 8009856:	2b2a      	cmp	r3, #42	@ 0x2a
 8009858:	d132      	bne.n	80098c0 <_vfiprintf_r+0x1ac>
 800985a:	9b03      	ldr	r3, [sp, #12]
 800985c:	1d1a      	adds	r2, r3, #4
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	9203      	str	r2, [sp, #12]
 8009862:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009866:	3402      	adds	r4, #2
 8009868:	9305      	str	r3, [sp, #20]
 800986a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009940 <_vfiprintf_r+0x22c>
 800986e:	7821      	ldrb	r1, [r4, #0]
 8009870:	2203      	movs	r2, #3
 8009872:	4650      	mov	r0, sl
 8009874:	f7f6 fd34 	bl	80002e0 <memchr>
 8009878:	b138      	cbz	r0, 800988a <_vfiprintf_r+0x176>
 800987a:	9b04      	ldr	r3, [sp, #16]
 800987c:	eba0 000a 	sub.w	r0, r0, sl
 8009880:	2240      	movs	r2, #64	@ 0x40
 8009882:	4082      	lsls	r2, r0
 8009884:	4313      	orrs	r3, r2
 8009886:	3401      	adds	r4, #1
 8009888:	9304      	str	r3, [sp, #16]
 800988a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800988e:	4829      	ldr	r0, [pc, #164]	@ (8009934 <_vfiprintf_r+0x220>)
 8009890:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009894:	2206      	movs	r2, #6
 8009896:	f7f6 fd23 	bl	80002e0 <memchr>
 800989a:	2800      	cmp	r0, #0
 800989c:	d03f      	beq.n	800991e <_vfiprintf_r+0x20a>
 800989e:	4b26      	ldr	r3, [pc, #152]	@ (8009938 <_vfiprintf_r+0x224>)
 80098a0:	bb1b      	cbnz	r3, 80098ea <_vfiprintf_r+0x1d6>
 80098a2:	9b03      	ldr	r3, [sp, #12]
 80098a4:	3307      	adds	r3, #7
 80098a6:	f023 0307 	bic.w	r3, r3, #7
 80098aa:	3308      	adds	r3, #8
 80098ac:	9303      	str	r3, [sp, #12]
 80098ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098b0:	443b      	add	r3, r7
 80098b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80098b4:	e76a      	b.n	800978c <_vfiprintf_r+0x78>
 80098b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80098ba:	460c      	mov	r4, r1
 80098bc:	2001      	movs	r0, #1
 80098be:	e7a8      	b.n	8009812 <_vfiprintf_r+0xfe>
 80098c0:	2300      	movs	r3, #0
 80098c2:	3401      	adds	r4, #1
 80098c4:	9305      	str	r3, [sp, #20]
 80098c6:	4619      	mov	r1, r3
 80098c8:	f04f 0c0a 	mov.w	ip, #10
 80098cc:	4620      	mov	r0, r4
 80098ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80098d2:	3a30      	subs	r2, #48	@ 0x30
 80098d4:	2a09      	cmp	r2, #9
 80098d6:	d903      	bls.n	80098e0 <_vfiprintf_r+0x1cc>
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d0c6      	beq.n	800986a <_vfiprintf_r+0x156>
 80098dc:	9105      	str	r1, [sp, #20]
 80098de:	e7c4      	b.n	800986a <_vfiprintf_r+0x156>
 80098e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80098e4:	4604      	mov	r4, r0
 80098e6:	2301      	movs	r3, #1
 80098e8:	e7f0      	b.n	80098cc <_vfiprintf_r+0x1b8>
 80098ea:	ab03      	add	r3, sp, #12
 80098ec:	9300      	str	r3, [sp, #0]
 80098ee:	462a      	mov	r2, r5
 80098f0:	4b12      	ldr	r3, [pc, #72]	@ (800993c <_vfiprintf_r+0x228>)
 80098f2:	a904      	add	r1, sp, #16
 80098f4:	4630      	mov	r0, r6
 80098f6:	f7fd fe43 	bl	8007580 <_printf_float>
 80098fa:	4607      	mov	r7, r0
 80098fc:	1c78      	adds	r0, r7, #1
 80098fe:	d1d6      	bne.n	80098ae <_vfiprintf_r+0x19a>
 8009900:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009902:	07d9      	lsls	r1, r3, #31
 8009904:	d405      	bmi.n	8009912 <_vfiprintf_r+0x1fe>
 8009906:	89ab      	ldrh	r3, [r5, #12]
 8009908:	059a      	lsls	r2, r3, #22
 800990a:	d402      	bmi.n	8009912 <_vfiprintf_r+0x1fe>
 800990c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800990e:	f7fe fc67 	bl	80081e0 <__retarget_lock_release_recursive>
 8009912:	89ab      	ldrh	r3, [r5, #12]
 8009914:	065b      	lsls	r3, r3, #25
 8009916:	f53f af1f 	bmi.w	8009758 <_vfiprintf_r+0x44>
 800991a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800991c:	e71e      	b.n	800975c <_vfiprintf_r+0x48>
 800991e:	ab03      	add	r3, sp, #12
 8009920:	9300      	str	r3, [sp, #0]
 8009922:	462a      	mov	r2, r5
 8009924:	4b05      	ldr	r3, [pc, #20]	@ (800993c <_vfiprintf_r+0x228>)
 8009926:	a904      	add	r1, sp, #16
 8009928:	4630      	mov	r0, r6
 800992a:	f7fe f8b1 	bl	8007a90 <_printf_i>
 800992e:	e7e4      	b.n	80098fa <_vfiprintf_r+0x1e6>
 8009930:	0800a0d8 	.word	0x0800a0d8
 8009934:	0800a0e2 	.word	0x0800a0e2
 8009938:	08007581 	.word	0x08007581
 800993c:	080096ef 	.word	0x080096ef
 8009940:	0800a0de 	.word	0x0800a0de

08009944 <__sflush_r>:
 8009944:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800994c:	0716      	lsls	r6, r2, #28
 800994e:	4605      	mov	r5, r0
 8009950:	460c      	mov	r4, r1
 8009952:	d454      	bmi.n	80099fe <__sflush_r+0xba>
 8009954:	684b      	ldr	r3, [r1, #4]
 8009956:	2b00      	cmp	r3, #0
 8009958:	dc02      	bgt.n	8009960 <__sflush_r+0x1c>
 800995a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800995c:	2b00      	cmp	r3, #0
 800995e:	dd48      	ble.n	80099f2 <__sflush_r+0xae>
 8009960:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009962:	2e00      	cmp	r6, #0
 8009964:	d045      	beq.n	80099f2 <__sflush_r+0xae>
 8009966:	2300      	movs	r3, #0
 8009968:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800996c:	682f      	ldr	r7, [r5, #0]
 800996e:	6a21      	ldr	r1, [r4, #32]
 8009970:	602b      	str	r3, [r5, #0]
 8009972:	d030      	beq.n	80099d6 <__sflush_r+0x92>
 8009974:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009976:	89a3      	ldrh	r3, [r4, #12]
 8009978:	0759      	lsls	r1, r3, #29
 800997a:	d505      	bpl.n	8009988 <__sflush_r+0x44>
 800997c:	6863      	ldr	r3, [r4, #4]
 800997e:	1ad2      	subs	r2, r2, r3
 8009980:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009982:	b10b      	cbz	r3, 8009988 <__sflush_r+0x44>
 8009984:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009986:	1ad2      	subs	r2, r2, r3
 8009988:	2300      	movs	r3, #0
 800998a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800998c:	6a21      	ldr	r1, [r4, #32]
 800998e:	4628      	mov	r0, r5
 8009990:	47b0      	blx	r6
 8009992:	1c43      	adds	r3, r0, #1
 8009994:	89a3      	ldrh	r3, [r4, #12]
 8009996:	d106      	bne.n	80099a6 <__sflush_r+0x62>
 8009998:	6829      	ldr	r1, [r5, #0]
 800999a:	291d      	cmp	r1, #29
 800999c:	d82b      	bhi.n	80099f6 <__sflush_r+0xb2>
 800999e:	4a2a      	ldr	r2, [pc, #168]	@ (8009a48 <__sflush_r+0x104>)
 80099a0:	410a      	asrs	r2, r1
 80099a2:	07d6      	lsls	r6, r2, #31
 80099a4:	d427      	bmi.n	80099f6 <__sflush_r+0xb2>
 80099a6:	2200      	movs	r2, #0
 80099a8:	6062      	str	r2, [r4, #4]
 80099aa:	04d9      	lsls	r1, r3, #19
 80099ac:	6922      	ldr	r2, [r4, #16]
 80099ae:	6022      	str	r2, [r4, #0]
 80099b0:	d504      	bpl.n	80099bc <__sflush_r+0x78>
 80099b2:	1c42      	adds	r2, r0, #1
 80099b4:	d101      	bne.n	80099ba <__sflush_r+0x76>
 80099b6:	682b      	ldr	r3, [r5, #0]
 80099b8:	b903      	cbnz	r3, 80099bc <__sflush_r+0x78>
 80099ba:	6560      	str	r0, [r4, #84]	@ 0x54
 80099bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80099be:	602f      	str	r7, [r5, #0]
 80099c0:	b1b9      	cbz	r1, 80099f2 <__sflush_r+0xae>
 80099c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80099c6:	4299      	cmp	r1, r3
 80099c8:	d002      	beq.n	80099d0 <__sflush_r+0x8c>
 80099ca:	4628      	mov	r0, r5
 80099cc:	f7ff f9f6 	bl	8008dbc <_free_r>
 80099d0:	2300      	movs	r3, #0
 80099d2:	6363      	str	r3, [r4, #52]	@ 0x34
 80099d4:	e00d      	b.n	80099f2 <__sflush_r+0xae>
 80099d6:	2301      	movs	r3, #1
 80099d8:	4628      	mov	r0, r5
 80099da:	47b0      	blx	r6
 80099dc:	4602      	mov	r2, r0
 80099de:	1c50      	adds	r0, r2, #1
 80099e0:	d1c9      	bne.n	8009976 <__sflush_r+0x32>
 80099e2:	682b      	ldr	r3, [r5, #0]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d0c6      	beq.n	8009976 <__sflush_r+0x32>
 80099e8:	2b1d      	cmp	r3, #29
 80099ea:	d001      	beq.n	80099f0 <__sflush_r+0xac>
 80099ec:	2b16      	cmp	r3, #22
 80099ee:	d11e      	bne.n	8009a2e <__sflush_r+0xea>
 80099f0:	602f      	str	r7, [r5, #0]
 80099f2:	2000      	movs	r0, #0
 80099f4:	e022      	b.n	8009a3c <__sflush_r+0xf8>
 80099f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80099fa:	b21b      	sxth	r3, r3
 80099fc:	e01b      	b.n	8009a36 <__sflush_r+0xf2>
 80099fe:	690f      	ldr	r7, [r1, #16]
 8009a00:	2f00      	cmp	r7, #0
 8009a02:	d0f6      	beq.n	80099f2 <__sflush_r+0xae>
 8009a04:	0793      	lsls	r3, r2, #30
 8009a06:	680e      	ldr	r6, [r1, #0]
 8009a08:	bf08      	it	eq
 8009a0a:	694b      	ldreq	r3, [r1, #20]
 8009a0c:	600f      	str	r7, [r1, #0]
 8009a0e:	bf18      	it	ne
 8009a10:	2300      	movne	r3, #0
 8009a12:	eba6 0807 	sub.w	r8, r6, r7
 8009a16:	608b      	str	r3, [r1, #8]
 8009a18:	f1b8 0f00 	cmp.w	r8, #0
 8009a1c:	dde9      	ble.n	80099f2 <__sflush_r+0xae>
 8009a1e:	6a21      	ldr	r1, [r4, #32]
 8009a20:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009a22:	4643      	mov	r3, r8
 8009a24:	463a      	mov	r2, r7
 8009a26:	4628      	mov	r0, r5
 8009a28:	47b0      	blx	r6
 8009a2a:	2800      	cmp	r0, #0
 8009a2c:	dc08      	bgt.n	8009a40 <__sflush_r+0xfc>
 8009a2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a36:	81a3      	strh	r3, [r4, #12]
 8009a38:	f04f 30ff 	mov.w	r0, #4294967295
 8009a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a40:	4407      	add	r7, r0
 8009a42:	eba8 0800 	sub.w	r8, r8, r0
 8009a46:	e7e7      	b.n	8009a18 <__sflush_r+0xd4>
 8009a48:	dfbffffe 	.word	0xdfbffffe

08009a4c <_fflush_r>:
 8009a4c:	b538      	push	{r3, r4, r5, lr}
 8009a4e:	690b      	ldr	r3, [r1, #16]
 8009a50:	4605      	mov	r5, r0
 8009a52:	460c      	mov	r4, r1
 8009a54:	b913      	cbnz	r3, 8009a5c <_fflush_r+0x10>
 8009a56:	2500      	movs	r5, #0
 8009a58:	4628      	mov	r0, r5
 8009a5a:	bd38      	pop	{r3, r4, r5, pc}
 8009a5c:	b118      	cbz	r0, 8009a66 <_fflush_r+0x1a>
 8009a5e:	6a03      	ldr	r3, [r0, #32]
 8009a60:	b90b      	cbnz	r3, 8009a66 <_fflush_r+0x1a>
 8009a62:	f7fe f9c1 	bl	8007de8 <__sinit>
 8009a66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d0f3      	beq.n	8009a56 <_fflush_r+0xa>
 8009a6e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009a70:	07d0      	lsls	r0, r2, #31
 8009a72:	d404      	bmi.n	8009a7e <_fflush_r+0x32>
 8009a74:	0599      	lsls	r1, r3, #22
 8009a76:	d402      	bmi.n	8009a7e <_fflush_r+0x32>
 8009a78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009a7a:	f7fe fbb0 	bl	80081de <__retarget_lock_acquire_recursive>
 8009a7e:	4628      	mov	r0, r5
 8009a80:	4621      	mov	r1, r4
 8009a82:	f7ff ff5f 	bl	8009944 <__sflush_r>
 8009a86:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009a88:	07da      	lsls	r2, r3, #31
 8009a8a:	4605      	mov	r5, r0
 8009a8c:	d4e4      	bmi.n	8009a58 <_fflush_r+0xc>
 8009a8e:	89a3      	ldrh	r3, [r4, #12]
 8009a90:	059b      	lsls	r3, r3, #22
 8009a92:	d4e1      	bmi.n	8009a58 <_fflush_r+0xc>
 8009a94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009a96:	f7fe fba3 	bl	80081e0 <__retarget_lock_release_recursive>
 8009a9a:	e7dd      	b.n	8009a58 <_fflush_r+0xc>

08009a9c <__swhatbuf_r>:
 8009a9c:	b570      	push	{r4, r5, r6, lr}
 8009a9e:	460c      	mov	r4, r1
 8009aa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009aa4:	2900      	cmp	r1, #0
 8009aa6:	b096      	sub	sp, #88	@ 0x58
 8009aa8:	4615      	mov	r5, r2
 8009aaa:	461e      	mov	r6, r3
 8009aac:	da0d      	bge.n	8009aca <__swhatbuf_r+0x2e>
 8009aae:	89a3      	ldrh	r3, [r4, #12]
 8009ab0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009ab4:	f04f 0100 	mov.w	r1, #0
 8009ab8:	bf14      	ite	ne
 8009aba:	2340      	movne	r3, #64	@ 0x40
 8009abc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009ac0:	2000      	movs	r0, #0
 8009ac2:	6031      	str	r1, [r6, #0]
 8009ac4:	602b      	str	r3, [r5, #0]
 8009ac6:	b016      	add	sp, #88	@ 0x58
 8009ac8:	bd70      	pop	{r4, r5, r6, pc}
 8009aca:	466a      	mov	r2, sp
 8009acc:	f000 f848 	bl	8009b60 <_fstat_r>
 8009ad0:	2800      	cmp	r0, #0
 8009ad2:	dbec      	blt.n	8009aae <__swhatbuf_r+0x12>
 8009ad4:	9901      	ldr	r1, [sp, #4]
 8009ad6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009ada:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009ade:	4259      	negs	r1, r3
 8009ae0:	4159      	adcs	r1, r3
 8009ae2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009ae6:	e7eb      	b.n	8009ac0 <__swhatbuf_r+0x24>

08009ae8 <__smakebuf_r>:
 8009ae8:	898b      	ldrh	r3, [r1, #12]
 8009aea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009aec:	079d      	lsls	r5, r3, #30
 8009aee:	4606      	mov	r6, r0
 8009af0:	460c      	mov	r4, r1
 8009af2:	d507      	bpl.n	8009b04 <__smakebuf_r+0x1c>
 8009af4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009af8:	6023      	str	r3, [r4, #0]
 8009afa:	6123      	str	r3, [r4, #16]
 8009afc:	2301      	movs	r3, #1
 8009afe:	6163      	str	r3, [r4, #20]
 8009b00:	b003      	add	sp, #12
 8009b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b04:	ab01      	add	r3, sp, #4
 8009b06:	466a      	mov	r2, sp
 8009b08:	f7ff ffc8 	bl	8009a9c <__swhatbuf_r>
 8009b0c:	9f00      	ldr	r7, [sp, #0]
 8009b0e:	4605      	mov	r5, r0
 8009b10:	4639      	mov	r1, r7
 8009b12:	4630      	mov	r0, r6
 8009b14:	f7ff f9c6 	bl	8008ea4 <_malloc_r>
 8009b18:	b948      	cbnz	r0, 8009b2e <__smakebuf_r+0x46>
 8009b1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b1e:	059a      	lsls	r2, r3, #22
 8009b20:	d4ee      	bmi.n	8009b00 <__smakebuf_r+0x18>
 8009b22:	f023 0303 	bic.w	r3, r3, #3
 8009b26:	f043 0302 	orr.w	r3, r3, #2
 8009b2a:	81a3      	strh	r3, [r4, #12]
 8009b2c:	e7e2      	b.n	8009af4 <__smakebuf_r+0xc>
 8009b2e:	89a3      	ldrh	r3, [r4, #12]
 8009b30:	6020      	str	r0, [r4, #0]
 8009b32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b36:	81a3      	strh	r3, [r4, #12]
 8009b38:	9b01      	ldr	r3, [sp, #4]
 8009b3a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009b3e:	b15b      	cbz	r3, 8009b58 <__smakebuf_r+0x70>
 8009b40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b44:	4630      	mov	r0, r6
 8009b46:	f000 f81d 	bl	8009b84 <_isatty_r>
 8009b4a:	b128      	cbz	r0, 8009b58 <__smakebuf_r+0x70>
 8009b4c:	89a3      	ldrh	r3, [r4, #12]
 8009b4e:	f023 0303 	bic.w	r3, r3, #3
 8009b52:	f043 0301 	orr.w	r3, r3, #1
 8009b56:	81a3      	strh	r3, [r4, #12]
 8009b58:	89a3      	ldrh	r3, [r4, #12]
 8009b5a:	431d      	orrs	r5, r3
 8009b5c:	81a5      	strh	r5, [r4, #12]
 8009b5e:	e7cf      	b.n	8009b00 <__smakebuf_r+0x18>

08009b60 <_fstat_r>:
 8009b60:	b538      	push	{r3, r4, r5, lr}
 8009b62:	4d07      	ldr	r5, [pc, #28]	@ (8009b80 <_fstat_r+0x20>)
 8009b64:	2300      	movs	r3, #0
 8009b66:	4604      	mov	r4, r0
 8009b68:	4608      	mov	r0, r1
 8009b6a:	4611      	mov	r1, r2
 8009b6c:	602b      	str	r3, [r5, #0]
 8009b6e:	f7f7 fb1a 	bl	80011a6 <_fstat>
 8009b72:	1c43      	adds	r3, r0, #1
 8009b74:	d102      	bne.n	8009b7c <_fstat_r+0x1c>
 8009b76:	682b      	ldr	r3, [r5, #0]
 8009b78:	b103      	cbz	r3, 8009b7c <_fstat_r+0x1c>
 8009b7a:	6023      	str	r3, [r4, #0]
 8009b7c:	bd38      	pop	{r3, r4, r5, pc}
 8009b7e:	bf00      	nop
 8009b80:	24000b28 	.word	0x24000b28

08009b84 <_isatty_r>:
 8009b84:	b538      	push	{r3, r4, r5, lr}
 8009b86:	4d06      	ldr	r5, [pc, #24]	@ (8009ba0 <_isatty_r+0x1c>)
 8009b88:	2300      	movs	r3, #0
 8009b8a:	4604      	mov	r4, r0
 8009b8c:	4608      	mov	r0, r1
 8009b8e:	602b      	str	r3, [r5, #0]
 8009b90:	f7f7 fb0e 	bl	80011b0 <_isatty>
 8009b94:	1c43      	adds	r3, r0, #1
 8009b96:	d102      	bne.n	8009b9e <_isatty_r+0x1a>
 8009b98:	682b      	ldr	r3, [r5, #0]
 8009b9a:	b103      	cbz	r3, 8009b9e <_isatty_r+0x1a>
 8009b9c:	6023      	str	r3, [r4, #0]
 8009b9e:	bd38      	pop	{r3, r4, r5, pc}
 8009ba0:	24000b28 	.word	0x24000b28

08009ba4 <_sbrk_r>:
 8009ba4:	b538      	push	{r3, r4, r5, lr}
 8009ba6:	4d06      	ldr	r5, [pc, #24]	@ (8009bc0 <_sbrk_r+0x1c>)
 8009ba8:	2300      	movs	r3, #0
 8009baa:	4604      	mov	r4, r0
 8009bac:	4608      	mov	r0, r1
 8009bae:	602b      	str	r3, [r5, #0]
 8009bb0:	f7f7 fb02 	bl	80011b8 <_sbrk>
 8009bb4:	1c43      	adds	r3, r0, #1
 8009bb6:	d102      	bne.n	8009bbe <_sbrk_r+0x1a>
 8009bb8:	682b      	ldr	r3, [r5, #0]
 8009bba:	b103      	cbz	r3, 8009bbe <_sbrk_r+0x1a>
 8009bbc:	6023      	str	r3, [r4, #0]
 8009bbe:	bd38      	pop	{r3, r4, r5, pc}
 8009bc0:	24000b28 	.word	0x24000b28

08009bc4 <__assert_func>:
 8009bc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009bc6:	4614      	mov	r4, r2
 8009bc8:	461a      	mov	r2, r3
 8009bca:	4b09      	ldr	r3, [pc, #36]	@ (8009bf0 <__assert_func+0x2c>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	4605      	mov	r5, r0
 8009bd0:	68d8      	ldr	r0, [r3, #12]
 8009bd2:	b954      	cbnz	r4, 8009bea <__assert_func+0x26>
 8009bd4:	4b07      	ldr	r3, [pc, #28]	@ (8009bf4 <__assert_func+0x30>)
 8009bd6:	461c      	mov	r4, r3
 8009bd8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009bdc:	9100      	str	r1, [sp, #0]
 8009bde:	462b      	mov	r3, r5
 8009be0:	4905      	ldr	r1, [pc, #20]	@ (8009bf8 <__assert_func+0x34>)
 8009be2:	f000 f841 	bl	8009c68 <fiprintf>
 8009be6:	f000 f851 	bl	8009c8c <abort>
 8009bea:	4b04      	ldr	r3, [pc, #16]	@ (8009bfc <__assert_func+0x38>)
 8009bec:	e7f4      	b.n	8009bd8 <__assert_func+0x14>
 8009bee:	bf00      	nop
 8009bf0:	2000001c 	.word	0x2000001c
 8009bf4:	0800a12e 	.word	0x0800a12e
 8009bf8:	0800a100 	.word	0x0800a100
 8009bfc:	0800a0f3 	.word	0x0800a0f3

08009c00 <_calloc_r>:
 8009c00:	b570      	push	{r4, r5, r6, lr}
 8009c02:	fba1 5402 	umull	r5, r4, r1, r2
 8009c06:	b93c      	cbnz	r4, 8009c18 <_calloc_r+0x18>
 8009c08:	4629      	mov	r1, r5
 8009c0a:	f7ff f94b 	bl	8008ea4 <_malloc_r>
 8009c0e:	4606      	mov	r6, r0
 8009c10:	b928      	cbnz	r0, 8009c1e <_calloc_r+0x1e>
 8009c12:	2600      	movs	r6, #0
 8009c14:	4630      	mov	r0, r6
 8009c16:	bd70      	pop	{r4, r5, r6, pc}
 8009c18:	220c      	movs	r2, #12
 8009c1a:	6002      	str	r2, [r0, #0]
 8009c1c:	e7f9      	b.n	8009c12 <_calloc_r+0x12>
 8009c1e:	462a      	mov	r2, r5
 8009c20:	4621      	mov	r1, r4
 8009c22:	f7fe fa5f 	bl	80080e4 <memset>
 8009c26:	e7f5      	b.n	8009c14 <_calloc_r+0x14>

08009c28 <__ascii_mbtowc>:
 8009c28:	b082      	sub	sp, #8
 8009c2a:	b901      	cbnz	r1, 8009c2e <__ascii_mbtowc+0x6>
 8009c2c:	a901      	add	r1, sp, #4
 8009c2e:	b142      	cbz	r2, 8009c42 <__ascii_mbtowc+0x1a>
 8009c30:	b14b      	cbz	r3, 8009c46 <__ascii_mbtowc+0x1e>
 8009c32:	7813      	ldrb	r3, [r2, #0]
 8009c34:	600b      	str	r3, [r1, #0]
 8009c36:	7812      	ldrb	r2, [r2, #0]
 8009c38:	1e10      	subs	r0, r2, #0
 8009c3a:	bf18      	it	ne
 8009c3c:	2001      	movne	r0, #1
 8009c3e:	b002      	add	sp, #8
 8009c40:	4770      	bx	lr
 8009c42:	4610      	mov	r0, r2
 8009c44:	e7fb      	b.n	8009c3e <__ascii_mbtowc+0x16>
 8009c46:	f06f 0001 	mvn.w	r0, #1
 8009c4a:	e7f8      	b.n	8009c3e <__ascii_mbtowc+0x16>

08009c4c <__ascii_wctomb>:
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	4608      	mov	r0, r1
 8009c50:	b141      	cbz	r1, 8009c64 <__ascii_wctomb+0x18>
 8009c52:	2aff      	cmp	r2, #255	@ 0xff
 8009c54:	d904      	bls.n	8009c60 <__ascii_wctomb+0x14>
 8009c56:	228a      	movs	r2, #138	@ 0x8a
 8009c58:	601a      	str	r2, [r3, #0]
 8009c5a:	f04f 30ff 	mov.w	r0, #4294967295
 8009c5e:	4770      	bx	lr
 8009c60:	700a      	strb	r2, [r1, #0]
 8009c62:	2001      	movs	r0, #1
 8009c64:	4770      	bx	lr
	...

08009c68 <fiprintf>:
 8009c68:	b40e      	push	{r1, r2, r3}
 8009c6a:	b503      	push	{r0, r1, lr}
 8009c6c:	4601      	mov	r1, r0
 8009c6e:	ab03      	add	r3, sp, #12
 8009c70:	4805      	ldr	r0, [pc, #20]	@ (8009c88 <fiprintf+0x20>)
 8009c72:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c76:	6800      	ldr	r0, [r0, #0]
 8009c78:	9301      	str	r3, [sp, #4]
 8009c7a:	f7ff fd4b 	bl	8009714 <_vfiprintf_r>
 8009c7e:	b002      	add	sp, #8
 8009c80:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c84:	b003      	add	sp, #12
 8009c86:	4770      	bx	lr
 8009c88:	2000001c 	.word	0x2000001c

08009c8c <abort>:
 8009c8c:	b508      	push	{r3, lr}
 8009c8e:	2006      	movs	r0, #6
 8009c90:	f000 f82c 	bl	8009cec <raise>
 8009c94:	2001      	movs	r0, #1
 8009c96:	f7f7 fa63 	bl	8001160 <_exit>

08009c9a <_raise_r>:
 8009c9a:	291f      	cmp	r1, #31
 8009c9c:	b538      	push	{r3, r4, r5, lr}
 8009c9e:	4605      	mov	r5, r0
 8009ca0:	460c      	mov	r4, r1
 8009ca2:	d904      	bls.n	8009cae <_raise_r+0x14>
 8009ca4:	2316      	movs	r3, #22
 8009ca6:	6003      	str	r3, [r0, #0]
 8009ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8009cac:	bd38      	pop	{r3, r4, r5, pc}
 8009cae:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009cb0:	b112      	cbz	r2, 8009cb8 <_raise_r+0x1e>
 8009cb2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009cb6:	b94b      	cbnz	r3, 8009ccc <_raise_r+0x32>
 8009cb8:	4628      	mov	r0, r5
 8009cba:	f000 f831 	bl	8009d20 <_getpid_r>
 8009cbe:	4622      	mov	r2, r4
 8009cc0:	4601      	mov	r1, r0
 8009cc2:	4628      	mov	r0, r5
 8009cc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009cc8:	f000 b818 	b.w	8009cfc <_kill_r>
 8009ccc:	2b01      	cmp	r3, #1
 8009cce:	d00a      	beq.n	8009ce6 <_raise_r+0x4c>
 8009cd0:	1c59      	adds	r1, r3, #1
 8009cd2:	d103      	bne.n	8009cdc <_raise_r+0x42>
 8009cd4:	2316      	movs	r3, #22
 8009cd6:	6003      	str	r3, [r0, #0]
 8009cd8:	2001      	movs	r0, #1
 8009cda:	e7e7      	b.n	8009cac <_raise_r+0x12>
 8009cdc:	2100      	movs	r1, #0
 8009cde:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009ce2:	4620      	mov	r0, r4
 8009ce4:	4798      	blx	r3
 8009ce6:	2000      	movs	r0, #0
 8009ce8:	e7e0      	b.n	8009cac <_raise_r+0x12>
	...

08009cec <raise>:
 8009cec:	4b02      	ldr	r3, [pc, #8]	@ (8009cf8 <raise+0xc>)
 8009cee:	4601      	mov	r1, r0
 8009cf0:	6818      	ldr	r0, [r3, #0]
 8009cf2:	f7ff bfd2 	b.w	8009c9a <_raise_r>
 8009cf6:	bf00      	nop
 8009cf8:	2000001c 	.word	0x2000001c

08009cfc <_kill_r>:
 8009cfc:	b538      	push	{r3, r4, r5, lr}
 8009cfe:	4d07      	ldr	r5, [pc, #28]	@ (8009d1c <_kill_r+0x20>)
 8009d00:	2300      	movs	r3, #0
 8009d02:	4604      	mov	r4, r0
 8009d04:	4608      	mov	r0, r1
 8009d06:	4611      	mov	r1, r2
 8009d08:	602b      	str	r3, [r5, #0]
 8009d0a:	f7f7 fa21 	bl	8001150 <_kill>
 8009d0e:	1c43      	adds	r3, r0, #1
 8009d10:	d102      	bne.n	8009d18 <_kill_r+0x1c>
 8009d12:	682b      	ldr	r3, [r5, #0]
 8009d14:	b103      	cbz	r3, 8009d18 <_kill_r+0x1c>
 8009d16:	6023      	str	r3, [r4, #0]
 8009d18:	bd38      	pop	{r3, r4, r5, pc}
 8009d1a:	bf00      	nop
 8009d1c:	24000b28 	.word	0x24000b28

08009d20 <_getpid_r>:
 8009d20:	f7f7 ba14 	b.w	800114c <_getpid>

08009d24 <_init>:
 8009d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d26:	bf00      	nop
 8009d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d2a:	bc08      	pop	{r3}
 8009d2c:	469e      	mov	lr, r3
 8009d2e:	4770      	bx	lr

08009d30 <_fini>:
 8009d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d32:	bf00      	nop
 8009d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d36:	bc08      	pop	{r3}
 8009d38:	469e      	mov	lr, r3
 8009d3a:	4770      	bx	lr
